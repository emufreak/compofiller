F00:0001       BPLCON0=                    $100
F00:0002       BPLCON1=                    $102
F00:0003       BPLCON2=                    $104
F00:0004       BLTAMOD:                equ $64
F00:0005       BLTBMOD:                equ $62
F00:0006       BLTCMOD:                equ $60
F00:0007       BLTDMOD:                equ $66
F00:0008       BLTAFWM:                equ $44
F00:0009       BLTCON0:                equ $40
F00:0010       BLTCON1:                equ $42
F00:0011       VHPOSR:                 equ 6
F00:0012       BLTAPTH:                equ $50
F00:0013       BLTAPTL:                equ $52
F00:0014       BLTBPTH:                equ $4c
F00:0015       BLTCPTH:                equ $48
F00:0016       BLTDPTH:                equ $54
F00:0017       BLTSIZE:                equ $58
F00:0018       BLTADAT:                equ $74
F00:0019       BLTBDAT:                equ $72
F00:0020       CIAAPRA         EQU             $bfe001
F00:0021       VPOSR           EQU             $dff004
F00:0022       COP1LCH         EQU             $dff080
F00:0023       DMACONR		EQU		$dff002
F00:0024       ADKCONR		EQU		$dff010
F00:0025       INTENAR		EQU		$dff01c
F00:0026       INTREQR		EQU		$dff01e
F00:0027       CIAAPRA2         EQU             $001
F00:0028       VPOSR2           EQU             $004
F00:0029       COP1LCH2         EQU             $080
F00:0030       DMACONR2		EQU		$002
F00:0031       ADKCONR2		EQU		$010
F00:0032       INTENAR2		EQU		$01c
F00:0033       INTREQR2		EQU		$01e
F00:0034       DMACON		EQU		$dff096
F00:0035       ADKCON		EQU		$dff09e
F00:0036       INTENA		EQU		$dff09a
F00:0037       INTREQ		EQU		$dff09c
F00:0038       DMACON2		EQU		$096
F00:0039       ADKCON2		EQU		$09e
F00:0040       INTENA2		EQU		$09a
F00:0041       INTREQ2		EQU		$09c
F00:0042       init:
F00:0043       	; store data in hardwareregisters ORed with $8000
F00:0044               ;(bit 15 is a write-set bit when values are written back into the system)
F00:0045       ;Stack the registers
F00:0046       	movem.l d0-d7/a0-a6,-(sp)
               S01:00000000:  48 E7 FF FE
F00:0047       	move.w	DMACONR,d0
               S01:00000004:  30 39 00 DF F0 02
F00:0048       	or.w #$8000,d0
               S01:0000000A:  80 7C 80 00
F00:0049       	move.w d0,olddmareq
               S01:0000000E:  33 C0 00 00 04 80 [R]
F00:0050       	move.w	INTENAR,d0
               S01:00000014:  30 39 00 DF F0 1C
F00:0051       	or.w #$8000,d0
               S01:0000001A:  80 7C 80 00
F00:0052       	move.w d0,oldintena
               S01:0000001E:  33 C0 00 00 04 84 [R]
F00:0053       	move.w	INTREQR,d0
               S01:00000024:  30 39 00 DF F0 1E
F00:0054       	or.w #$8000,d0
               S01:0000002A:  80 7C 80 00
F00:0055       	move.w d0,oldintreq
               S01:0000002E:  33 C0 00 00 04 82 [R]
F00:0056       ;        move.w  #$7fff,INTENA
F00:0057               move.w	ADKCONR,d0;
               S01:00000034:  30 39 00 DF F0 10
F00:0058       	or.w #$8000,d0
               S01:0000003A:  80 7C 80 00
F00:0059       	move.w d0,oldadkcon
               S01:0000003E:  33 C0 00 00 04 86 [R]
F00:0060       	; base library address in $4
F00:0061       	move.l	$4,a6
               S01:00000044:  2C 78 00 04
F00:0062       	move.l	#gfxname,a1
               S01:00000048:  43 FA 04 42
F00:0063       	moveq	#0,d0 ; whatever
               S01:0000004C:  70 00
F00:0064       	jsr	-552(a6) 
               S01:0000004E:  4E AE FD D8
F00:0065       	move.l	d0,gfxbase
               S01:00000052:  23 C0 00 00 04 78 [R]
F00:0066       	move.l 	d0,a6
               S01:00000058:  2C 40
F00:0067       	move.l 	34(a6),oldview
               S01:0000005A:  23 EE 00 22 00 00 04 70 [R]
F00:0068       	move.l 	38(a6),oldcopper
               S01:00000062:  23 EE 00 26 00 00 04 74 [R]
F00:0069       	move.l #0,a1
               S01:0000006A:  93 C9
F00:0070       	jsr -222(a6)	; LoadView
               S01:0000006C:  4E AE FF 22
F00:0071       	jsr -270(a6)	; WaitTOF
               S01:00000070:  4E AE FE F2
F00:0072       	jsr -270(a6)	; WaitTOF
               S01:00000074:  4E AE FE F2
F00:0073       	move.l	$4,a6
               S01:00000078:  2C 78 00 04
F00:0074       	jsr -132(a6)	; Forbid
               S01:0000007C:  4E AE FF 7C
F00:0075               move.l #cop,a0
               S01:00000080:  41 F9 00 00 00 00 [R]
F00:0076               move.l a0,COP1LCH
               S01:00000086:  23 C8 00 DF F0 80
F00:0077       	jmp block1
               S01:0000008C:  60 00 02 CA
F00:0078       Graphics_pa dc.l 0
               S01:00000090:  00 00 00 00
F00:0079       Graphics_bpl	dc.w	0
               S01:00000094:  00 00
F00:0080       Graphics_j	dc.w	0
               S01:00000096:  00 00
F00:0081       Graphics_bytefill1	dc.b $ff, $7f, $3f, $1f, $f, $7, $3, $1
               S01:00000098:  FF
               S01:00000099:  7F
               S01:0000009A:  3F
               S01:0000009B:  1F
               S01:0000009C:  0F
               S01:0000009D:  07
               S01:0000009E:  03
               S01:0000009F:  01
F00:0082       Graphics_bytefill2	dc.b $0, $80, $c0, $e0, $f0, $f8, $fc, $fe
               S01:000000A0:  00
               S01:000000A1:  80
               S01:000000A2:  C0
               S01:000000A3:  E0
               S01:000000A4:  F0
               S01:000000A5:  F8
               S01:000000A6:  FC
               S01:000000A7:  FE
F00:0083       	dc.b $ff, $ff
               S01:000000A8:  FF
               S01:000000A9:  FF
F00:0084       Graphics_bytefill3	dc.b $fe, $fc, $f8, $f0, $e0, $c0, $80, $0
               S01:000000AA:  FE
               S01:000000AB:  FC
               S01:000000AC:  F8
               S01:000000AD:  F0
               S01:000000AE:  E0
               S01:000000AF:  C0
               S01:000000B0:  80
               S01:000000B1:  00
F00:0085       mousereg	dc.w	$00
               S01:000000B2:  00 00
F00:0086       	 	CNOP 0,4
F00:0087       image_palette
F00:0088       	incbin "C:/Users/uersu/Documents/GitData/compofiller/mousetest///images/trse.pal"
               S01:000000B4:  00 00 0F FF 06 32 07 AB 06 38 05 84 03 27 0B C6
               S01:000000C4:  09 52 04 30 09 65 04 44 06 66 09 D8 06 5B 09 99
F00:0089       	 	CNOP 0,4
F00:0090       	;*
F00:0091       ; //	Sets up the copper list to point to a 320x256 buffer. Note that the screen will be set up 
F00:0092       ; //	interlaced, with 40 bytes per line per bitplane. <p>
F00:0093       ; //	
F00:0094       ; //	Usage: 
F00:0095       ; //		SetupDefaultScreen( [ data buffer ], [ number of bitplanes ] )
F00:0096       ; //		
F00:0097       ; //	Note that the data buffer must reside in chipmem
F00:0098       ; //	
F00:0099       ; //	Example:
F00:0100       ; //	
F00:0101       ; //	<code>
F00:0102       ; //var
F00:0103       ; //	const noBitPlanes = 2; 
F00:0104       ; // 2 bitplanes = 4 colors
F00:0105       ; //	buf : array[40*256*noBitPlanes] chipmem; 
F00:0106       ; // data buffer stored in chipmem  
F00:0107       ; //...
F00:0108       ; //begin
F00:0109       ; //	Graphics::SetupDefaultScreen(#buf, noBitPlanes);
F00:0110       ; //	</code>
F00:0111       ; //	
F00:0112       ; 
F00:0113       
F00:0114       	; ***********  Defining procedure : Graphics_SetupDefaultScreen
F00:0115       	;    Procedure type : User-defined procedure
F00:0116       	jmp block2
               S01:000000D4:  60 02
F00:0117        ; Temp vars section
F00:0118        ; Temp vars section ends
F00:0119       	 	CNOP 0,4
F00:0120       block2
F00:0121       Graphics_SetupDefaultScreen
F00:0122       	moveq #0,d0
               S01:000000D8:  70 00
F00:0123       	moveq #0,d1
               S01:000000DA:  72 00
F00:0124       	move.w #$1000,d1     ; BOP move
               S01:000000DC:  32 3C 10 00
F00:0125       	mulu.w Graphics_bpl,d1 ; simple bop
               S01:000000E0:  C2 FA FF B2
F00:0126       	move.w d1,d0     ; BOP move
               S01:000000E4:  30 01
F00:0127       	or.w #$200,d0 ; simple bop
               S01:000000E6:  80 7C 02 00
F00:0128       	; Store variable : Graphics_j
F00:0129       	move.w d0,Graphics_j
               S01:000000EA:  33 C0 00 00 00 96 [R]
F00:0130       	; Poke command
F00:0131       	move.l #copper_resolution,a0
               S01:000000F0:  41 F9 00 00 01 1A [R]
F00:0132       	move.w Graphics_j,(a0)
               S01:000000F6:  30 BA FF 9E
F00:0133       	cmp.w #$5,Graphics_bpl
               S01:000000FA:  0C 79 00 05 00 00 00 94 [R]
F00:0134       	bne edblock6
               S01:00000102:  66 00 00 AC
F00:0135       ctb4: ;Main true block ;keep 
F00:0136       	
F00:0137       ; // $4000  = bitplanes, $200 = colours
F00:0138       ; // Set palette at copper palette location, 16 colors
F00:0139       ; // Setup image copper list (4 bitplanes, 40*40 modulo 120
F00:0140       	; setcopperlist32
F00:0141       	move.l Graphics_pa,a1
               S01:00000106:  22 7A FF 88
F00:0142       	move.l a1,d0
               S01:0000010A:  20 09
F00:0143       	move.l #copper_bitplane0,a0
               S01:0000010C:  41 F9 00 00 00 E8 [R]
F00:0144       	move.w d0,6(a0)
               S01:00000112:  31 40 00 06
F00:0145       	swap d0
               S01:00000116:  48 40
F00:0146       	move.w d0,2(a0)
               S01:00000118:  31 40 00 02
F00:0147       	add.l #$28,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0000011C:  06 B9 00 00 00 28 00 00 00 90 [R]
F00:0148       	; setcopperlist32
F00:0149       	move.l Graphics_pa,a1
               S01:00000126:  22 7A FF 68
F00:0150       	move.l a1,d0
               S01:0000012A:  20 09
F00:0151       	move.l #copper_bitplane1,a0
               S01:0000012C:  41 F9 00 00 00 F0 [R]
F00:0152       	move.w d0,6(a0)
               S01:00000132:  31 40 00 06
F00:0153       	swap d0
               S01:00000136:  48 40
F00:0154       	move.w d0,2(a0)
               S01:00000138:  31 40 00 02
F00:0155       	add.l #$28,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0000013C:  06 B9 00 00 00 28 00 00 00 90 [R]
F00:0156       	; setcopperlist32
F00:0157       	move.l Graphics_pa,a1
               S01:00000146:  22 7A FF 48
F00:0158       	move.l a1,d0
               S01:0000014A:  20 09
F00:0159       	move.l #copper_bitplane2,a0
               S01:0000014C:  41 F9 00 00 00 F8 [R]
F00:0160       	move.w d0,6(a0)
               S01:00000152:  31 40 00 06
F00:0161       	swap d0
               S01:00000156:  48 40
F00:0162       	move.w d0,2(a0)
               S01:00000158:  31 40 00 02
F00:0163       	add.l #$28,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0000015C:  06 B9 00 00 00 28 00 00 00 90 [R]
F00:0164       	; setcopperlist32
F00:0165       	move.l Graphics_pa,a1
               S01:00000166:  22 7A FF 28
F00:0166       	move.l a1,d0
               S01:0000016A:  20 09
F00:0167       	move.l #copper_bitplane3,a0
               S01:0000016C:  41 F9 00 00 01 00 [R]
F00:0168       	move.w d0,6(a0)
               S01:00000172:  31 40 00 06
F00:0169       	swap d0
               S01:00000176:  48 40
F00:0170       	move.w d0,2(a0)
               S01:00000178:  31 40 00 02
F00:0171       	add.l #$28,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0000017C:  06 B9 00 00 00 28 00 00 00 90 [R]
F00:0172       	; setcopperlist32
F00:0173       	move.l Graphics_pa,a1
               S01:00000186:  22 7A FF 08
F00:0174       	move.l a1,d0
               S01:0000018A:  20 09
F00:0175       	move.l #copper_bitplane4,a0
               S01:0000018C:  41 F9 00 00 01 08 [R]
F00:0176       	move.w d0,6(a0)
               S01:00000192:  31 40 00 06
F00:0177       	swap d0
               S01:00000196:  48 40
F00:0178       	move.w d0,2(a0)
               S01:00000198:  31 40 00 02
F00:0179       	; Poke command
F00:0180       	move.l #copper_mod_even,a0
               S01:0000019C:  41 F9 00 00 00 12 [R]
F00:0181       	move.w #$a0,(a0)
               S01:000001A2:  30 BC 00 A0
F00:0182       	; Poke command
F00:0183       	move.l #copper_mod_odd,a0
               S01:000001A6:  41 F9 00 00 00 16 [R]
F00:0184       	move.w #$a0,(a0)
               S01:000001AC:  30 BC 00 A0
F00:0185       edblock6
F00:0186       	cmp.w #$4,Graphics_bpl
               S01:000001B0:  0C 79 00 04 00 00 00 94 [R]
F00:0187       	bne edblock12
               S01:000001B8:  66 00 00 8C
F00:0188       ctb10: ;Main true block ;keep 
F00:0189       	; setcopperlist32
F00:0190       	move.l Graphics_pa,a1
               S01:000001BC:  22 7A FE D2
F00:0191       	move.l a1,d0
               S01:000001C0:  20 09
F00:0192       	move.l #copper_bitplane0,a0
               S01:000001C2:  41 F9 00 00 00 E8 [R]
F00:0193       	move.w d0,6(a0)
               S01:000001C8:  31 40 00 06
F00:0194       	swap d0
               S01:000001CC:  48 40
F00:0195       	move.w d0,2(a0)
               S01:000001CE:  31 40 00 02
F00:0196       	add.l #$28,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000001D2:  06 B9 00 00 00 28 00 00 00 90 [R]
F00:0197       	; setcopperlist32
F00:0198       	move.l Graphics_pa,a1
               S01:000001DC:  22 7A FE B2
F00:0199       	move.l a1,d0
               S01:000001E0:  20 09
F00:0200       	move.l #copper_bitplane1,a0
               S01:000001E2:  41 F9 00 00 00 F0 [R]
F00:0201       	move.w d0,6(a0)
               S01:000001E8:  31 40 00 06
F00:0202       	swap d0
               S01:000001EC:  48 40
F00:0203       	move.w d0,2(a0)
               S01:000001EE:  31 40 00 02
F00:0204       	add.l #$28,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000001F2:  06 B9 00 00 00 28 00 00 00 90 [R]
F00:0205       	; setcopperlist32
F00:0206       	move.l Graphics_pa,a1
               S01:000001FC:  22 7A FE 92
F00:0207       	move.l a1,d0
               S01:00000200:  20 09
F00:0208       	move.l #copper_bitplane2,a0
               S01:00000202:  41 F9 00 00 00 F8 [R]
F00:0209       	move.w d0,6(a0)
               S01:00000208:  31 40 00 06
F00:0210       	swap d0
               S01:0000020C:  48 40
F00:0211       	move.w d0,2(a0)
               S01:0000020E:  31 40 00 02
F00:0212       	add.l #$28,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000212:  06 B9 00 00 00 28 00 00 00 90 [R]
F00:0213       	; setcopperlist32
F00:0214       	move.l Graphics_pa,a1
               S01:0000021C:  22 7A FE 72
F00:0215       	move.l a1,d0
               S01:00000220:  20 09
F00:0216       	move.l #copper_bitplane3,a0
               S01:00000222:  41 F9 00 00 01 00 [R]
F00:0217       	move.w d0,6(a0)
               S01:00000228:  31 40 00 06
F00:0218       	swap d0
               S01:0000022C:  48 40
F00:0219       	move.w d0,2(a0)
               S01:0000022E:  31 40 00 02
F00:0220       	; Poke command
F00:0221       	move.l #copper_mod_even,a0
               S01:00000232:  41 F9 00 00 00 12 [R]
F00:0222       	move.w #$78,(a0)
               S01:00000238:  30 BC 00 78
F00:0223       	; Poke command
F00:0224       	move.l #copper_mod_odd,a0
               S01:0000023C:  41 F9 00 00 00 16 [R]
F00:0225       	move.w #$78,(a0)
               S01:00000242:  30 BC 00 78
F00:0226       edblock12
F00:0227       	cmp.w #$3,Graphics_bpl
               S01:00000246:  0C 79 00 03 00 00 00 94 [R]
F00:0228       	bne edblock18
               S01:0000024E:  66 74
F00:0229       ctb16: ;Main true block ;keep 
F00:0230       	; setcopperlist32
F00:0231       	move.l Graphics_pa,a1
               S01:00000250:  22 7A FE 3E
F00:0232       	move.l a1,d0
               S01:00000254:  20 09
F00:0233       	move.l #copper_bitplane0,a0
               S01:00000256:  41 F9 00 00 00 E8 [R]
F00:0234       	move.w d0,6(a0)
               S01:0000025C:  31 40 00 06
F00:0235       	swap d0
               S01:00000260:  48 40
F00:0236       	move.w d0,2(a0)
               S01:00000262:  31 40 00 02
F00:0237       	add.l #$28,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000266:  06 B9 00 00 00 28 00 00 00 90 [R]
F00:0238       	; setcopperlist32
F00:0239       	move.l Graphics_pa,a1
               S01:00000270:  22 7A FE 1E
F00:0240       	move.l a1,d0
               S01:00000274:  20 09
F00:0241       	move.l #copper_bitplane1,a0
               S01:00000276:  41 F9 00 00 00 F0 [R]
F00:0242       	move.w d0,6(a0)
               S01:0000027C:  31 40 00 06
F00:0243       	swap d0
               S01:00000280:  48 40
F00:0244       	move.w d0,2(a0)
               S01:00000282:  31 40 00 02
F00:0245       	add.l #$28,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000286:  06 B9 00 00 00 28 00 00 00 90 [R]
F00:0246       	; setcopperlist32
F00:0247       	move.l Graphics_pa,a1
               S01:00000290:  22 7A FD FE
F00:0248       	move.l a1,d0
               S01:00000294:  20 09
F00:0249       	move.l #copper_bitplane2,a0
               S01:00000296:  41 F9 00 00 00 F8 [R]
F00:0250       	move.w d0,6(a0)
               S01:0000029C:  31 40 00 06
F00:0251       	swap d0
               S01:000002A0:  48 40
F00:0252       	move.w d0,2(a0)
               S01:000002A2:  31 40 00 02
F00:0253       	add.l #$28,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000002A6:  06 B9 00 00 00 28 00 00 00 90 [R]
F00:0254       	; Poke command
F00:0255       	move.l #copper_mod_even,a0
               S01:000002B0:  41 F9 00 00 00 12 [R]
F00:0256       	move.w #$50,(a0)
               S01:000002B6:  30 BC 00 50
F00:0257       	; Poke command
F00:0258       	move.l #copper_mod_odd,a0
               S01:000002BA:  41 F9 00 00 00 16 [R]
F00:0259       	move.w #$50,(a0)
               S01:000002C0:  30 BC 00 50
F00:0260       edblock18
F00:0261       	cmp.w #$2,Graphics_bpl
               S01:000002C4:  0C 79 00 02 00 00 00 94 [R]
F00:0262       	bne edblock24
               S01:000002CC:  66 54
F00:0263       ctb22: ;Main true block ;keep 
F00:0264       	; setcopperlist32
F00:0265       	move.l Graphics_pa,a1
               S01:000002CE:  22 7A FD C0
F00:0266       	move.l a1,d0
               S01:000002D2:  20 09
F00:0267       	move.l #copper_bitplane0,a0
               S01:000002D4:  41 F9 00 00 00 E8 [R]
F00:0268       	move.w d0,6(a0)
               S01:000002DA:  31 40 00 06
F00:0269       	swap d0
               S01:000002DE:  48 40
F00:0270       	move.w d0,2(a0)
               S01:000002E0:  31 40 00 02
F00:0271       	add.l #$28,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000002E4:  06 B9 00 00 00 28 00 00 00 90 [R]
F00:0272       	; setcopperlist32
F00:0273       	move.l Graphics_pa,a1
               S01:000002EE:  22 7A FD A0
F00:0274       	move.l a1,d0
               S01:000002F2:  20 09
F00:0275       	move.l #copper_bitplane1,a0
               S01:000002F4:  41 F9 00 00 00 F0 [R]
F00:0276       	move.w d0,6(a0)
               S01:000002FA:  31 40 00 06
F00:0277       	swap d0
               S01:000002FE:  48 40
F00:0278       	move.w d0,2(a0)
               S01:00000300:  31 40 00 02
F00:0279       	add.l #$28,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000304:  06 B9 00 00 00 28 00 00 00 90 [R]
F00:0280       	; Poke command
F00:0281       	move.l #copper_mod_even,a0
               S01:0000030E:  41 F9 00 00 00 12 [R]
F00:0282       	move.w #$28,(a0)
               S01:00000314:  30 BC 00 28
F00:0283       	; Poke command
F00:0284       	move.l #copper_mod_odd,a0
               S01:00000318:  41 F9 00 00 00 16 [R]
F00:0285       	move.w #$28,(a0)
               S01:0000031E:  30 BC 00 28
F00:0286       edblock24
F00:0287       	cmp.w #$1,Graphics_bpl
               S01:00000322:  0C 79 00 01 00 00 00 94 [R]
F00:0288       	bne edblock30
               S01:0000032A:  66 2A
F00:0289       ctb28: ;Main true block ;keep 
F00:0290       	; setcopperlist32
F00:0291       	move.l Graphics_pa,a1
               S01:0000032C:  22 7A FD 62
F00:0292       	move.l a1,d0
               S01:00000330:  20 09
F00:0293       	move.l #copper_bitplane0,a0
               S01:00000332:  41 F9 00 00 00 E8 [R]
F00:0294       	move.w d0,6(a0)
               S01:00000338:  31 40 00 06
F00:0295       	swap d0
               S01:0000033C:  48 40
F00:0296       	move.w d0,2(a0)
               S01:0000033E:  31 40 00 02
F00:0297       	; Poke command
F00:0298       	move.l #copper_mod_even,a0
               S01:00000342:  41 F9 00 00 00 12 [R]
F00:0299       	move.w #$0,(a0)
               S01:00000348:  30 BC 00 00
F00:0300       	; Poke command
F00:0301       	move.l #copper_mod_odd,a0
               S01:0000034C:  41 F9 00 00 00 16 [R]
F00:0302       	move.w #$0,(a0)
               S01:00000352:  30 BC 00 00
F00:0303       edblock30
F00:0304       	rts
               S01:00000356:  4E 75
F00:0305       	 	CNOP 0,4
F00:0306       block1
F00:0307       	
F00:0308       ; // Some random image   	
F00:0309       ; // Set to default interleaved 4-bpl screen
F00:0310       	move.l #image,Graphics_pa ; Simple a:=b optimization 
               S01:00000358:  23 FC 00 00 00 00 00 00 00 90 [R]
F00:0311       	move.w #$4,Graphics_bpl ; Simple a:=b optimization 
               S01:00000362:  33 FC 00 04 00 00 00 94 [R]
F00:0312       	jsr Graphics_SetupDefaultScreen
               S01:0000036A:  61 00 FD 6C
F00:0313       	move.l #$10,d0
               S01:0000036E:  70 10
F00:0314       	move.l #image_palette,a0
               S01:00000370:  41 FA FD 42
F00:0315       	move.l #copper_palette,a1
               S01:00000374:  43 F9 00 00 00 68 [R]
F00:0316       setpalette33
F00:0317       	addq.l #2,a1
               S01:0000037A:  54 89
F00:0318       	move.w (a0)+,(a1)+
               S01:0000037C:  32 D8
F00:0319       	dbf d0,setpalette33
               S01:0000037E:  51 C8 FF FA
F00:0320       while34
F00:0321       loopstart38
F00:0322       	cmp.w #$0,mousereg
               S01:00000382:  4A 79 00 00 00 B2 [R]
F00:0323       	bne edblock37
               S01:00000388:  66 46
F00:0324       ctb35: ;Main true block ;keep 
F00:0325       	; Poke command
F00:0326       	move.l #$200,a1
               S01:0000038A:  32 7C 02 00
F00:0327       	move.w #$1,(a1)
               S01:0000038E:  32 BC 00 01
F00:0328       	; Peek command
F00:0329       	move.l #$BFE001,a1
               S01:00000392:  22 7C 00 BF E0 01
F00:0330       	move.b (a1),d0
               S01:00000398:  10 11
F00:0331       	; Store variable : mousereg
F00:0332       	move.w d0,mousereg
               S01:0000039A:  33 C0 00 00 00 B2 [R]
F00:0333       	move.w mousereg,d0
               S01:000003A0:  30 3A FD 10
F00:0334       	and.w #$40,d0 ; Optimization: simple A := A op Const MUL DIV SHR etc
               S01:000003A4:  C0 7C 00 40
F00:0335       	move.w d0,mousereg
               S01:000003A8:  33 C0 00 00 00 B2 [R]
F00:0336       	
F00:0337       ; // Wait for vertical blank
F00:0338       waitVB43
F00:0339       	move.l VPOSR,d0
               S01:000003AE:  20 39 00 DF F0 04
F00:0340       	and.l #$1ff00,d0
               S01:000003B4:  C0 BC 00 01 FF 00
F00:0341       	cmp.l #300<<8,d0
               S01:000003BA:  B0 BC 00 01 2C 00
F00:0342       	bne waitVB43
               S01:000003C0:  66 EC
F00:0343       	
F00:0344       ; // Apply copper list
F00:0345       	move.l #cop,a1
               S01:000003C2:  43 F9 00 00 00 00 [R]
F00:0346       	move.l a1,COP1LCH
               S01:000003C8:  23 C9 00 DF F0 80
F00:0347       	jmp while34
               S01:000003CE:  60 B2
F00:0348       edblock37
F00:0349       loopend39
F00:0350       	 	CNOP 0,4
F00:0351       	 	CNOP 0,4
F00:0352       ; exit gracefully - reverse everything done in init
F00:0353       	move.w #$7fff,DMACON
               S01:000003D0:  33 FC 7F FF 00 DF F0 96
F00:0354       	move.w	olddmareq,DMACON
               S01:000003D8:  33 FA 00 A6 00 DF F0 96
F00:0355       	move.w #$7fff,INTENA
               S01:000003E0:  33 FC 7F FF 00 DF F0 9A
F00:0356       	move.w	oldintena,INTENA
               S01:000003E8:  33 FA 00 9A 00 DF F0 9A
F00:0357       	move.w #$7fff,INTREQ
               S01:000003F0:  33 FC 7F FF 00 DF F0 9C
F00:0358       	move.w	oldintreq,INTREQ
               S01:000003F8:  33 FA 00 88 00 DF F0 9C
F00:0359       	move.w #$7fff,ADKCON
               S01:00000400:  33 FC 7F FF 00 DF F0 9E
F00:0360       	move.w	oldadkcon,ADKCON
               S01:00000408:  33 FA 00 7C 00 DF F0 9E
F00:0361       
F00:0362       	move.l	oldcopper,COP1LCH
               S01:00000410:  23 FA 00 62 00 DF F0 80
F00:0363       	move.l 	gfxbase,a6
               S01:00000418:  2C 7A 00 5E
F00:0364       	move.l 	oldview,a1
               S01:0000041C:  22 7A 00 52
F00:0365       	jsr -222(a6)	; LoadView
               S01:00000420:  4E AE FF 22
F00:0366       	jsr -270(a6)	; WaitTOF
               S01:00000424:  4E AE FE F2
F00:0367       	jsr -270(a6)	; WaitTOF
               S01:00000428:  4E AE FE F2
F00:0368       	move.l	$4,a6
               S01:0000042C:  2C 78 00 04
F00:0369       	jsr -138(a6)	; Permit
               S01:00000430:  4E AE FF 76
F00:0370       
F00:0371       	; end program
F00:0372       	movem.l (sp)+,d0-d7/a0-a6
               S01:00000434:  4C DF 7F FF
F00:0373       	rts
               S01:00000438:  4E 75
F00:0374       
F00:0375       
F00:0376       ;** PROCEDURES
F00:0377       ; d6 = src shift
F00:0378       ; d1 = dst x
F00:0379       ; d2 = dst y
F00:0380       ; d3 = modulo
F00:0381       ; a0 = source
F00:0382       ; a1 = dest
F00:0383       ; d4 = blitter size
F00:0384       ; d5 = bltmod
F00:0385       blitter:
F00:0386           add.l   d6,a0
               S01:0000043A:  D1 C6
F00:0387           mulu.w  d3,d2
               S01:0000043C:  C4 C3
F00:0388           add.l   d1,d2
               S01:0000043E:  D4 81
F00:0389           add.l   d2,a1
               S01:00000440:  D3 C2
F00:0390                               ; Leftshift 1, use channels A and D, copy A -> D
F00:0391       
F00:0392           move.l  #$ffffffff,BLTAFWM(a6) ; Set last word and first word mask BLTAFWM and BLTALWM
               S01:00000442:  2D 7C FF FF FF FF 00 44
F00:0393       .lp:
F00:0394       
F00:0395       .litwait: ; Wait for blitter to be done
F00:0396           btst    #14,DMACONR
               S01:0000044A:  08 39 00 0E 00 DF F0 02
F00:0397           bne.s   .litwait
               S01:00000452:  66 F6
F00:0398       
F00:0399           move.w  d0,BLTCON0(a6)  ; Set registers; BLTCON0
               S01:00000454:  3D 40 00 40
F00:0400           move.l  a0,BLTAPTH(a6) ; src 
               S01:00000458:  2D 48 00 50
F00:0401           move.l  a1,BLTBPTH(a6) ; BLT Dest PTR
               S01:0000045C:  2D 49 00 4C
F00:0402           move.l  a1,BLTCPTH(a6) ; BLT Dest PTR
               S01:00000460:  2D 49 00 48
F00:0403           move.l  a1,BLTDPTH(a6) ; BLT Dest PTR
               S01:00000464:  2D 49 00 54
F00:0404           move.w  d4,BLTSIZE(a6) ; BLTSIZE & Start blitter
               S01:00000468:  3D 44 00 58
F00:0405           rts
               S01:0000046C:  4E 75
F00:0406       
F00:0407       ; 1001
F00:0408       
F00:0409       
F00:0410       
F00:0411       
F00:0412       ; storage for 32-bit addresses and data
F00:0413       	CNOP 0,4
F00:0414       oldview:	dc.l 0
               S01:00000470:  00 00 00 00
F00:0415       oldcopper:	dc.l 0
               S01:00000474:  00 00 00 00
F00:0416       gfxbase:	dc.l 0
               S01:00000478:  00 00 00 00
F00:0417       frame:          dc.l 0
               S01:0000047C:  00 00 00 00
F00:0418       
F00:0419       ; storage for 16-bit data
F00:0420       	CNOP 0,4
F00:0421       olddmareq:	dc.w 0
               S01:00000480:  00 00
F00:0422       oldintreq:	dc.w 0
               S01:00000482:  00 00
F00:0423       oldintena:	dc.w 0
               S01:00000484:  00 00
F00:0424       oldadkcon:	dc.w 0
               S01:00000486:  00 00
F00:0425       
F00:0426       copper_index    dc.w 0
               S01:00000488:  00 00
F00:0427       	CNOP 0,4
F00:0428       gfxname: dc.b 'graphics.library',0
               S01:0000048C:  67 72 61 70 68 69 63 73 2E 6C 69 62 72 61 72 79
               S01:0000049C:  00
F00:0429       
F00:0430       
F00:0431       
F00:0432         section datachip,data_c
F00:0433       
F00:0434       Chip:
F00:0435       
F00:0436           even
F00:0437       cop:
F00:0438           dc.w    $008e
               S02:00000000:  00 8E
F00:0439       copper_diwstrt:
F00:0440           dc.w    $2c81,$0090
               S02:00000002:  2C 81
               S02:00000004:  00 90
F00:0441       copper_diwstop:
F00:0442           dc.w    $2cc1
               S02:00000006:  2C C1
F00:0443       
F00:0444           
F00:0445           dc.w    $0092
               S02:00000008:  00 92
F00:0446       ddfstrt:
F00:0447       ; 
F00:0448           dc.w    $0038,$0094
               S02:0000000A:  00 38
               S02:0000000C:  00 94
F00:0449       ddfstop:
F00:0450           dc.w    $00d0
               S02:0000000E:  00 D0
F00:0451           dc.w    $0108
               S02:00000010:  01 08
F00:0452       copper_mod_even:
F00:0453       
F00:0454       ;set bplmodulo here
F00:0455           dc.w    0,$010a
               S02:00000012:  00 00
               S02:00000014:  01 0A
F00:0456       copper_mod_odd:
F00:0457       ;set bplmodulo here
F00:0458           dc.w    0
               S02:00000016:  00 00
F00:0459       
F00:0460       
F00:0461       
F00:0462       
F00:0463           
F00:0464       copper_spritestruct0:
F00:0465           dc.w $120,0, $122,0
               S02:00000018:  01 20
               S02:0000001A:  00 00
               S02:0000001C:  01 22
               S02:0000001E:  00 00
F00:0466       copper_spritestruct1:
F00:0467           dc.w $124,0, $126,0
               S02:00000020:  01 24
               S02:00000022:  00 00
               S02:00000024:  01 26
               S02:00000026:  00 00
F00:0468       copper_spritestruct2:
F00:0469           dc.w $128,0, $12A,0
               S02:00000028:  01 28
               S02:0000002A:  00 00
               S02:0000002C:  01 2A
               S02:0000002E:  00 00
F00:0470       copper_spritestruct3:
F00:0471           dc.w $12C,0, $12E,0
               S02:00000030:  01 2C
               S02:00000032:  00 00
               S02:00000034:  01 2E
               S02:00000036:  00 00
F00:0472       copper_spritestruct4:
F00:0473           dc.w $130,0, $132,0
               S02:00000038:  01 30
               S02:0000003A:  00 00
               S02:0000003C:  01 32
               S02:0000003E:  00 00
F00:0474       copper_spritestruct5:
F00:0475           dc.w $134,0, $136,0
               S02:00000040:  01 34
               S02:00000042:  00 00
               S02:00000044:  01 36
               S02:00000046:  00 00
F00:0476       copper_spritestruct6:
F00:0477           dc.w $138,0, $13A,0
               S02:00000048:  01 38
               S02:0000004A:  00 00
               S02:0000004C:  01 3A
               S02:0000004E:  00 00
F00:0478       copper_spritestruct7:
F00:0479           dc.w $13C,0, $13E,0
               S02:00000050:  01 3C
               S02:00000052:  00 00
               S02:00000054:  01 3E
               S02:00000056:  00 00
F00:0480       
F00:0481       copper_spritedata0:
F00:0482           dc.w $144,0, $146,0
               S02:00000058:  01 44
               S02:0000005A:  00 00
               S02:0000005C:  01 46
               S02:0000005E:  00 00
F00:0483       copper_spritedata1:
F00:0484           dc.w $14C,0, $14E,0
               S02:00000060:  01 4C
               S02:00000062:  00 00
               S02:00000064:  01 4E
               S02:00000066:  00 00
F00:0485       
F00:0486       
F00:0487       copper_palette:
F00:0488           dc.w    $0180, $000
               S02:00000068:  01 80
               S02:0000006A:  00 00
F00:0489           dc.w    $0182, $fff
               S02:0000006C:  01 82
               S02:0000006E:  0F FF
F00:0490           dc.w    $0184, $236
               S02:00000070:  01 84
               S02:00000072:  02 36
F00:0491           dc.w    $0186, $ba7
               S02:00000074:  01 86
               S02:00000076:  0B A7
F00:0492           dc.w    $0188, $836
               S02:00000078:  01 88
               S02:0000007A:  08 36
F00:0493           dc.w    $018a, $485
               S02:0000007C:  01 8A
               S02:0000007E:  04 85
F00:0494           dc.w    $018c, $723
               S02:00000080:  01 8C
               S02:00000082:  07 23
F00:0495           dc.w    $018e, $6cb
               S02:00000084:  01 8E
               S02:00000086:  06 CB
F00:0496           dc.w    $0190, $246
               S02:00000088:  01 90
               S02:0000008A:  02 46
F00:0497           dc.w    $0192, $034
               S02:0000008C:  01 92
               S02:0000008E:  00 34
F00:0498           dc.w    $0194, $569
               S02:00000090:  01 94
               S02:00000092:  05 69
F00:0499           dc.w    $0196, $444
               S02:00000094:  01 96
               S02:00000096:  04 44
F00:0500           dc.w    $0198, $666
               S02:00000098:  01 98
               S02:0000009A:  06 66
F00:0501           dc.w    $019a, $8d9
               S02:0000009C:  01 9A
               S02:0000009E:  08 D9
F00:0502           dc.w    $019c, $b56
               S02:000000A0:  01 9C
               S02:000000A2:  0B 56
F00:0503           dc.w    $019e, $999
               S02:000000A4:  01 9E
               S02:000000A6:  09 99
F00:0504       
F00:0505           dc.w    $01A0, $000
               S02:000000A8:  01 A0
               S02:000000AA:  00 00
F00:0506           dc.w    $01A2, $fff
               S02:000000AC:  01 A2
               S02:000000AE:  0F FF
F00:0507           dc.w    $01A4, $236
               S02:000000B0:  01 A4
               S02:000000B2:  02 36
F00:0508           dc.w    $01A6, $ba7
               S02:000000B4:  01 A6
               S02:000000B6:  0B A7
F00:0509           dc.w    $01A8, $836
               S02:000000B8:  01 A8
               S02:000000BA:  08 36
F00:0510           dc.w    $01Aa, $485
               S02:000000BC:  01 AA
               S02:000000BE:  04 85
F00:0511           dc.w    $01Ac, $723
               S02:000000C0:  01 AC
               S02:000000C2:  07 23
F00:0512           dc.w    $01Ae, $6cb
               S02:000000C4:  01 AE
               S02:000000C6:  06 CB
F00:0513           dc.w    $01B0, $246
               S02:000000C8:  01 B0
               S02:000000CA:  02 46
F00:0514           dc.w    $01B2, $034
               S02:000000CC:  01 B2
               S02:000000CE:  00 34
F00:0515           dc.w    $01B4, $569
               S02:000000D0:  01 B4
               S02:000000D2:  05 69
F00:0516           dc.w    $01B6, $444
               S02:000000D4:  01 B6
               S02:000000D6:  04 44
F00:0517           dc.w    $01B8, $666
               S02:000000D8:  01 B8
               S02:000000DA:  06 66
F00:0518           dc.w    $01Ba, $8d9
               S02:000000DC:  01 BA
               S02:000000DE:  08 D9
F00:0519           dc.w    $01Bc, $b56
               S02:000000E0:  01 BC
               S02:000000E2:  0B 56
F00:0520           dc.w    $01Be, $999
               S02:000000E4:  01 BE
               S02:000000E6:  09 99
F00:0521       
F00:0522       
F00:0523       
F00:0524       
F00:0525       
F00:0526       copper_bitplane0:
F00:0527           dc.w    $e0,0
               S02:000000E8:  00 E0
               S02:000000EA:  00 00
F00:0528           dc.w    $e2,0
               S02:000000EC:  00 E2
               S02:000000EE:  00 00
F00:0529       copper_bitplane1:
F00:0530           dc.w    $e4,0
               S02:000000F0:  00 E4
               S02:000000F2:  00 00
F00:0531           dc.w    $e6,0
               S02:000000F4:  00 E6
               S02:000000F6:  00 00
F00:0532       copper_bitplane2:
F00:0533           dc.w    $e8,0
               S02:000000F8:  00 E8
               S02:000000FA:  00 00
F00:0534           dc.w    $ea,0
               S02:000000FC:  00 EA
               S02:000000FE:  00 00
F00:0535       copper_bitplane3:
F00:0536           dc.w    $ec,0
               S02:00000100:  00 EC
               S02:00000102:  00 00
F00:0537           dc.w    $ee,0
               S02:00000104:  00 EE
               S02:00000106:  00 00
F00:0538       copper_bitplane4:
F00:0539           dc.w    $f0,0
               S02:00000108:  00 F0
               S02:0000010A:  00 00
F00:0540           dc.w    $f2,0
               S02:0000010C:  00 F2
               S02:0000010E:  00 00
F00:0541       
F00:0542       
F00:0543       copbplcon1:
F00:0544           dc.l    $01020000
               S02:00000110:  01 02 00 00
F00:0545           dc.l    $2c01fffe
               S02:00000114:  2C 01 FF FE
F00:0546       copbplcon0
F00:0547       ; Set bitplane  B
F00:0548          dc.w    $0100
               S02:00000118:  01 00
F00:0549       copper_resolution
F00:0550          dc.w     $4200 
               S02:0000011A:  42 00
F00:0551       
F00:0552       copper_custom:
F00:0553           dc.w	$ffdf, $fffe
               S02:0000011C:  FF DF
               S02:0000011E:  FF FE
F00:0554           dc.w	$2401, $fffe
               S02:00000120:  24 01
               S02:00000122:  FF FE
F00:0555           dc.w	$0100, $0200
               S02:00000124:  01 00
               S02:00000126:  02 00
F00:0556           dc.l    $fffffffe
               S02:00000128:  FF FF FF FE
F00:0557       
F00:0558       ;    dc.l    $2d01fffe, $01800000
F00:0559        ;   dc.l    $8001fffe, $01002200
F00:0560         ;  dc.l    $9001fffe, $01001200
F00:0561       ;    dc.l    $ffdffffe
F00:0562        ;   dc.l    $0d01fffe, $01000200
F00:0563        blk.l   1024
F00:0564           dc.l    $fffffffe
               S02:0000112C:  FF FF FF FE
F00:0565       
F00:0566       
F00:0567       spritepointer:
F00:0568           blk.b    256
F00:0569       
F00:0570       
F00:0571       
F00:0572       
F00:0573       
F00:0574       
F00:0575       	Section ChipRAM,Data_c
F00:0576        	CNOP 0,4
F00:0577       	 	CNOP 0,4
F00:0578       image
F00:0579       	incbin "C:/Users/uersu/Documents/GitData/compofiller/mousetest///images/trse.bin"
               S03:00000000:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
               S03:00000010:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
F00:0580       	 	CNOP 0,4
F00:0581       


Sections:
S01  CODE
S02  datachip
S03  ChipRAM


Sources:
F00  C:\Users\uersu\Documents\GitData\compofiller\mousetest\\main.asm


Symbols:
spritepointer LAB (0x1130) UNUSED sec=datachip 
copper_custom LAB (0x11c) UNUSED sec=datachip 
copbplcon0 LAB (0x118) UNUSED sec=datachip 
copbplcon1 LAB (0x110) UNUSED sec=datachip 
copper_spritedata1 LAB (0x60) UNUSED sec=datachip 
copper_spritedata0 LAB (0x58) UNUSED sec=datachip 
copper_spritestruct7 LAB (0x50) UNUSED sec=datachip 
copper_spritestruct6 LAB (0x48) UNUSED sec=datachip 
copper_spritestruct5 LAB (0x40) UNUSED sec=datachip 
copper_spritestruct4 LAB (0x38) UNUSED sec=datachip 
copper_spritestruct3 LAB (0x30) UNUSED sec=datachip 
copper_spritestruct2 LAB (0x28) UNUSED sec=datachip 
copper_spritestruct1 LAB (0x20) UNUSED sec=datachip 
copper_spritestruct0 LAB (0x18) UNUSED sec=datachip 
ddfstop LAB (0xe) UNUSED sec=datachip 
ddfstrt LAB (0xa) UNUSED sec=datachip 
copper_diwstop LAB (0x6) UNUSED sec=datachip 
copper_diwstrt LAB (0x2) UNUSED sec=datachip 
Chip LAB (0x0) UNUSED sec=datachip 
copper_index LAB (0x488) UNUSED sec=CODE 
frame LAB (0x47c) UNUSED sec=CODE 
 blitter .litwait LAB (0x44a) sec=CODE 
 blitter .lp LAB (0x44a) UNUSED sec=CODE 
blitter LAB (0x43a) UNUSED sec=CODE 
loopend39 LAB (0x3d0) UNUSED sec=CODE 
waitVB43 LAB (0x3ae) sec=CODE 
ctb35 LAB (0x38a) UNUSED sec=CODE 
edblock37 LAB (0x3d0) sec=CODE 
loopstart38 LAB (0x382) UNUSED sec=CODE 
while34 LAB (0x382) sec=CODE 
setpalette33 LAB (0x37a) sec=CODE 
copper_palette LAB (0x68) REF sec=datachip 
image LAB (0x0) REF sec=ChipRAM 
ctb28 LAB (0x32c) UNUSED sec=CODE 
edblock30 LAB (0x356) sec=CODE 
ctb22 LAB (0x2ce) UNUSED sec=CODE 
edblock24 LAB (0x322) sec=CODE 
ctb16 LAB (0x250) UNUSED sec=CODE 
edblock18 LAB (0x2c4) sec=CODE 
ctb10 LAB (0x1bc) UNUSED sec=CODE 
edblock12 LAB (0x246) sec=CODE 
copper_mod_odd LAB (0x16) REF sec=datachip 
copper_mod_even LAB (0x12) REF sec=datachip 
copper_bitplane4 LAB (0x108) REF sec=datachip 
copper_bitplane3 LAB (0x100) REF sec=datachip 
copper_bitplane2 LAB (0xf8) REF sec=datachip 
copper_bitplane1 LAB (0xf0) REF sec=datachip 
copper_bitplane0 LAB (0xe8) REF sec=datachip 
ctb4 LAB (0x106) UNUSED sec=CODE 
edblock6 LAB (0x1b0) sec=CODE 
copper_resolution LAB (0x11a) REF sec=datachip 
Graphics_SetupDefaultScreen LAB (0xd8) sec=CODE 
block2 LAB (0xd8) sec=CODE 
image_palette LAB (0xb4) sec=CODE 
mousereg LAB (0xb2) REF sec=CODE 
Graphics_bytefill3 LAB (0xaa) UNUSED sec=CODE 
Graphics_bytefill2 LAB (0xa0) UNUSED sec=CODE 
Graphics_bytefill1 LAB (0x98) UNUSED sec=CODE 
Graphics_j LAB (0x96) REF sec=CODE 
Graphics_bpl LAB (0x94) REF sec=CODE 
Graphics_pa LAB (0x90) REF sec=CODE 
block1 LAB (0x358) sec=CODE 
cop LAB (0x0) REF sec=datachip 
oldcopper LAB (0x474) REF sec=CODE 
oldview LAB (0x470) REF sec=CODE 
gfxbase LAB (0x478) REF sec=CODE 
gfxname LAB (0x48c) sec=CODE 
oldadkcon LAB (0x486) REF sec=CODE 
oldintreq LAB (0x482) REF sec=CODE 
oldintena LAB (0x484) REF sec=CODE 
olddmareq LAB (0x480) REF sec=CODE 
init LAB (0x0) UNUSED sec=CODE 
INTREQ2 EXPR(156=0x9c) UNUSED EQU 
INTENA2 EXPR(154=0x9a) UNUSED EQU 
ADKCON2 EXPR(158=0x9e) UNUSED EQU 
DMACON2 EXPR(150=0x96) UNUSED EQU 
INTREQ EXPR(14676124=0xdff09c) EQU 
INTENA EXPR(14676122=0xdff09a) EQU 
ADKCON EXPR(14676126=0xdff09e) EQU 
DMACON EXPR(14676118=0xdff096) EQU 
INTREQR2 EXPR(30=0x1e) UNUSED EQU 
INTENAR2 EXPR(28=0x1c) UNUSED EQU 
ADKCONR2 EXPR(16=0x10) UNUSED EQU 
DMACONR2 EXPR(2=0x2) UNUSED EQU 
COP1LCH2 EXPR(128=0x80) UNUSED EQU 
VPOSR2 EXPR(4=0x4) UNUSED EQU 
CIAAPRA2 EXPR(1=0x1) UNUSED EQU 
INTREQR EXPR(14675998=0xdff01e) EQU 
INTENAR EXPR(14675996=0xdff01c) EQU 
ADKCONR EXPR(14675984=0xdff010) EQU 
DMACONR EXPR(14675970=0xdff002) EQU 
COP1LCH EXPR(14676096=0xdff080) EQU 
VPOSR EXPR(14675972=0xdff004) EQU 
CIAAPRA EXPR(12574721=0xbfe001) UNUSED EQU 
BLTBDAT EXPR(114=0x72) UNUSED EQU 
BLTADAT EXPR(116=0x74) UNUSED EQU 
BLTSIZE EXPR(88=0x58) EQU 
BLTDPTH EXPR(84=0x54) EQU 
BLTCPTH EXPR(72=0x48) EQU 
BLTBPTH EXPR(76=0x4c) EQU 
BLTAPTL EXPR(82=0x52) UNUSED EQU 
BLTAPTH EXPR(80=0x50) EQU 
VHPOSR EXPR(6=0x6) UNUSED EQU 
BLTCON1 EXPR(66=0x42) UNUSED EQU 
BLTCON0 EXPR(64=0x40) EQU 
BLTAFWM EXPR(68=0x44) EQU 
BLTDMOD EXPR(102=0x66) UNUSED EQU 
BLTCMOD EXPR(96=0x60) UNUSED EQU 
BLTBMOD EXPR(98=0x62) UNUSED EQU 
BLTAMOD EXPR(100=0x64) UNUSED EQU 
BPLCON2 EXPR(260=0x104) UNUSED EQU 
BPLCON1 EXPR(258=0x102) UNUSED EQU 
BPLCON0 EXPR(256=0x100) UNUSED EQU 
__LINE__ EXPR(581=0x245) INTERNAL 
__FO EXPR(0=0x0) INTERNAL 
__RS EXPR(0=0x0) INTERNAL 
REPTN EXPR(-1=0xffffffff) INTERNAL 
__VASM EXPR(1=0x1) INTERNAL 

There have been no errors.

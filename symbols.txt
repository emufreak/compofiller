F00:0001       BPLCON0=                    $100
F00:0002       BPLCON1=                    $102
F00:0003       BPLCON2=                    $104
F00:0004       BLTAMOD:                equ $64
F00:0005       BLTBMOD:                equ $62
F00:0006       BLTCMOD:                equ $60
F00:0007       BLTDMOD:                equ $66
F00:0008       BLTAFWM:                equ $44
F00:0009       BLTCON0:                equ $40
F00:0010       BLTCON1:                equ $42
F00:0011       VHPOSR:                 equ 6
F00:0012       BLTAPTH:                equ $50
F00:0013       BLTAPTL:                equ $52
F00:0014       BLTBPTH:                equ $4c
F00:0015       BLTCPTH:                equ $48
F00:0016       BLTDPTH:                equ $54
F00:0017       BLTSIZE:                equ $58
F00:0018       BLTADAT:                equ $74
F00:0019       BLTBDAT:                equ $72
F00:0020       CIAAPRA         EQU             $bfe001
F00:0021       VPOSR           EQU             $dff004
F00:0022       COP1LCH         EQU             $dff080
F00:0023       DMACONR		EQU		$dff002
F00:0024       ADKCONR		EQU		$dff010
F00:0025       INTENAR		EQU		$dff01c
F00:0026       INTREQR		EQU		$dff01e
F00:0027       CIAAPRA2         EQU             $001
F00:0028       VPOSR2           EQU             $004
F00:0029       COP1LCH2         EQU             $080
F00:0030       DMACONR2		EQU		$002
F00:0031       ADKCONR2		EQU		$010
F00:0032       INTENAR2		EQU		$01c
F00:0033       INTREQR2		EQU		$01e
F00:0034       DMACON		EQU		$dff096
F00:0035       ADKCON		EQU		$dff09e
F00:0036       INTENA		EQU		$dff09a
F00:0037       INTREQ		EQU		$dff09c
F00:0038       DMACON2		EQU		$096
F00:0039       ADKCON2		EQU		$09e
F00:0040       INTENA2		EQU		$09a
F00:0041       INTREQ2		EQU		$09c
F00:0042       init:
F00:0043       	; store data in hardwareregisters ORed with $8000
F00:0044               ;(bit 15 is a write-set bit when values are written back into the system)
F00:0045       ;Stack the registers
F00:0046       	movem.l d0-d7/a0-a6,-(sp)
               S01:00000000:  48 E7 FF FE
F00:0047       	move.w	DMACONR,d0
               S01:00000004:  30 39 00 DF F0 02
F00:0048       	or.w #$8000,d0
               S01:0000000A:  80 7C 80 00
F00:0049       	move.w d0,olddmareq
               S01:0000000E:  33 C0 00 03 41 18 [R]
F00:0050       	move.w	INTENAR,d0
               S01:00000014:  30 39 00 DF F0 1C
F00:0051       	or.w #$8000,d0
               S01:0000001A:  80 7C 80 00
F00:0052       	move.w d0,oldintena
               S01:0000001E:  33 C0 00 03 41 1C [R]
F00:0053       	move.w	INTREQR,d0
               S01:00000024:  30 39 00 DF F0 1E
F00:0054       	or.w #$8000,d0
               S01:0000002A:  80 7C 80 00
F00:0055       	move.w d0,oldintreq
               S01:0000002E:  33 C0 00 03 41 1A [R]
F00:0056       ;        move.w  #$7fff,INTENA
F00:0057               move.w	ADKCONR,d0;
               S01:00000034:  30 39 00 DF F0 10
F00:0058       	or.w #$8000,d0
               S01:0000003A:  80 7C 80 00
F00:0059       	move.w d0,oldadkcon
               S01:0000003E:  33 C0 00 03 41 1E [R]
F00:0060       	; base library address in $4
F00:0061       	move.l	$4,a6
               S01:00000044:  2C 78 00 04
F00:0062       	move.l	#gfxname,a1
               S01:00000048:  43 F9 00 03 41 24 [R]
F00:0063       	moveq	#0,d0 ; whatever
               S01:0000004E:  70 00
F00:0064       	jsr	-552(a6) 
               S01:00000050:  4E AE FD D8
F00:0065       	move.l	d0,gfxbase
               S01:00000054:  23 C0 00 03 41 10 [R]
F00:0066       	move.l 	d0,a6
               S01:0000005A:  2C 40
F00:0067       	move.l 	34(a6),oldview
               S01:0000005C:  23 EE 00 22 00 03 41 08 [R]
F00:0068       	move.l 	38(a6),oldcopper
               S01:00000064:  23 EE 00 26 00 03 41 0C [R]
F00:0069       	move.l #0,a1
               S01:0000006C:  93 C9
F00:0070       	jsr -222(a6)	; LoadView
               S01:0000006E:  4E AE FF 22
F00:0071       	jsr -270(a6)	; WaitTOF
               S01:00000072:  4E AE FE F2
F00:0072       	jsr -270(a6)	; WaitTOF
               S01:00000076:  4E AE FE F2
F00:0073       	move.l	$4,a6
               S01:0000007A:  2C 78 00 04
F00:0074       	jsr -132(a6)	; Forbid
               S01:0000007E:  4E AE FF 7C
F00:0075               move.l #cop,a0
               S01:00000082:  41 F9 00 00 00 00 [R]
F00:0076               move.l a0,COP1LCH
               S01:00000088:  23 C8 00 DF F0 80
F00:0077       	jmp block1
               S01:0000008E:  4E F9 00 03 3C F8 [R]
F00:0078       Graphics_pa dc.l 0
               S01:00000094:  00 00 00 00
F00:0079       Graphics_bpl	dc.w	0
               S01:00000098:  00 00
F00:0080       Graphics_j	dc.w	0
               S01:0000009A:  00 00
F00:0081       Graphics_bytefill1	dc.b $ff, $7f, $3f, $1f, $f, $7, $3, $1
               S01:0000009C:  FF
               S01:0000009D:  7F
               S01:0000009E:  3F
               S01:0000009F:  1F
               S01:000000A0:  0F
               S01:000000A1:  07
               S01:000000A2:  03
               S01:000000A3:  01
F00:0082       Graphics_bytefill2	dc.b $0, $80, $c0, $e0, $f0, $f8, $fc, $fe
               S01:000000A4:  00
               S01:000000A5:  80
               S01:000000A6:  C0
               S01:000000A7:  E0
               S01:000000A8:  F0
               S01:000000A9:  F8
               S01:000000AA:  FC
               S01:000000AB:  FE
F00:0083       	dc.b $ff, $ff
               S01:000000AC:  FF
               S01:000000AD:  FF
F00:0084       Graphics_bytefill3	dc.b $fe, $fc, $f8, $f0, $e0, $c0, $80, $0
               S01:000000AE:  FE
               S01:000000AF:  FC
               S01:000000B0:  F8
               S01:000000B1:  F0
               S01:000000B2:  E0
               S01:000000B3:  C0
               S01:000000B4:  80
               S01:000000B5:  00
F00:0085       c2p1x1_5_c5_030_tempbuf	blk.b	 40960
F00:0086       curBuf	dc.w	$00
               S01:0000A0B6:  00 00
F00:0087       isDone	dc.w	$00
               S01:0000A0B8:  00 00
F00:0088       colorcycled	dc.w	$00
               S01:0000A0BA:  00 00
F00:0089       curcopperpos	dc.l	$00
               S01:0000A0BC:  00 00 00 00
F00:0090       lightypos	dc.w	$3001
               S01:0000A0C0:  30 01
F00:0091       screenOffset	dc.l	$2800
               S01:0000A0C2:  00 00 28 00
F00:0092       foamCounter	dc.w	$00
               S01:0000A0C6:  00 00
F00:0093       eff0Counter	dc.w	$00
               S01:0000A0C8:  00 00
F00:0094       yOffset	dc.w	$8b
               S01:0000A0CA:  00 8B
F00:0095       	 	CNOP 0,4
F00:0096       imagechunky
F00:0097       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/cupempty.CHK"
               S01:0000A0CC:  1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B
               S01:0000A0DC:  1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B
F00:0098       	 	CNOP 0,4
F00:0099       	 	CNOP 0,4
F00:0100       image_palette
F00:0101       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/cupempty.COP"
               S01:000320CC:  01 80 00 00 01 82 08 52 01 84 0C 73 01 86 0E B8
               S01:000320DC:  01 88 0F DA 01 8A 0E DC 01 8C 0B A8 01 8E 0C 63
F00:0102       	 	CNOP 0,4
F00:0103       	 	CNOP 0,4
F00:0104       image_palette_cycled
F00:0105       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/cupemptycycle.COP"
               S01:0003214C:  01 80 00 00 01 82 0C 94 01 84 0F B5 01 86 0F EA
               S01:0003215C:  01 88 0F FC 01 8A 0F FE 01 8C 0F EA 01 8E 0C 63
F00:0106       	 	CNOP 0,4
F00:0107       screen	dc.l	0
               S01:000321CC:  00 00 00 00
F00:0108       offscreen	dc.l	0
               S01:000321D0:  00 00 00 00
F00:0109       i	dc.w	$00
               S01:000321D4:  00 00
F00:0110       bltsize	dc.w	$00
               S01:000321D6:  00 00
F00:0111       musicPos	dc.w	$00
               S01:000321D8:  00 00
F00:0112       current	dc.w	$00
               S01:000321DA:  00 00
F00:0113       beerinput	dc.w	$00
               S01:000321DC:  00 00
F00:0114       curbplmod	dc.w	$ffd8
               S01:000321DE:  FF D8
F00:0115       istart	dc.w	$82
               S01:000321E0:  00 82
F00:0116       effectNumber	dc.w	$01
               S01:000321E2:  00 01
F00:0117       imagemask	dc.l	0
               S01:000321E4:  00 00 00 00
F00:0118       srcimage	dc.l	0
               S01:000321E8:  00 00 00 00
F00:0119       sine4Copper	dc.w $182, $188, $18e, $195, $19b, $1a1, $1a7, $1ad
               S01:000321EC:  01 82
               S01:000321EE:  01 88
               S01:000321F0:  01 8E
               S01:000321F2:  01 95
               S01:000321F4:  01 9B
               S01:000321F6:  01 A1
               S01:000321F8:  01 A7
               S01:000321FA:  01 AD
F00:0120       	dc.w $1b3, $1b9, $1bf, $1c5, $1ca, $1cf, $1d4, $1d9
               S01:000321FC:  01 B3
               S01:000321FE:  01 B9
               S01:00032200:  01 BF
               S01:00032202:  01 C5
               S01:00032204:  01 CA
               S01:00032206:  01 CF
               S01:00032208:  01 D4
               S01:0003220A:  01 D9
F00:0121       	dc.w $1de, $1e2, $1e6, $1ea, $1ee, $1f1, $1f5, $1f7
               S01:0003220C:  01 DE
               S01:0003220E:  01 E2
               S01:00032210:  01 E6
               S01:00032212:  01 EA
               S01:00032214:  01 EE
               S01:00032216:  01 F1
               S01:00032218:  01 F5
               S01:0003221A:  01 F7
F00:0122       	dc.w $1fa, $1fc, $1fe, $200, $202, $203, $203, $204
               S01:0003221C:  01 FA
               S01:0003221E:  01 FC
               S01:00032220:  01 FE
               S01:00032222:  02 00
               S01:00032224:  02 02
               S01:00032226:  02 03
               S01:00032228:  02 03
               S01:0003222A:  02 04
F00:0123       	dc.w $204, $204, $203, $203, $202, $200, $1fe, $1fc
               S01:0003222C:  02 04
               S01:0003222E:  02 04
               S01:00032230:  02 03
               S01:00032232:  02 03
               S01:00032234:  02 02
               S01:00032236:  02 00
               S01:00032238:  01 FE
               S01:0003223A:  01 FC
F00:0124       	dc.w $1fa, $1f8, $1f5, $1f2, $1ee, $1ea, $1e7, $1e2
               S01:0003223C:  01 FA
               S01:0003223E:  01 F8
               S01:00032240:  01 F5
               S01:00032242:  01 F2
               S01:00032244:  01 EE
               S01:00032246:  01 EA
               S01:00032248:  01 E7
               S01:0003224A:  01 E2
F00:0125       	dc.w $1de, $1d9, $1d4, $1cf, $1ca, $1c5, $1bf, $1b9
               S01:0003224C:  01 DE
               S01:0003224E:  01 D9
               S01:00032250:  01 D4
               S01:00032252:  01 CF
               S01:00032254:  01 CA
               S01:00032256:  01 C5
               S01:00032258:  01 BF
               S01:0003225A:  01 B9
F00:0126       	dc.w $1b4, $1ae, $1a8, $1a1, $19b, $195, $18e, $188
               S01:0003225C:  01 B4
               S01:0003225E:  01 AE
               S01:00032260:  01 A8
               S01:00032262:  01 A1
               S01:00032264:  01 9B
               S01:00032266:  01 95
               S01:00032268:  01 8E
               S01:0003226A:  01 88
F00:0127       	dc.w $182, $17b, $175, $16f, $168, $162, $15c, $156
               S01:0003226C:  01 82
               S01:0003226E:  01 7B
               S01:00032270:  01 75
               S01:00032272:  01 6F
               S01:00032274:  01 68
               S01:00032276:  01 62
               S01:00032278:  01 5C
               S01:0003227A:  01 56
F00:0128       	dc.w $150, $14a, $144, $13f, $139, $134, $12f, $12a
               S01:0003227C:  01 50
               S01:0003227E:  01 4A
               S01:00032280:  01 44
               S01:00032282:  01 3F
               S01:00032284:  01 39
               S01:00032286:  01 34
               S01:00032288:  01 2F
               S01:0003228A:  01 2A
F00:0129       	dc.w $125, $121, $11d, $119, $115, $112, $10e, $10c
               S01:0003228C:  01 25
               S01:0003228E:  01 21
               S01:00032290:  01 1D
               S01:00032292:  01 19
               S01:00032294:  01 15
               S01:00032296:  01 12
               S01:00032298:  01 0E
               S01:0003229A:  01 0C
F00:0130       	dc.w $109, $107, $105, $103, $102, $100, $100, $ff
               S01:0003229C:  01 09
               S01:0003229E:  01 07
               S01:000322A0:  01 05
               S01:000322A2:  01 03
               S01:000322A4:  01 02
               S01:000322A6:  01 00
               S01:000322A8:  01 00
               S01:000322AA:  00 FF
F00:0131       	dc.w $ff, $ff, $100, $100, $101, $103, $104, $106
               S01:000322AC:  00 FF
               S01:000322AE:  00 FF
               S01:000322B0:  01 00
               S01:000322B2:  01 00
               S01:000322B4:  01 01
               S01:000322B6:  01 03
               S01:000322B8:  01 04
               S01:000322BA:  01 06
F00:0132       	dc.w $109, $10b, $10e, $111, $115, $118, $11c, $121
               S01:000322BC:  01 09
               S01:000322BE:  01 0B
               S01:000322C0:  01 0E
               S01:000322C2:  01 11
               S01:000322C4:  01 15
               S01:000322C6:  01 18
               S01:000322C8:  01 1C
               S01:000322CA:  01 21
F00:0133       	dc.w $125, $12a, $12e, $133, $139, $13e, $144, $149
               S01:000322CC:  01 25
               S01:000322CE:  01 2A
               S01:000322D0:  01 2E
               S01:000322D2:  01 33
               S01:000322D4:  01 39
               S01:000322D6:  01 3E
               S01:000322D8:  01 44
               S01:000322DA:  01 49
F00:0134       	dc.w $14f, $155, $15b, $161, $168, $16e, $174, $17b
               S01:000322DC:  01 4F
               S01:000322DE:  01 55
               S01:000322E0:  01 5B
               S01:000322E2:  01 61
               S01:000322E4:  01 68
               S01:000322E6:  01 6E
               S01:000322E8:  01 74
               S01:000322EA:  01 7B
F00:0135       	dc.w $181, $187, $18e, $194, $19b, $1a1, $1a7, $1ad
               S01:000322EC:  01 81
               S01:000322EE:  01 87
               S01:000322F0:  01 8E
               S01:000322F2:  01 94
               S01:000322F4:  01 9B
               S01:000322F6:  01 A1
               S01:000322F8:  01 A7
               S01:000322FA:  01 AD
F00:0136       	dc.w $1b3, $1b9, $1bf, $1c4, $1ca, $1cf, $1d4, $1d9
               S01:000322FC:  01 B3
               S01:000322FE:  01 B9
               S01:00032300:  01 BF
               S01:00032302:  01 C4
               S01:00032304:  01 CA
               S01:00032306:  01 CF
               S01:00032308:  01 D4
               S01:0003230A:  01 D9
F00:0137       	dc.w $1dd, $1e2, $1e6, $1ea, $1ee, $1f1, $1f4, $1f7
               S01:0003230C:  01 DD
               S01:0003230E:  01 E2
               S01:00032310:  01 E6
               S01:00032312:  01 EA
               S01:00032314:  01 EE
               S01:00032316:  01 F1
               S01:00032318:  01 F4
               S01:0003231A:  01 F7
F00:0138       	dc.w $1fa, $1fc, $1fe, $200, $201, $203, $203, $204
               S01:0003231C:  01 FA
               S01:0003231E:  01 FC
               S01:00032320:  01 FE
               S01:00032322:  02 00
               S01:00032324:  02 01
               S01:00032326:  02 03
               S01:00032328:  02 03
               S01:0003232A:  02 04
F00:0139       	dc.w $204, $204, $203, $203, $202, $200, $1ff, $1fd
               S01:0003232C:  02 04
               S01:0003232E:  02 04
               S01:00032330:  02 03
               S01:00032332:  02 03
               S01:00032334:  02 02
               S01:00032336:  02 00
               S01:00032338:  01 FF
               S01:0003233A:  01 FD
F00:0140       	dc.w $1fa, $1f8, $1f5, $1f2, $1ee, $1eb, $1e7, $1e3
               S01:0003233C:  01 FA
               S01:0003233E:  01 F8
               S01:00032340:  01 F5
               S01:00032342:  01 F2
               S01:00032344:  01 EE
               S01:00032346:  01 EB
               S01:00032348:  01 E7
               S01:0003234A:  01 E3
F00:0141       	dc.w $1de, $1da, $1d5, $1d0, $1cb, $1c5, $1c0, $1ba
               S01:0003234C:  01 DE
               S01:0003234E:  01 DA
               S01:00032350:  01 D5
               S01:00032352:  01 D0
               S01:00032354:  01 CB
               S01:00032356:  01 C5
               S01:00032358:  01 C0
               S01:0003235A:  01 BA
F00:0142       	dc.w $1b4, $1ae, $1a8, $1a2, $19c, $195, $18f, $189
               S01:0003235C:  01 B4
               S01:0003235E:  01 AE
               S01:00032360:  01 A8
               S01:00032362:  01 A2
               S01:00032364:  01 9C
               S01:00032366:  01 95
               S01:00032368:  01 8F
               S01:0003236A:  01 89
F00:0143       	dc.w $182, $17c, $175, $16f, $169, $162, $15c, $156
               S01:0003236C:  01 82
               S01:0003236E:  01 7C
               S01:00032370:  01 75
               S01:00032372:  01 6F
               S01:00032374:  01 69
               S01:00032376:  01 62
               S01:00032378:  01 5C
               S01:0003237A:  01 56
F00:0144       	dc.w $150, $14a, $145, $13f, $13a, $134, $12f, $12a
               S01:0003237C:  01 50
               S01:0003237E:  01 4A
               S01:00032380:  01 45
               S01:00032382:  01 3F
               S01:00032384:  01 3A
               S01:00032386:  01 34
               S01:00032388:  01 2F
               S01:0003238A:  01 2A
F00:0145       	dc.w $126, $121, $11d, $119, $115, $112, $10f, $10c
               S01:0003238C:  01 26
               S01:0003238E:  01 21
               S01:00032390:  01 1D
               S01:00032392:  01 19
               S01:00032394:  01 15
               S01:00032396:  01 12
               S01:00032398:  01 0F
               S01:0003239A:  01 0C
F00:0146       	dc.w $109, $107, $105, $103, $102, $100, $100, $ff
               S01:0003239C:  01 09
               S01:0003239E:  01 07
               S01:000323A0:  01 05
               S01:000323A2:  01 03
               S01:000323A4:  01 02
               S01:000323A6:  01 00
               S01:000323A8:  01 00
               S01:000323AA:  00 FF
F00:0147       	dc.w $ff, $ff, $ff, $100, $101, $103, $104, $106
               S01:000323AC:  00 FF
               S01:000323AE:  00 FF
               S01:000323B0:  00 FF
               S01:000323B2:  01 00
               S01:000323B4:  01 01
               S01:000323B6:  01 03
               S01:000323B8:  01 04
               S01:000323BA:  01 06
F00:0148       	dc.w $109, $10b, $10e, $111, $115, $118, $11c, $120
               S01:000323BC:  01 09
               S01:000323BE:  01 0B
               S01:000323C0:  01 0E
               S01:000323C2:  01 11
               S01:000323C4:  01 15
               S01:000323C6:  01 18
               S01:000323C8:  01 1C
               S01:000323CA:  01 20
F00:0149       	dc.w $125, $129, $12e, $133, $138, $13e, $143, $149
               S01:000323CC:  01 25
               S01:000323CE:  01 29
               S01:000323D0:  01 2E
               S01:000323D2:  01 33
               S01:000323D4:  01 38
               S01:000323D6:  01 3E
               S01:000323D8:  01 43
               S01:000323DA:  01 49
F00:0150       	dc.w $14f, $155, $15b, $161, $167, $16e, $174, $17a
               S01:000323DC:  01 4F
               S01:000323DE:  01 55
               S01:000323E0:  01 5B
               S01:000323E2:  01 61
               S01:000323E4:  01 67
               S01:000323E6:  01 6E
               S01:000323E8:  01 74
               S01:000323EA:  01 7A
F00:0151       sine4CopperAdd	dc.w $0, $0, $1, $1, $2, $3, $3, $4
               S01:000323EC:  00 00
               S01:000323EE:  00 00
               S01:000323F0:  00 01
               S01:000323F2:  00 01
               S01:000323F4:  00 02
               S01:000323F6:  00 03
               S01:000323F8:  00 03
               S01:000323FA:  00 04
F00:0152       	dc.w $4, $5, $6, $6, $7, $7, $8, $8
               S01:000323FC:  00 04
               S01:000323FE:  00 05
               S01:00032400:  00 06
               S01:00032402:  00 06
               S01:00032404:  00 07
               S01:00032406:  00 07
               S01:00032408:  00 08
               S01:0003240A:  00 08
F00:0153       	dc.w $9, $9, $a, $a, $a, $b, $b, $b
               S01:0003240C:  00 09
               S01:0003240E:  00 09
               S01:00032410:  00 0A
               S01:00032412:  00 0A
               S01:00032414:  00 0A
               S01:00032416:  00 0B
               S01:00032418:  00 0B
               S01:0003241A:  00 0B
F00:0154       	dc.w $c, $c, $c, $c, $c, $c, $c, $d
               S01:0003241C:  00 0C
               S01:0003241E:  00 0C
               S01:00032420:  00 0C
               S01:00032422:  00 0C
               S01:00032424:  00 0C
               S01:00032426:  00 0C
               S01:00032428:  00 0C
               S01:0003242A:  00 0D
F00:0155       	dc.w $d, $d, $c, $c, $c, $c, $c, $c
               S01:0003242C:  00 0D
               S01:0003242E:  00 0D
               S01:00032430:  00 0C
               S01:00032432:  00 0C
               S01:00032434:  00 0C
               S01:00032436:  00 0C
               S01:00032438:  00 0C
               S01:0003243A:  00 0C
F00:0156       	dc.w $c, $b, $b, $b, $a, $a, $a, $9
               S01:0003243C:  00 0C
               S01:0003243E:  00 0B
               S01:00032440:  00 0B
               S01:00032442:  00 0B
               S01:00032444:  00 0A
               S01:00032446:  00 0A
               S01:00032448:  00 0A
               S01:0003244A:  00 09
F00:0157       	dc.w $9, $8, $8, $7, $7, $6, $6, $5
               S01:0003244C:  00 09
               S01:0003244E:  00 08
               S01:00032450:  00 08
               S01:00032452:  00 07
               S01:00032454:  00 07
               S01:00032456:  00 06
               S01:00032458:  00 06
               S01:0003245A:  00 05
F00:0158       	dc.w $5, $4, $3, $3, $2, $1, $1, $0
               S01:0003245C:  00 05
               S01:0003245E:  00 04
               S01:00032460:  00 03
               S01:00032462:  00 03
               S01:00032464:  00 02
               S01:00032466:  00 01
               S01:00032468:  00 01
               S01:0003246A:  00 00
F00:0159       	dc.w $0, $0, $ffff, $ffff, $fffe, $fffd, $fffd, $fffc
               S01:0003246C:  00 00
               S01:0003246E:  00 00
               S01:00032470:  FF FF
               S01:00032472:  FF FF
               S01:00032474:  FF FE
               S01:00032476:  FF FD
               S01:00032478:  FF FD
               S01:0003247A:  FF FC
F00:0160       	dc.w $fffc, $fffb, $fffa, $fffa, $fff9, $fff9, $fff8, $fff8
               S01:0003247C:  FF FC
               S01:0003247E:  FF FB
               S01:00032480:  FF FA
               S01:00032482:  FF FA
               S01:00032484:  FF F9
               S01:00032486:  FF F9
               S01:00032488:  FF F8
               S01:0003248A:  FF F8
F00:0161       	dc.w $fff7, $fff7, $fff6, $fff6, $fff6, $fff5, $fff5, $fff5
               S01:0003248C:  FF F7
               S01:0003248E:  FF F7
               S01:00032490:  FF F6
               S01:00032492:  FF F6
               S01:00032494:  FF F6
               S01:00032496:  FF F5
               S01:00032498:  FF F5
               S01:0003249A:  FF F5
F00:0162       	dc.w $fff4, $fff4, $fff4, $fff4, $fff4, $fff4, $fff4, $fff3
               S01:0003249C:  FF F4
               S01:0003249E:  FF F4
               S01:000324A0:  FF F4
               S01:000324A2:  FF F4
               S01:000324A4:  FF F4
               S01:000324A6:  FF F4
               S01:000324A8:  FF F4
               S01:000324AA:  FF F3
F00:0163       	dc.w $fff3, $fff3, $fff4, $fff4, $fff4, $fff4, $fff4, $fff4
               S01:000324AC:  FF F3
               S01:000324AE:  FF F3
               S01:000324B0:  FF F4
               S01:000324B2:  FF F4
               S01:000324B4:  FF F4
               S01:000324B6:  FF F4
               S01:000324B8:  FF F4
               S01:000324BA:  FF F4
F00:0164       	dc.w $fff4, $fff5, $fff5, $fff5, $fff6, $fff6, $fff6, $fff7
               S01:000324BC:  FF F4
               S01:000324BE:  FF F5
               S01:000324C0:  FF F5
               S01:000324C2:  FF F5
               S01:000324C4:  FF F6
               S01:000324C6:  FF F6
               S01:000324C8:  FF F6
               S01:000324CA:  FF F7
F00:0165       	dc.w $fff7, $fff8, $fff8, $fff9, $fff9, $fffa, $fffa, $fffb
               S01:000324CC:  FF F7
               S01:000324CE:  FF F8
               S01:000324D0:  FF F8
               S01:000324D2:  FF F9
               S01:000324D4:  FF F9
               S01:000324D6:  FF FA
               S01:000324D8:  FF FA
               S01:000324DA:  FF FB
F00:0166       	dc.w $fffb, $fffc, $fffd, $fffd, $fffe, $ffff, $ffff, $0
               S01:000324DC:  FF FB
               S01:000324DE:  FF FC
               S01:000324E0:  FF FD
               S01:000324E2:  FF FD
               S01:000324E4:  FF FE
               S01:000324E6:  FF FF
               S01:000324E8:  FF FF
               S01:000324EA:  00 00
F00:0167       	dc.w $0, $0, $1, $1, $2, $3, $3, $4
               S01:000324EC:  00 00
               S01:000324EE:  00 00
               S01:000324F0:  00 01
               S01:000324F2:  00 01
               S01:000324F4:  00 02
               S01:000324F6:  00 03
               S01:000324F8:  00 03
               S01:000324FA:  00 04
F00:0168       	dc.w $4, $5, $6, $6, $7, $7, $8, $8
               S01:000324FC:  00 04
               S01:000324FE:  00 05
               S01:00032500:  00 06
               S01:00032502:  00 06
               S01:00032504:  00 07
               S01:00032506:  00 07
               S01:00032508:  00 08
               S01:0003250A:  00 08
F00:0169       	dc.w $9, $9, $a, $a, $a, $b, $b, $b
               S01:0003250C:  00 09
               S01:0003250E:  00 09
               S01:00032510:  00 0A
               S01:00032512:  00 0A
               S01:00032514:  00 0A
               S01:00032516:  00 0B
               S01:00032518:  00 0B
               S01:0003251A:  00 0B
F00:0170       	dc.w $c, $c, $c, $c, $c, $c, $c, $d
               S01:0003251C:  00 0C
               S01:0003251E:  00 0C
               S01:00032520:  00 0C
               S01:00032522:  00 0C
               S01:00032524:  00 0C
               S01:00032526:  00 0C
               S01:00032528:  00 0C
               S01:0003252A:  00 0D
F00:0171       	dc.w $d, $d, $c, $c, $c, $c, $c, $c
               S01:0003252C:  00 0D
               S01:0003252E:  00 0D
               S01:00032530:  00 0C
               S01:00032532:  00 0C
               S01:00032534:  00 0C
               S01:00032536:  00 0C
               S01:00032538:  00 0C
               S01:0003253A:  00 0C
F00:0172       	dc.w $c, $b, $b, $b, $a, $a, $a, $9
               S01:0003253C:  00 0C
               S01:0003253E:  00 0B
               S01:00032540:  00 0B
               S01:00032542:  00 0B
               S01:00032544:  00 0A
               S01:00032546:  00 0A
               S01:00032548:  00 0A
               S01:0003254A:  00 09
F00:0173       	dc.w $9, $8, $8, $7, $7, $6, $6, $5
               S01:0003254C:  00 09
               S01:0003254E:  00 08
               S01:00032550:  00 08
               S01:00032552:  00 07
               S01:00032554:  00 07
               S01:00032556:  00 06
               S01:00032558:  00 06
               S01:0003255A:  00 05
F00:0174       	dc.w $5, $4, $3, $3, $2, $1, $1, $0
               S01:0003255C:  00 05
               S01:0003255E:  00 04
               S01:00032560:  00 03
               S01:00032562:  00 03
               S01:00032564:  00 02
               S01:00032566:  00 01
               S01:00032568:  00 01
               S01:0003256A:  00 00
F00:0175       	dc.w $0, $0, $ffff, $ffff, $fffe, $fffd, $fffd, $fffc
               S01:0003256C:  00 00
               S01:0003256E:  00 00
               S01:00032570:  FF FF
               S01:00032572:  FF FF
               S01:00032574:  FF FE
               S01:00032576:  FF FD
               S01:00032578:  FF FD
               S01:0003257A:  FF FC
F00:0176       	dc.w $fffc, $fffb, $fffa, $fffa, $fff9, $fff9, $fff8, $fff8
               S01:0003257C:  FF FC
               S01:0003257E:  FF FB
               S01:00032580:  FF FA
               S01:00032582:  FF FA
               S01:00032584:  FF F9
               S01:00032586:  FF F9
               S01:00032588:  FF F8
               S01:0003258A:  FF F8
F00:0177       	dc.w $fff7, $fff7, $fff6, $fff6, $fff6, $fff5, $fff5, $fff5
               S01:0003258C:  FF F7
               S01:0003258E:  FF F7
               S01:00032590:  FF F6
               S01:00032592:  FF F6
               S01:00032594:  FF F6
               S01:00032596:  FF F5
               S01:00032598:  FF F5
               S01:0003259A:  FF F5
F00:0178       	dc.w $fff4, $fff4, $fff4, $fff4, $fff4, $fff4, $fff4, $fff3
               S01:0003259C:  FF F4
               S01:0003259E:  FF F4
               S01:000325A0:  FF F4
               S01:000325A2:  FF F4
               S01:000325A4:  FF F4
               S01:000325A6:  FF F4
               S01:000325A8:  FF F4
               S01:000325AA:  FF F3
F00:0179       	dc.w $fff3, $fff3, $fff3, $fff4, $fff4, $fff4, $fff4, $fff4
               S01:000325AC:  FF F3
               S01:000325AE:  FF F3
               S01:000325B0:  FF F3
               S01:000325B2:  FF F4
               S01:000325B4:  FF F4
               S01:000325B6:  FF F4
               S01:000325B8:  FF F4
               S01:000325BA:  FF F4
F00:0180       	dc.w $fff4, $fff5, $fff5, $fff5, $fff6, $fff6, $fff6, $fff7
               S01:000325BC:  FF F4
               S01:000325BE:  FF F5
               S01:000325C0:  FF F5
               S01:000325C2:  FF F5
               S01:000325C4:  FF F6
               S01:000325C6:  FF F6
               S01:000325C8:  FF F6
               S01:000325CA:  FF F7
F00:0181       	dc.w $fff7, $fff8, $fff8, $fff9, $fff9, $fffa, $fffa, $fffb
               S01:000325CC:  FF F7
               S01:000325CE:  FF F8
               S01:000325D0:  FF F8
               S01:000325D2:  FF F9
               S01:000325D4:  FF F9
               S01:000325D6:  FF FA
               S01:000325D8:  FF FA
               S01:000325DA:  FF FB
F00:0182       	dc.w $fffb, $fffc, $fffd, $fffd, $fffe, $ffff, $ffff, $0
               S01:000325DC:  FF FB
               S01:000325DE:  FF FC
               S01:000325E0:  FF FD
               S01:000325E2:  FF FD
               S01:000325E4:  FF FE
               S01:000325E6:  FF FF
               S01:000325E8:  FF FF
               S01:000325EA:  00 00
F00:0183       row	dc.w	$01
               S01:000325EC:  00 01
F00:0184       tmp	dc.w	$01
               S01:000325EE:  00 01
F00:0185       tmp2	dc.l	$00
               S01:000325F0:  00 00 00 00
F00:0186       planeoffset	dc.l	$00
               S01:000325F4:  00 00 00 00
F00:0187       	;*
F00:0188       ; //	Sets up the copper list to point to a 320x256 buffer. Note that the screen will be set up 
F00:0189       ; //	non-interlaced, with 40*256 bytes per bitplane. <p>
F00:0190       ; //	
F00:0191       ; //	Usage: 
F00:0192       ; //		SetupNonInterlacedScreen( [ data buffer ], [ number of bitplanes ] )
F00:0193       ; //		
F00:0194       ; //	Note that the data buffer must reside in chipmem
F00:0195       ; //	
F00:0196       ; //	Example:
F00:0197       ; //	
F00:0198       ; //	<code>
F00:0199       ; //var
F00:0200       ; //	const noBitPlanes = 4; 
F00:0201       ; // 4 bitplanes = 16 colors
F00:0202       ; //	buf : array[40*256*noBitPlanes] chipmem; 
F00:0203       ; // data buffer stored in chipmem  
F00:0204       ; //...
F00:0205       ; //begin
F00:0206       ; //	Graphics::SetupNonInterlacedScreen(#buf, noBitPlanes);
F00:0207       ; //	</code>
F00:0208       ; //	
F00:0209       ; 
F00:0210       
F00:0211       	; ***********  Defining procedure : Graphics_SetupNonInterlacedScreen
F00:0212       	;    Procedure type : User-defined procedure
F00:0213       	jmp block2
               S01:000325F8:  60 02
F00:0214        ; Temp vars section
F00:0215        ; Temp vars section ends
F00:0216       	 	CNOP 0,4
F00:0217       block2
F00:0218       Graphics_SetupNonInterlacedScreen
F00:0219       	moveq #0,d0
               S01:000325FC:  70 00
F00:0220       	moveq #0,d1
               S01:000325FE:  72 00
F00:0221       	move.w #$1000,d1     ; BOP move
               S01:00032600:  32 3C 10 00
F00:0222       	mulu.w Graphics_bpl,d1 ; simple bop
               S01:00032604:  C2 F9 00 00 00 98 [R]
F00:0223       	move.w d1,d0     ; BOP move
               S01:0003260A:  30 01
F00:0224       	or.w #$200,d0 ; simple bop
               S01:0003260C:  80 7C 02 00
F00:0225       	; Store variable : Graphics_j
F00:0226       	move.w d0,Graphics_j
               S01:00032610:  33 C0 00 00 00 9A [R]
F00:0227       	; Poke command
F00:0228       	move.l #copper_resolution,a0
               S01:00032616:  41 F9 00 00 01 1A [R]
F00:0229       	move.w Graphics_j,(a0)
               S01:0003261C:  30 B9 00 00 00 9A [R]
F00:0230       	
F00:0231       ; // $4000  = bitplanes, $200 = colours
F00:0232       	; Poke command
F00:0233       	move.l #copper_mod_even,a0
               S01:00032622:  41 F9 00 00 00 12 [R]
F00:0234       	move.w #$0,(a0)
               S01:00032628:  30 BC 00 00
F00:0235       	; Poke command
F00:0236       	move.l #copper_mod_odd,a0
               S01:0003262C:  41 F9 00 00 00 16 [R]
F00:0237       	move.w #$0,(a0)
               S01:00032632:  30 BC 00 00
F00:0238       	cmp.w #$5,Graphics_bpl
               S01:00032636:  0C 79 00 05 00 00 00 98 [R]
F00:0239       	bne edblock6
               S01:0003263E:  66 00 00 A2
F00:0240       ctb4: ;Main true block ;keep 
F00:0241       	
F00:0242       ; // Set palette at copper palette location, 16 colors
F00:0243       ; // Setup image copper list (4 bitplanes, 40*40 modulo 120
F00:0244       	; setcopperlist32
F00:0245       	move.l Graphics_pa,a1
               S01:00032642:  22 79 00 00 00 94 [R]
F00:0246       	move.l a1,d0
               S01:00032648:  20 09
F00:0247       	move.l #copper_bitplane0,a0
               S01:0003264A:  41 F9 00 00 00 E8 [R]
F00:0248       	move.w d0,6(a0)
               S01:00032650:  31 40 00 06
F00:0249       	swap d0
               S01:00032654:  48 40
F00:0250       	move.w d0,2(a0)
               S01:00032656:  31 40 00 02
F00:0251       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0003265A:  06 B9 00 00 28 00 00 00 00 94 [R]
F00:0252       	; setcopperlist32
F00:0253       	move.l Graphics_pa,a1
               S01:00032664:  22 79 00 00 00 94 [R]
F00:0254       	move.l a1,d0
               S01:0003266A:  20 09
F00:0255       	move.l #copper_bitplane1,a0
               S01:0003266C:  41 F9 00 00 00 F0 [R]
F00:0256       	move.w d0,6(a0)
               S01:00032672:  31 40 00 06
F00:0257       	swap d0
               S01:00032676:  48 40
F00:0258       	move.w d0,2(a0)
               S01:00032678:  31 40 00 02
F00:0259       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0003267C:  06 B9 00 00 28 00 00 00 00 94 [R]
F00:0260       	; setcopperlist32
F00:0261       	move.l Graphics_pa,a1
               S01:00032686:  22 79 00 00 00 94 [R]
F00:0262       	move.l a1,d0
               S01:0003268C:  20 09
F00:0263       	move.l #copper_bitplane2,a0
               S01:0003268E:  41 F9 00 00 00 F8 [R]
F00:0264       	move.w d0,6(a0)
               S01:00032694:  31 40 00 06
F00:0265       	swap d0
               S01:00032698:  48 40
F00:0266       	move.w d0,2(a0)
               S01:0003269A:  31 40 00 02
F00:0267       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0003269E:  06 B9 00 00 28 00 00 00 00 94 [R]
F00:0268       	; setcopperlist32
F00:0269       	move.l Graphics_pa,a1
               S01:000326A8:  22 79 00 00 00 94 [R]
F00:0270       	move.l a1,d0
               S01:000326AE:  20 09
F00:0271       	move.l #copper_bitplane3,a0
               S01:000326B0:  41 F9 00 00 01 00 [R]
F00:0272       	move.w d0,6(a0)
               S01:000326B6:  31 40 00 06
F00:0273       	swap d0
               S01:000326BA:  48 40
F00:0274       	move.w d0,2(a0)
               S01:000326BC:  31 40 00 02
F00:0275       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000326C0:  06 B9 00 00 28 00 00 00 00 94 [R]
F00:0276       	; setcopperlist32
F00:0277       	move.l Graphics_pa,a1
               S01:000326CA:  22 79 00 00 00 94 [R]
F00:0278       	move.l a1,d0
               S01:000326D0:  20 09
F00:0279       	move.l #copper_bitplane4,a0
               S01:000326D2:  41 F9 00 00 01 08 [R]
F00:0280       	move.w d0,6(a0)
               S01:000326D8:  31 40 00 06
F00:0281       	swap d0
               S01:000326DC:  48 40
F00:0282       	move.w d0,2(a0)
               S01:000326DE:  31 40 00 02
F00:0283       edblock6
F00:0284       	cmp.w #$4,Graphics_bpl
               S01:000326E2:  0C 79 00 04 00 00 00 98 [R]
F00:0285       	bne edblock12
               S01:000326EA:  66 7E
F00:0286       ctb10: ;Main true block ;keep 
F00:0287       	; setcopperlist32
F00:0288       	move.l Graphics_pa,a1
               S01:000326EC:  22 79 00 00 00 94 [R]
F00:0289       	move.l a1,d0
               S01:000326F2:  20 09
F00:0290       	move.l #copper_bitplane0,a0
               S01:000326F4:  41 F9 00 00 00 E8 [R]
F00:0291       	move.w d0,6(a0)
               S01:000326FA:  31 40 00 06
F00:0292       	swap d0
               S01:000326FE:  48 40
F00:0293       	move.w d0,2(a0)
               S01:00032700:  31 40 00 02
F00:0294       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00032704:  06 B9 00 00 28 00 00 00 00 94 [R]
F00:0295       	; setcopperlist32
F00:0296       	move.l Graphics_pa,a1
               S01:0003270E:  22 79 00 00 00 94 [R]
F00:0297       	move.l a1,d0
               S01:00032714:  20 09
F00:0298       	move.l #copper_bitplane1,a0
               S01:00032716:  41 F9 00 00 00 F0 [R]
F00:0299       	move.w d0,6(a0)
               S01:0003271C:  31 40 00 06
F00:0300       	swap d0
               S01:00032720:  48 40
F00:0301       	move.w d0,2(a0)
               S01:00032722:  31 40 00 02
F00:0302       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00032726:  06 B9 00 00 28 00 00 00 00 94 [R]
F00:0303       	; setcopperlist32
F00:0304       	move.l Graphics_pa,a1
               S01:00032730:  22 79 00 00 00 94 [R]
F00:0305       	move.l a1,d0
               S01:00032736:  20 09
F00:0306       	move.l #copper_bitplane2,a0
               S01:00032738:  41 F9 00 00 00 F8 [R]
F00:0307       	move.w d0,6(a0)
               S01:0003273E:  31 40 00 06
F00:0308       	swap d0
               S01:00032742:  48 40
F00:0309       	move.w d0,2(a0)
               S01:00032744:  31 40 00 02
F00:0310       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00032748:  06 B9 00 00 28 00 00 00 00 94 [R]
F00:0311       	; setcopperlist32
F00:0312       	move.l Graphics_pa,a1
               S01:00032752:  22 79 00 00 00 94 [R]
F00:0313       	move.l a1,d0
               S01:00032758:  20 09
F00:0314       	move.l #copper_bitplane3,a0
               S01:0003275A:  41 F9 00 00 01 00 [R]
F00:0315       	move.w d0,6(a0)
               S01:00032760:  31 40 00 06
F00:0316       	swap d0
               S01:00032764:  48 40
F00:0317       	move.w d0,2(a0)
               S01:00032766:  31 40 00 02
F00:0318       edblock12
F00:0319       	cmp.w #$3,Graphics_bpl
               S01:0003276A:  0C 79 00 03 00 00 00 98 [R]
F00:0320       	bne edblock18
               S01:00032772:  66 5C
F00:0321       ctb16: ;Main true block ;keep 
F00:0322       	; setcopperlist32
F00:0323       	move.l Graphics_pa,a1
               S01:00032774:  22 79 00 00 00 94 [R]
F00:0324       	move.l a1,d0
               S01:0003277A:  20 09
F00:0325       	move.l #copper_bitplane0,a0
               S01:0003277C:  41 F9 00 00 00 E8 [R]
F00:0326       	move.w d0,6(a0)
               S01:00032782:  31 40 00 06
F00:0327       	swap d0
               S01:00032786:  48 40
F00:0328       	move.w d0,2(a0)
               S01:00032788:  31 40 00 02
F00:0329       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0003278C:  06 B9 00 00 28 00 00 00 00 94 [R]
F00:0330       	; setcopperlist32
F00:0331       	move.l Graphics_pa,a1
               S01:00032796:  22 79 00 00 00 94 [R]
F00:0332       	move.l a1,d0
               S01:0003279C:  20 09
F00:0333       	move.l #copper_bitplane1,a0
               S01:0003279E:  41 F9 00 00 00 F0 [R]
F00:0334       	move.w d0,6(a0)
               S01:000327A4:  31 40 00 06
F00:0335       	swap d0
               S01:000327A8:  48 40
F00:0336       	move.w d0,2(a0)
               S01:000327AA:  31 40 00 02
F00:0337       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000327AE:  06 B9 00 00 28 00 00 00 00 94 [R]
F00:0338       	; setcopperlist32
F00:0339       	move.l Graphics_pa,a1
               S01:000327B8:  22 79 00 00 00 94 [R]
F00:0340       	move.l a1,d0
               S01:000327BE:  20 09
F00:0341       	move.l #copper_bitplane2,a0
               S01:000327C0:  41 F9 00 00 00 F8 [R]
F00:0342       	move.w d0,6(a0)
               S01:000327C6:  31 40 00 06
F00:0343       	swap d0
               S01:000327CA:  48 40
F00:0344       	move.w d0,2(a0)
               S01:000327CC:  31 40 00 02
F00:0345       edblock18
F00:0346       	cmp.w #$2,Graphics_bpl
               S01:000327D0:  0C 79 00 02 00 00 00 98 [R]
F00:0347       	bne edblock24
               S01:000327D8:  66 3A
F00:0348       ctb22: ;Main true block ;keep 
F00:0349       	; setcopperlist32
F00:0350       	move.l Graphics_pa,a1
               S01:000327DA:  22 79 00 00 00 94 [R]
F00:0351       	move.l a1,d0
               S01:000327E0:  20 09
F00:0352       	move.l #copper_bitplane0,a0
               S01:000327E2:  41 F9 00 00 00 E8 [R]
F00:0353       	move.w d0,6(a0)
               S01:000327E8:  31 40 00 06
F00:0354       	swap d0
               S01:000327EC:  48 40
F00:0355       	move.w d0,2(a0)
               S01:000327EE:  31 40 00 02
F00:0356       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000327F2:  06 B9 00 00 28 00 00 00 00 94 [R]
F00:0357       	; setcopperlist32
F00:0358       	move.l Graphics_pa,a1
               S01:000327FC:  22 79 00 00 00 94 [R]
F00:0359       	move.l a1,d0
               S01:00032802:  20 09
F00:0360       	move.l #copper_bitplane1,a0
               S01:00032804:  41 F9 00 00 00 F0 [R]
F00:0361       	move.w d0,6(a0)
               S01:0003280A:  31 40 00 06
F00:0362       	swap d0
               S01:0003280E:  48 40
F00:0363       	move.w d0,2(a0)
               S01:00032810:  31 40 00 02
F00:0364       edblock24
F00:0365       	cmp.w #$1,Graphics_bpl
               S01:00032814:  0C 79 00 01 00 00 00 98 [R]
F00:0366       	bne edblock30
               S01:0003281C:  66 18
F00:0367       ctb28: ;Main true block ;keep 
F00:0368       	; setcopperlist32
F00:0369       	move.l Graphics_pa,a1
               S01:0003281E:  22 79 00 00 00 94 [R]
F00:0370       	move.l a1,d0
               S01:00032824:  20 09
F00:0371       	move.l #copper_bitplane0,a0
               S01:00032826:  41 F9 00 00 00 E8 [R]
F00:0372       	move.w d0,6(a0)
               S01:0003282C:  31 40 00 06
F00:0373       	swap d0
               S01:00032830:  48 40
F00:0374       	move.w d0,2(a0)
               S01:00032832:  31 40 00 02
F00:0375       edblock30
F00:0376       	rts
               S01:00032836:  4E 75
F00:0377       	; ***********  Defining procedure : LSP_CIAStart
F00:0378       	;    Procedure type : User-defined procedure
F00:0379       	jmp block33
               S01:00032838:  60 0E
F00:0380       cs_music	dc.l	0
               S01:0003283A:  00 00 00 00
F00:0381       cs_bank	dc.l	0
               S01:0003283E:  00 00 00 00
F00:0382       cs_vbr	dc.w	0
               S01:00032842:  00 00
F00:0383       cs_palntsc	dc.w	0
               S01:00032844:  00 00
F00:0384       	 	CNOP 0,4
F00:0385       block33
F00:0386       LSP_CIAStart
F00:0387       		; Init LSP and start replay using easy CIA toolbox
F00:0388       			move.l	cs_music,a0
               S01:00032848:  20 7A FF F0
F00:0389       			move.l	cs_bank,a1
               S01:0003284C:  22 7A FF F0
F00:0390       			suba.l	a2,a2			
               S01:00032850:  95 CA
F00:0391       			move.w	cs_vbr,a2			; VBR
               S01:00032852:  34 7A FF EE
F00:0392       			moveq	#0,d0			
               S01:00032856:  70 00
F00:0393       			move.w  cs_palntsc,d0		; PALNTSC
               S01:00032858:  30 3A FF EA
F00:0394       			bsr		LSP_MusicDriver_CIA_Start
               S01:0003285C:  61 0C
F00:0395       			move.w	#$e000,$dff09a
               S01:0003285E:  33 FC E0 00 00 DF F0 9A
F00:0396       			bra.w   lspend
               S01:00032866:  60 00 03 7E
F00:0397       			
F00:0398       LSP_MusicDriver_CIA_Start:
F00:0399       			move.w	d0,-(a7)
               S01:0003286A:  3F 00
F00:0400       			lea		.irqVector(pc),a3
               S01:0003286C:  47 FA 00 28
F00:0401       			lea		$78(a2),a2
               S01:00032870:  45 EA 00 78
F00:0402       			move.l	a2,(a3)
               S01:00032874:  26 8A
F00:0403       			lea		.LSPDmaCon+1(pc),a2		; DMACON byte patch address
               S01:00032876:  45 FA 00 1D
F00:0404       			bsr		LSP_MusicInit			; init the LSP player ( whatever fast or insane version )
               S01:0003287A:  61 00 01 4A
F00:0405       			lea		.pMusicBPM(pc),a2
               S01:0003287E:  45 FA 00 20
F00:0406       			move.l	a0,(a2)					; store music BPM pointer
               S01:00032882:  24 88
F00:0407       			move.w	(a0),d0					; start BPM
               S01:00032884:  30 10
F00:0408       			lea		.curBpm(pc),a2
               S01:00032886:  45 FA 00 16
F00:0409       			move.w	d0,(a2)
               S01:0003288A:  34 80
F00:0410       			moveq	#1,d1
               S01:0003288C:  72 01
F00:0411       			and.w	(a7)+,d1
               S01:0003288E:  C2 5F
F00:0412       			bsr.s	.LSP_IrqInstall
               S01:00032890:  61 12
F00:0413       			rts
               S01:00032892:  4E 75
F00:0414       .LSPDmaCon:	dc.w	$8000
               S01:00032894:  80 00
F00:0415       .irqVector:	dc.l	0
               S01:00032896:  00 00 00 00
F00:0416       .ciaClock:	dc.l	0
               S01:0003289A:  00 00 00 00
F00:0417       .curBpm:	dc.w	0
               S01:0003289E:  00 00
F00:0418       .pMusicBPM:	dc.l	0
               S01:000328A0:  00 00 00 00
F00:0419       ; d0: music BPM
F00:0420       ; d1: PAL(0) or NTSC(1)
F00:0421       .LSP_IrqInstall:
F00:0422       			move.w 	#(1<<13),$dff09a		; disable CIA interrupt
               S01:000328A4:  33 FC 20 00 00 DF F0 9A
F00:0423       			lea		.LSP_MainIrq(pc),a0
               S01:000328AC:  41 FA 00 6A
F00:0424       			move.l	.irqVector(pc),a5
               S01:000328B0:  2A 7A FF E4
F00:0425       			move.l	a0,(a5)
               S01:000328B4:  2A 88
F00:0426       			lea		$bfd000,a0
               S01:000328B6:  41 F9 00 BF D0 00
F00:0427       			move.b 	#$7f,$d00(a0)
               S01:000328BC:  11 7C 00 7F 0D 00
F00:0428       			move.b 	#$10,$e00(a0)
               S01:000328C2:  11 7C 00 10 0E 00
F00:0429       			move.b 	#$10,$f00(a0)
               S01:000328C8:  11 7C 00 10 0F 00
F00:0430       			lsl.w	#2,d1
               S01:000328CE:  E5 49
F00:0431       			move.l	.palClocks(pc,d1.w),d1				; PAL or NTSC clock
               S01:000328D0:  22 3B 10 3E
F00:0432       			lea		.ciaClock(pc),a5
               S01:000328D4:  4B FA FF C4
F00:0433       			move.l	d1,(a5)
               S01:000328D8:  2A 81
F00:0434       			divu.w	d0,d1
               S01:000328DA:  82 C0
F00:0435       			move.b	d1,$400(a0)
               S01:000328DC:  11 41 04 00
F00:0436       			lsr.w 	#8,d1
               S01:000328E0:  E0 49
F00:0437       			move.b	d1,$500(a0)
               S01:000328E2:  11 41 05 00
F00:0438       			move.b	#$83,$d00(a0)
               S01:000328E6:  11 7C 00 83 0D 00
F00:0439       			move.b	#$11,$e00(a0)
               S01:000328EC:  11 7C 00 11 0E 00
F00:0440       			
F00:0441       			move.b	#496&255,$600(a0)		; set timer b to 496 ( to set DMACON )
               S01:000328F2:  11 7C 00 F0 06 00
F00:0442       			move.b	#496>>8,$700(a0)
               S01:000328F8:  11 7C 00 01 07 00
F00:0443       			move.w 	#(1<<13),$dff09c		; clear any req CIA
               S01:000328FE:  33 FC 20 00 00 DF F0 9C
F00:0444       			move.w 	#$a000,$dff09a			; CIA interrupt enabled
               S01:00032906:  33 FC A0 00 00 DF F0 9A
F00:0445       			rts
               S01:0003290E:  4E 75
F00:0446       		
F00:0447       .palClocks:	dc.l	1773447,1789773
               S01:00032910:  00 1B 0F 87
               S01:00032914:  00 1B 4F 4D
F00:0448       .LSP_MainIrq:
F00:0449       			btst.b	#0,$bfdd00
               S01:00032918:  08 39 00 00 00 BF DD 00
F00:0450       			beq.s	.skipa
               S01:00032920:  67 4A
F00:0451       			
F00:0452       			movem.l	d0-a6,-(a7)
               S01:00032922:  48 E7 FF FE
F00:0453       		; call player tick
F00:0454       			lea		$dff0a0,a6
               S01:00032926:  4D F9 00 DF F0 A0
F00:0455       			bsr		LSP_MusicPlayTick		; LSP main music driver tick
               S01:0003292C:  61 00 01 60
F00:0456       		; check if BMP changed in the middle of the music
F00:0457       			move.l	.pMusicBPM(pc),a0
               S01:00032930:  20 7A FF 6E
F00:0458       			move.w	(a0),d0					; current music BPM
               S01:00032934:  30 10
F00:0459       			cmp.w	.curBpm(pc),d0
               S01:00032936:  B0 7A FF 66
F00:0460       			beq.s	.noChg
               S01:0003293A:  67 1A
F00:0461       			lea		.curBpm(pc),a2			
               S01:0003293C:  45 FA FF 60
F00:0462       			move.w	d0,(a2)					; current BPM
               S01:00032940:  34 80
F00:0463       			move.l	.ciaClock(pc),d1
               S01:00032942:  22 3A FF 56
F00:0464       			divu.w	d0,d1
               S01:00032946:  82 C0
F00:0465       			move.b	d1,$bfd400
               S01:00032948:  13 C1 00 BF D4 00
F00:0466       			lsr.w 	#8,d1
               S01:0003294E:  E0 49
F00:0467       			move.b	d1,$bfd500			
               S01:00032950:  13 C1 00 BF D5 00
F00:0468       .noChg:		lea		.LSP_DmaconIrq(pc),a0
               S01:00032956:  41 FA 00 20
F00:0469       			move.l	.irqVector(pc),a1
               S01:0003295A:  22 7A FF 3A
F00:0470       			move.l	a0,(a1)
               S01:0003295E:  22 88
F00:0471       			move.b	#$19,$bfdf00			; start timerB, one shot
               S01:00032960:  13 FC 00 19 00 BF DF 00
F00:0472       			movem.l	(a7)+,d0-a6
               S01:00032968:  4C DF 7F FF
F00:0473       .skipa:		move.w	#$2000,$dff09c
               S01:0003296C:  33 FC 20 00 00 DF F0 9C
F00:0474       			nop
               S01:00032974:  4E 71
F00:0475       			rte
               S01:00032976:  4E 73
F00:0476       .LSP_DmaconIrq:
F00:0477       			btst.b	#1,$bfdd00
               S01:00032978:  08 39 00 01 00 BF DD 00
F00:0478       			beq.s	.skipb
               S01:00032980:  67 16
F00:0479       			move.w	.LSPDmaCon(pc),$dff096
               S01:00032982:  33 FA FF 10 00 DF F0 96
F00:0480       			pea		(a0)
               S01:0003298A:  48 50
F00:0481       			move.l	.irqVector(pc),a0
               S01:0003298C:  20 7A FF 08
F00:0482       			pea		.LSP_MainIrq(pc)
               S01:00032990:  48 7A FF 86
F00:0483       			move.l	(a7)+,(a0)
               S01:00032994:  20 9F
F00:0484       			move.l	(a7)+,a0
               S01:00032996:  20 5F
F00:0485       .skipb:		move.w	#$2000,$dff09c
               S01:00032998:  33 FC 20 00 00 DF F0 9C
F00:0486       			nop
               S01:000329A0:  4E 71
F00:0487       			rte
               S01:000329A2:  4E 73
F00:0488       LSP_MusicDriver_CIA_Stop:
F00:0489       			move.b	#$7f,$bfdd00
               S01:000329A4:  13 FC 00 7F 00 BF DD 00
F00:0490       			move.w	#$2000,$dff09a
               S01:000329AC:  33 FC 20 00 00 DF F0 9A
F00:0491       			move.w	#$2000,$dff09c
               S01:000329B4:  33 FC 20 00 00 DF F0 9C
F00:0492       			move.w	#$000f,$dff096
               S01:000329BC:  33 FC 00 0F 00 DF F0 96
F00:0493       			rts
               S01:000329C4:  4E 75
F00:0494       			
F00:0495       LSP_MusicInit:
F00:0496       			cmpi.l	#'LSP1',(a0)+
               S01:000329C6:  0C 98 4C 53 50 31
F00:0497       			bne		.dataError
               S01:000329CC:  66 00 00 BE
F00:0498       			move.l	(a0)+,d0		; unique id
               S01:000329D0:  20 18
F00:0499       			cmp.l	(a1),d0			; check sample bank matches the lsmusic file
               S01:000329D2:  B0 91
F00:0500       			bne		.dataError
               S01:000329D4:  66 00 00 B6
F00:0501       			lea		LSP_State(pc),a3
               S01:000329D8:  47 FA 01 DE
F00:0502       			move.l	a2,m_dmaconPatch(a3)
               S01:000329DC:  27 4A 00 08
F00:0503       			move.w	#$8000,-1(a2)			; Be sure DMACon word is $8000 (note: a2 should be ODD address)
               S01:000329E0:  35 7C 80 00 FF FF
F00:0504       			cmpi.w	#$010b,(a0)+			; this play routine supports v1.11 as minimal version of LPConvert.exe
               S01:000329E6:  0C 58 01 0B
F00:0505       			blt		.dataError
               S01:000329EA:  6D 00 00 A0
F00:0506       			movea.l	a0,a4					; relocation flag ad
               S01:000329EE:  28 48
F00:0507       			addq.w	#2,a0					; skip relocation flag
               S01:000329F0:  54 48
F00:0508       			move.w	(a0)+,m_currentBpm(a3)	; default BPM
               S01:000329F2:  37 58 00 1A
F00:0509       			move.w	(a0)+,m_escCodeRewind(a3)
               S01:000329F6:  37 58 00 10
F00:0510       			move.w	(a0)+,m_escCodeSetBpm(a3)
               S01:000329FA:  37 58 00 12
F00:0511       			move.w	(a0)+,m_escCodeGetPos(a3)
               S01:000329FE:  37 58 00 2C
F00:0512       			move.l	(a0)+,-(a7)				; music len in frame ticks
               S01:00032A02:  2F 18
F00:0513       			move.w	(a0)+,d0				; instrument count
               S01:00032A04:  30 18
F00:0514       			lea		-12(a0),a2				; LSP data has -12 offset on instrument tab ( to win 2 cycles in insane player :) )
               S01:00032A06:  45 E8 FF F4
F00:0515       			move.l	a2,m_lspInstruments(a3)	; instrument tab addr ( minus 4 )
               S01:00032A0A:  27 4A 00 14
F00:0516       			subq.w	#1,d0
               S01:00032A0E:  53 40
F00:0517       			move.l	a1,d1
               S01:00032A10:  22 09
F00:0518       			movea.l	a0,a1					; keep relocated flag
               S01:00032A12:  22 48
F00:0519       .relocLoop:	tst.b	(a4)					; relocation guard
               S01:00032A14:  4A 14
F00:0520       			bne.s	.relocated
               S01:00032A16:  66 06
F00:0521       			add.l	d1,(a0)
               S01:00032A18:  D3 90
F00:0522       			add.l	d1,6(a0)
               S01:00032A1A:  D3 A8 00 06
F00:0523       .relocated:	lea		12(a0),a0
               S01:00032A1E:  41 E8 00 0C
F00:0524       			dbf		d0,.relocLoop
               S01:00032A22:  51 C8 FF F0
F00:0525       			move.w	(a0)+,d0				; codes table size
               S01:00032A26:  30 18
F00:0526       			move.l	a0,m_codeTableAddr(a3)	; code table
               S01:00032A28:  27 48 00 0C
F00:0527       			add.w	d0,d0
               S01:00032A2C:  D0 40
F00:0528       			add.w	d0,a0
               S01:00032A2E:  D0 C0
F00:0529       		; read sequence timing infos (if any)
F00:0530       			move.w	(a0)+,m_seqCount(a3)
               S01:00032A30:  37 58 00 24
F00:0531       			beq.s	.noSeq
               S01:00032A34:  67 2A
F00:0532       			move.l	a0,m_seqTable(a3)
               S01:00032A36:  27 48 00 26
F00:0533       			clr.w	m_currentSeq(a3)
               S01:00032A3A:  42 6B 00 2A
F00:0534       			move.w	m_seqCount(a3),d0
               S01:00032A3E:  30 2B 00 24
F00:0535       			moveq	#0,d1
               S01:00032A42:  72 00
F00:0536       			move.w	d0,d1
               S01:00032A44:  32 00
F00:0537       			lsl.w	#3,d1			; 8 bytes per entry
               S01:00032A46:  E7 49
F00:0538       			add.w	#12,d1			; add 3 last 32bits (word stream size, byte stream loop, word stream loop)
               S01:00032A48:  D2 7C 00 0C
F00:0539       			add.l	a0,d1			; word stream data address
               S01:00032A4C:  D2 88
F00:0540       			subq.w	#1,d0
               S01:00032A4E:  53 40
F00:0541       .seqRel:	tst.b	(a4)
               S01:00032A50:  4A 14
F00:0542       			bne.s	.skipRel
               S01:00032A52:  66 06
F00:0543       			add.l	d1,(a0)
               S01:00032A54:  D3 90
F00:0544       			add.l	d1,4(a0)
               S01:00032A56:  D3 A8 00 04
F00:0545       .skipRel:	addq.w	#8,a0
               S01:00032A5A:  50 48
F00:0546       			dbf		d0,.seqRel
               S01:00032A5C:  51 C8 FF F2
F00:0547       .noSeq:		movem.l	(a0)+,d0-d2				; word stream size, byte stream loop point, word stream loop point
               S01:00032A60:  4C D8 00 07
F00:0548       			st		(a4)					
               S01:00032A64:  50 D4
F00:0549       			move.l	a0,m_wordStream(a3)
               S01:00032A66:  27 48 00 04
F00:0550       			lea		0(a0,d0.l),a1			; byte stream
               S01:00032A6A:  43 F0 08 00
F00:0551       			move.l	a1,m_byteStream(a3)
               S01:00032A6E:  26 89
F00:0552       			add.l	d2,a0
               S01:00032A70:  D1 C2
F00:0553       			add.l	d1,a1
               S01:00032A72:  D3 C1
F00:0554       			move.l	a0,m_wordStreamLoop(a3)
               S01:00032A74:  27 48 00 20
F00:0555       			move.l	a1,m_byteStreamLoop(a3)
               S01:00032A78:  27 49 00 1C
F00:0556       			bset.b	#1,$bfe001				; disabling this fucking Low pass filter!!
               S01:00032A7C:  08 F9 00 01 00 BF E0 01
F00:0557       			lea		m_currentBpm(a3),a0
               S01:00032A84:  41 EB 00 1A
F00:0558       			move.l	(a7)+,d0				; music len in frame ticks
               S01:00032A88:  20 1F
F00:0559       			rts
               S01:00032A8A:  4E 75
F00:0560       .dataError:	illegal
               S01:00032A8C:  4A FC
F00:0561       ;------------------------------------------------------------------
F00:0562       ;
F00:0563       ;	LSP_MusicPlayTick
F00:0564       ;
F00:0565       ;		In:	a6: should be $dff0a0
F00:0566       ;			Scratched regs: d0/d1/d2/a0/a1/a2/a3/a4/a5
F00:0567       ;		Out:None
F00:0568       ;
F00:0569       ;------------------------------------------------------------------
F00:0570       LSP_MusicPlayTick:
F00:0571       			lea		LSP_State(pc),a1
               S01:00032A8E:  43 FA 01 28
F00:0572       			move.l	(a1),a0					; byte stream
               S01:00032A92:  20 51
F00:0573       			move.l	m_codeTableAddr(a1),a2	; code table
               S01:00032A94:  24 69 00 0C
F00:0574       .process:	moveq	#0,d0
               S01:00032A98:  70 00
F00:0575       .cloop:		move.b	(a0)+,d0
               S01:00032A9A:  10 18
F00:0576       			beq		.cextended
               S01:00032A9C:  67 00 00 A2
F00:0577       			add.w	d0,d0
               S01:00032AA0:  D0 40
F00:0578       			move.w	0(a2,d0.w),d0			; code
               S01:00032AA2:  30 32 00 00
F00:0579       			beq		.noInst
               S01:00032AA6:  67 00 00 94
F00:0580       .cmdExec:	add.b	d0,d0
               S01:00032AAA:  D0 00
F00:0581       			bcc.s	.noVd
               S01:00032AAC:  64 04
F00:0582       			move.b	(a0)+,$d9-$a0(a6)
               S01:00032AAE:  1D 58 00 39
F00:0583       .noVd:		add.b	d0,d0
               S01:00032AB2:  D0 00
F00:0584       			bcc.s	.noVc
               S01:00032AB4:  64 04
F00:0585       			move.b	(a0)+,$c9-$a0(a6)
               S01:00032AB6:  1D 58 00 29
F00:0586       .noVc:		add.b	d0,d0
               S01:00032ABA:  D0 00
F00:0587       			bcc.s	.noVb
               S01:00032ABC:  64 04
F00:0588       			move.b	(a0)+,$b9-$a0(a6)
               S01:00032ABE:  1D 58 00 19
F00:0589       .noVb:		add.b	d0,d0
               S01:00032AC2:  D0 00
F00:0590       			bcc.s	.noVa
               S01:00032AC4:  64 04
F00:0591       			move.b	(a0)+,$a9-$a0(a6)
               S01:00032AC6:  1D 58 00 09
F00:0592       .noVa:		
F00:0593       			move.l	a0,(a1)+	; store byte stream ptr
               S01:00032ACA:  22 C8
F00:0594       			move.l	(a1),a0		; word stream
               S01:00032ACC:  20 51
F00:0595       			tst.b	d0
               S01:00032ACE:  4A 00
F00:0596       			beq.s	.noPa
               S01:00032AD0:  67 20
F00:0597       			add.b	d0,d0
               S01:00032AD2:  D0 00
F00:0598       			bcc.s	.noPd
               S01:00032AD4:  64 04
F00:0599       			move.w	(a0)+,$d6-$a0(a6)
               S01:00032AD6:  3D 58 00 36
F00:0600       .noPd:		add.b	d0,d0
               S01:00032ADA:  D0 00
F00:0601       			bcc.s	.noPc
               S01:00032ADC:  64 04
F00:0602       			move.w	(a0)+,$c6-$a0(a6)
               S01:00032ADE:  3D 58 00 26
F00:0603       .noPc:		add.b	d0,d0
               S01:00032AE2:  D0 00
F00:0604       			bcc.s	.noPb
               S01:00032AE4:  64 04
F00:0605       			move.w	(a0)+,$b6-$a0(a6)
               S01:00032AE6:  3D 58 00 16
F00:0606       .noPb:		add.b	d0,d0
               S01:00032AEA:  D0 00
F00:0607       			bcc.s	.noPa
               S01:00032AEC:  64 04
F00:0608       			move.w	(a0)+,$a6-$a0(a6)
               S01:00032AEE:  3D 58 00 06
F00:0609       .noPa:		
F00:0610       			tst.w	d0
               S01:00032AF2:  4A 40
F00:0611       			beq.s	.noInst
               S01:00032AF4:  67 46
F00:0612       			moveq	#0,d1
               S01:00032AF6:  72 00
F00:0613       			move.l	m_lspInstruments-4(a1),a2	; instrument table
               S01:00032AF8:  24 69 00 10
F00:0614       			lea		.resetv+12(pc),a4
               S01:00032AFC:  49 FA 00 8E
F00:0615       			lea		3*16(a6),a5
               S01:00032B00:  4B EE 00 30
F00:0616       			moveq	#4-1,d2
               S01:00032B04:  74 03
F00:0617       .vloop:		add.w	d0,d0
               S01:00032B06:  D0 40
F00:0618       			bcs.s	.setIns
               S01:00032B08:  65 0E
F00:0619       			add.w	d0,d0
               S01:00032B0A:  D0 40
F00:0620       			bcc.s	.skip
               S01:00032B0C:  64 1E
F00:0621       			move.l	(a4),a3
               S01:00032B0E:  26 54
F00:0622       			move.l	(a3)+,(a5)
               S01:00032B10:  2A 9B
F00:0623       			move.w	(a3)+,4(a5)
               S01:00032B12:  3B 5B 00 04
F00:0624       			bra.s	.skip
               S01:00032B16:  60 14
F00:0625       .setIns:	add.w	(a0)+,a2
               S01:00032B18:  D4 D8
F00:0626       			add.w	d0,d0
               S01:00032B1A:  D0 40
F00:0627       			bcc.s	.noReset
               S01:00032B1C:  64 06
F00:0628       			bset	d2,d1
               S01:00032B1E:  05 C1
F00:0629       			move.w	d1,$96-$a0(a6)
               S01:00032B20:  3D 41 FF F6
F00:0630       .noReset:	move.l	(a2)+,(a5)
               S01:00032B24:  2A 9A
F00:0631       			move.w	(a2)+,4(a5)
               S01:00032B26:  3B 5A 00 04
F00:0632       			move.l	a2,(a4)
               S01:00032B2A:  28 8A
F00:0633       .skip:		subq.w	#4,a4
               S01:00032B2C:  59 4C
F00:0634       			lea		-16(a5),a5
               S01:00032B2E:  4B ED FF F0
F00:0635       			dbf		d2,.vloop
               S01:00032B32:  51 CA FF D2
F00:0636       			move.l	m_dmaconPatch-4(a1),a3		; dmacon patch
               S01:00032B36:  26 69 00 04
F00:0637       			move.b	d1,(a3)						; dmacon			
               S01:00032B3A:  16 81
F00:0638       .noInst:	move.l	a0,(a1)			; store word stream (or byte stream if coming from early out)
               S01:00032B3C:  22 88
F00:0639       			rts
               S01:00032B3E:  4E 75
F00:0640       .cextended:	addi.w	#$100,d0
               S01:00032B40:  06 40 01 00
F00:0641       			move.b	(a0)+,d0
               S01:00032B44:  10 18
F00:0642       			beq.s	.cextended
               S01:00032B46:  67 F8
F00:0643       			add.w	d0,d0
               S01:00032B48:  D0 40
F00:0644       			move.w	0(a2,d0.w),d0			; code
               S01:00032B4A:  30 32 00 00
F00:0645       			cmp.w	m_escCodeRewind(a1),d0
               S01:00032B4E:  B0 69 00 10
F00:0646       			beq.s	.r_rewind
               S01:00032B52:  67 16
F00:0647       			cmp.w	m_escCodeSetBpm(a1),d0
               S01:00032B54:  B0 69 00 12
F00:0648       			beq.s	.r_chgbpm
               S01:00032B58:  67 1E
F00:0649       			cmp.w	m_escCodeGetPos(a1),d0
               S01:00032B5A:  B0 69 00 2C
F00:0650       			bne		.cmdExec
               S01:00032B5E:  66 00 FF 4A
F00:0651       .r_setPos:	move.b	(a0)+,(m_currentSeq+1)(a1)
               S01:00032B62:  13 58 00 2B
F00:0652       			bra		.process
               S01:00032B66:  60 00 FF 30
F00:0653       .r_rewind:	
F00:0654       			move.l	m_byteStreamLoop(a1),a0
               S01:00032B6A:  20 69 00 1C
F00:0655       			move.l	m_wordStreamLoop(a1),m_wordStream(a1)
               S01:00032B6E:  23 69 00 20 00 04
F00:0656       			bra		.process
               S01:00032B74:  60 00 FF 22
F00:0657       .r_chgbpm:	move.b	(a0)+,(m_currentBpm+1)(a1)	; BPM
               S01:00032B78:  13 58 00 1B
F00:0658       			bra		.process
               S01:00032B7C:  60 00 FF 1A
F00:0659       .resetv:	dc.l	0,0,0,0
               S01:00032B80:  00 00 00 00
               S01:00032B84:  00 00 00 00
               S01:00032B88:  00 00 00 00
               S01:00032B8C:  00 00 00 00
F00:0660       ;------------------------------------------------------------------
F00:0661       ;
F00:0662       ;	LSP_MusicSetPos
F00:0663       ;
F00:0664       ;		In: d0: seq position (from 0 to last seq of the song)
F00:0665       ;		Out:None
F00:0666       ;
F00:0667       ;	Force the replay pointer to a seq position. If music wasn't converted
F00:0668       ;	using -setpos option, this func does nothing
F00:0669       ;
F00:0670       ;------------------------------------------------------------------
F00:0671       LSP_MusicSetPos:
F00:0672       			lea		LSP_State(pc),a3
               S01:00032B90:  47 FA 00 26
F00:0673       			move.w	m_seqCount(a3),d1
               S01:00032B94:  32 2B 00 24
F00:0674       			beq.s	.noTimingInfo
               S01:00032B98:  67 16
F00:0675       			cmp.w	d1,d0
               S01:00032B9A:  B0 41
F00:0676       			bge.s	.noTimingInfo
               S01:00032B9C:  6C 12
F00:0677       			move.w	d0,m_currentSeq(a3)
               S01:00032B9E:  37 40 00 2A
F00:0678       			move.l	m_seqTable(a3),a0
               S01:00032BA2:  20 6B 00 26
F00:0679       			lsl.w	#3,d0
               S01:00032BA6:  E7 48
F00:0680       			add.w	d0,a0
               S01:00032BA8:  D0 C0
F00:0681       			move.l	(a0)+,m_wordStream(a3)
               S01:00032BAA:  27 58 00 04
F00:0682       			move.l	(a0)+,m_byteStream(a3)
               S01:00032BAE:  26 98
F00:0683       .noTimingInfo:
F00:0684       			rts
               S01:00032BB0:  4E 75
F00:0685       ;------------------------------------------------------------------
F00:0686       ;
F00:0687       ;	LSP_MusicGetPos
F00:0688       ;
F00:0689       ;		In: None
F00:0690       ;		Out: d0:  seq position (from 0 to last seq of the song)
F00:0691       ;
F00:0692       ;	Get the current seq position. If music wasn't converted with
F00:0693       ;	-getpos option, this func just returns 0
F00:0694       ;
F00:0695       ;------------------------------------------------------------------
F00:0696       LSP_MusicGetPos:			
F00:0697       			move.w	(LSP_State+m_currentSeq)(pc),d0
               S01:00032BB2:  30 3A 00 2E
F00:0698       			rts
               S01:00032BB6:  4E 75
F00:0699       	rsreset
F00:0700       	
F00:0701       m_byteStream:		rs.l	1	;  0 byte stream
F00:0702       m_wordStream:		rs.l	1	;  4 word stream
F00:0703       m_dmaconPatch:		rs.l	1	;  8 m_lfmDmaConPatch
F00:0704       m_codeTableAddr:	rs.l	1	; 12 code table addr
F00:0705       m_escCodeRewind:	rs.w	1	; 16 rewind special escape code
F00:0706       m_escCodeSetBpm:	rs.w	1	; 18 set BPM escape code
F00:0707       m_lspInstruments:	rs.l	1	; 20 LSP instruments table addr
F00:0708       m_relocDone:		rs.w	1	; 24 reloc done flag
F00:0709       m_currentBpm:		rs.w	1	; 26 current BPM
F00:0710       m_byteStreamLoop:	rs.l	1	; 28 byte stream loop point
F00:0711       m_wordStreamLoop:	rs.l	1	; 32 word stream loop point
F00:0712       m_seqCount:			rs.w	1
F00:0713       m_seqTable:			rs.l	1
F00:0714       m_currentSeq:		rs.w	1
F00:0715       m_escCodeGetPos:	rs.w	1
F00:0716       sizeof_LSPVars:		rs.w	0
F00:0717       LSP_State:			ds.b	sizeof_LSPVars		
F00:0718       lspend:	
F00:0719       	
F00:0720       	rts
               S01:00032BE6:  4E 75
F00:0721       	; ***********  Defining procedure : c2p_convert
F00:0722       	;    Procedure type : User-defined procedure
F00:0723       	jmp block34
               S01:00032BE8:  60 0A
F00:0724       chunkybuffer	dc.l	0
               S01:00032BEA:  00 00 00 00
F00:0725       bplbuffer	dc.l	0
               S01:00032BEE:  00 00 00 00
F00:0726       	 	CNOP 0,4
F00:0727       block34
F00:0728       c2p_convert
F00:0729       	
F00:0730       	move.w  #1,$100
               S01:00032BF4:  31 FC 00 01 01 00
F00:0731       	move.w	#CHUNKYXMAX,d0
               S01:00032BFA:  30 3C 01 40
F00:0732       	move.w	#CHUNKYYMAX,d1
               S01:00032BFE:  32 3C 02 00
F00:0733       	moveq	#0,d2			; Not used by this c2p
               S01:00032C02:  74 00
F00:0734       	moveq	#0,d3			
               S01:00032C04:  76 00
F00:0735       	move.l	#BPLX/8,d4		
               S01:00032C06:  78 28
F00:0736       	move.l	#BPLSIZE,d5		; Only partially used by this c2p	
               S01:00032C08:  2A 3C 00 00 50 00
F00:0737       	move.l	#CHUNKYXMAX,d6		; Not used by this c2p
               S01:00032C0E:  2C 3C 00 00 01 40
F00:0738       	bsr	    c2p1x1_5_c5_030_init	; Init c2p	
               S01:00032C14:  61 0E
F00:0739       	move.l  chunkybuffer,a0
               S01:00032C16:  20 7A FF D2
F00:0740       	move.l  bplbuffer,a1
               S01:00032C1A:  22 7A FF D2
F00:0741       	bsr     c2p1x1_5_c5_030
               S01:00032C1E:  61 26
F00:0742       	
F00:0743       	rts
               S01:00032C20:  4E 75
F00:0744       	; ***********  Defining procedure : Load_c2p
F00:0745       	;    Procedure type : User-defined procedure
F00:0746       Load_c2p
F00:0747       BPLX	EQU	320
F00:0748       BPLY	EQU	512
F00:0749       BPLSIZE	EQU	BPLX*BPLY/8
F00:0750       MINUBPLSIZEMINUS4 EQU -BPLSIZE-4
F00:0751       BPLSIZEX2 EQU BPLSIZE*2
F00:0752       BPLSIZEX3 EQU BPLSIZE*3
F00:0753       CHUNKYXMAX EQU	BPLX
F00:0754       CHUNKYYMAX EQU	BPLY
F00:0755           rts
               S01:00032C22:  4E 75
F00:0756       ;				modulo	max res	fscreen	compu
F00:0757       ; c2p1x1_5_c5_030		no	320x256?  no	030
F00:0758       ; d0.w	chunkyx [chunky-pixels]
F00:0759       ; d1.w	chunkyy [chunky-pixels]
F00:0760       ; d2.w	(scroffsx) [screen-pixels]
F00:0761       ; d3.w	scroffsy [screen-pixels]
F00:0762       ; d4.w	(rowlen) [bytes] -- offset between one row and the next in a bpl
F00:0763       ; d5.l	(bplsize) [bytes] -- offset between one row in one bpl and the next bpl
F00:0764       	XDEF	_c2p1x1_5_c5_030_init
F00:0765       	XDEF	c2p1x1_5_c5_030_init
F00:0766       _c2p1x1_5_c5_030_init
F00:0767       c2p1x1_5_c5_030_init
F00:0768       	movem.l	d2-d3,-(sp)
               S01:00032C24:  48 E7 30 00
F00:0769       	andi.l	#$ffff,d0
               S01:00032C28:  02 80 00 00 FF FF
F00:0770       	mulu.w	d0,d3
               S01:00032C2E:  C6 C0
F00:0771       	lsr.l	#3,d3
               S01:00032C30:  E6 8B
F00:0772       	move.l	d3,c2p1x1_5_c5_030_scroffs
               S01:00032C32:  23 C3 00 03 2E 38 [R]
F00:0773       	mulu.w	d0,d1
               S01:00032C38:  C2 C0
F00:0774       	move.l	d1,c2p1x1_5_c5_030_pixels
               S01:00032C3A:  23 C1 00 03 2E 3C [R]
F00:0775       	movem.l	(sp)+,d2-d3
               S01:00032C40:  4C DF 00 0C
F00:0776       	rts
               S01:00032C44:  4E 75
F00:0777       ; a0	c2pscreen
F00:0778       ; a1	bitplanes
F00:0779       	XDEF	_c2p1x1_5_c5_030
F00:0780       	XDEF	c2p1x1_5_c5_030
F00:0781       _c2p1x1_5_c5_030
F00:0782       c2p1x1_5_c5_030
F00:0783       	move.w  #1,$100
               S01:00032C46:  31 FC 00 01 01 00
F00:0784       	movem.l	d2-d7/a2-a6,-(sp)
               S01:00032C4C:  48 E7 3F 3E
F00:0785       	move.l	#$33333333,a6
               S01:00032C50:  2C 7C 33 33 33 33
F00:0786       	add.l	#BPLSIZE,a1
               S01:00032C56:  43 E9 50 00
F00:0787       	add.l	c2p1x1_5_c5_030_scroffs,a1
               S01:00032C5A:  D3 FA 01 DC
F00:0788       	lea	c2p1x1_5_c5_030_tempbuf,a3
               S01:00032C5E:  47 F9 00 00 00 B6 [R]
F00:0789       	move.l	c2p1x1_5_c5_030_pixels,a2
               S01:00032C64:  24 7A 01 D6
F00:0790       	add.l	a0,a2
               S01:00032C68:  D5 C8
F00:0791       	cmp.l	a0,a2
               S01:00032C6A:  B5 C8
F00:0792       	beq	.none
               S01:00032C6C:  67 00 01 C4
F00:0793       	move.l	a1,-(sp)
               S01:00032C70:  2F 09
F00:0794       	move.l	(a0)+,d1
               S01:00032C72:  22 18
F00:0795       	move.l	(a0)+,d5
               S01:00032C74:  2A 18
F00:0796       	move.l	(a0)+,d0
               S01:00032C76:  20 18
F00:0797       	move.l	(a0)+,d6
               S01:00032C78:  2C 18
F00:0798       	move.l	#$0f0f0f0f,d4		; Swap 4x1, part 1
               S01:00032C7A:  28 3C 0F 0F 0F 0F
F00:0799       	move.l	d5,d7
               S01:00032C80:  2E 05
F00:0800       	lsr.l	#4,d7
               S01:00032C82:  E8 8F
F00:0801       	eor.l	d1,d7
               S01:00032C84:  B3 87
F00:0802       	and.l	d4,d7
               S01:00032C86:  CE 84
F00:0803       	eor.l	d7,d1
               S01:00032C88:  BF 81
F00:0804       	lsl.l	#4,d7
               S01:00032C8A:  E9 8F
F00:0805       	eor.l	d7,d5
               S01:00032C8C:  BF 85
F00:0806       	move.l	d6,d7
               S01:00032C8E:  2E 06
F00:0807       	lsr.l	#4,d7
               S01:00032C90:  E8 8F
F00:0808       	eor.l	d0,d7
               S01:00032C92:  B1 87
F00:0809       	and.l	d4,d7
               S01:00032C94:  CE 84
F00:0810       	eor.l	d7,d0
               S01:00032C96:  BF 80
F00:0811       	lsl.l	#4,d7
               S01:00032C98:  E9 8F
F00:0812       	eor.l	d7,d6
               S01:00032C9A:  BF 86
F00:0813       	move.l	(a0)+,d3
               S01:00032C9C:  26 18
F00:0814       	move.l	(a0)+,d2
               S01:00032C9E:  24 18
F00:0815       	move.l	d2,d7			; Swap 4x1, part 2
               S01:00032CA0:  2E 02
F00:0816       	lsr.l	#4,d7
               S01:00032CA2:  E8 8F
F00:0817       	eor.l	d3,d7
               S01:00032CA4:  B7 87
F00:0818       	and.l	d4,d7
               S01:00032CA6:  CE 84
F00:0819       	eor.l	d7,d3
               S01:00032CA8:  BF 83
F00:0820       	lsl.l	#4,d7
               S01:00032CAA:  E9 8F
F00:0821       	eor.l	d7,d2
               S01:00032CAC:  BF 82
F00:0822       	move.w	d3,d7			; Swap 16x4, part 1
               S01:00032CAE:  3E 03
F00:0823       	move.w	d1,d3
               S01:00032CB0:  36 01
F00:0824       	swap	d3
               S01:00032CB2:  48 43
F00:0825       	move.w	d3,d1
               S01:00032CB4:  32 03
F00:0826       	move.w	d7,d3
               S01:00032CB6:  36 07
F00:0827       	lsl.l	#2,d1			; Swap/Merge 2x4, part 1
               S01:00032CB8:  E5 89
F00:0828       	or.l	d1,d3
               S01:00032CBA:  86 81
F00:0829       	move.l	d3,(a3)+
               S01:00032CBC:  26 C3
F00:0830       	move.l	(a0)+,d1
               S01:00032CBE:  22 18
F00:0831       	move.l	(a0)+,d3
               S01:00032CC0:  26 18
F00:0832       	move.l	d3,d7
               S01:00032CC2:  2E 03
F00:0833       	lsr.l	#4,d7
               S01:00032CC4:  E8 8F
F00:0834       	eor.l	d1,d7
               S01:00032CC6:  B3 87
F00:0835       	and.l	d4,d7
               S01:00032CC8:  CE 84
F00:0836       	eor.l	d7,d1
               S01:00032CCA:  BF 81
F00:0837       	lsl.l	#4,d7
               S01:00032CCC:  E9 8F
F00:0838       	eor.l	d7,d3
               S01:00032CCE:  BF 83
F00:0839       	move.w	d1,d7			; Swap 16x4, part 2
               S01:00032CD0:  3E 01
F00:0840       	move.w	d0,d1
               S01:00032CD2:  32 00
F00:0841       	swap	d1
               S01:00032CD4:  48 41
F00:0842       	move.w	d1,d0
               S01:00032CD6:  30 01
F00:0843       	move.w	d7,d1
               S01:00032CD8:  32 07
F00:0844       	lsl.l	#2,d0			; Swap/Merge 2x4, part 2
               S01:00032CDA:  E5 88
F00:0845       	or.l	d0,d1
               S01:00032CDC:  82 80
F00:0846       	move.l	d1,(a3)+
               S01:00032CDE:  26 C1
F00:0847       	bra.s	.start1
               S01:00032CE0:  60 78
F00:0848       .x1
F00:0849       	move.l	(a0)+,d1
               S01:00032CE2:  22 18
F00:0850       	move.l	(a0)+,d5
               S01:00032CE4:  2A 18
F00:0851       	move.l	(a0)+,d0
               S01:00032CE6:  20 18
F00:0852       	move.l	(a0)+,d6
               S01:00032CE8:  2C 18
F00:0853       	move.l	d7,BPLSIZE(a1)
               S01:00032CEA:  23 47 50 00
F00:0854       	move.l	#$0f0f0f0f,d4		; Swap 4x1, part 1
               S01:00032CEE:  28 3C 0F 0F 0F 0F
F00:0855       	move.l	d5,d7
               S01:00032CF4:  2E 05
F00:0856       	lsr.l	#4,d7
               S01:00032CF6:  E8 8F
F00:0857       	eor.l	d1,d7
               S01:00032CF8:  B3 87
F00:0858       	and.l	d4,d7
               S01:00032CFA:  CE 84
F00:0859       	eor.l	d7,d1
               S01:00032CFC:  BF 81
F00:0860       	lsl.l	#4,d7
               S01:00032CFE:  E9 8F
F00:0861       	eor.l	d7,d5
               S01:00032D00:  BF 85
F00:0862       	move.l	d6,d7
               S01:00032D02:  2E 06
F00:0863       	lsr.l	#4,d7
               S01:00032D04:  E8 8F
F00:0864       	eor.l	d0,d7
               S01:00032D06:  B1 87
F00:0865       	and.l	d4,d7
               S01:00032D08:  CE 84
F00:0866       	eor.l	d7,d0
               S01:00032D0A:  BF 80
F00:0867       	lsl.l	#4,d7
               S01:00032D0C:  E9 8F
F00:0868       	eor.l	d7,d6
               S01:00032D0E:  BF 86
F00:0869       	move.l	(a0)+,d3
               S01:00032D10:  26 18
F00:0870       	move.l	(a0)+,d2
               S01:00032D12:  24 18
F00:0871       	move.l	a4,(a1)+
               S01:00032D14:  22 CC
F00:0872       	move.l	d2,d7			; Swap 4x1, part 2
               S01:00032D16:  2E 02
F00:0873       	lsr.l	#4,d7
               S01:00032D18:  E8 8F
F00:0874       	eor.l	d3,d7
               S01:00032D1A:  B7 87
F00:0875       	and.l	d4,d7
               S01:00032D1C:  CE 84
F00:0876       	eor.l	d7,d3
               S01:00032D1E:  BF 83
F00:0877       	lsl.l	#4,d7
               S01:00032D20:  E9 8F
F00:0878       	eor.l	d7,d2
               S01:00032D22:  BF 82
F00:0879       	move.w	d3,d7			; Swap 16x4, part 1
               S01:00032D24:  3E 03
F00:0880       	move.w	d1,d3
               S01:00032D26:  36 01
F00:0881       	swap	d3
               S01:00032D28:  48 43
F00:0882       	move.w	d3,d1
               S01:00032D2A:  32 03
F00:0883       	move.w	d7,d3
               S01:00032D2C:  36 07
F00:0884       	lsl.l 	#2,d1 			; Swap/Merge 2x4, part 1
               S01:00032D2E:  E5 89
F00:0885       	or.l 	d1,d3
               S01:00032D30:  86 81
F00:0886       	move.l 	d3,(a3)+
               S01:00032D32:  26 C3
F00:0887       	move.l	(a0)+,d1
               S01:00032D34:  22 18
F00:0888       	move.l	(a0)+,d3
               S01:00032D36:  26 18
F00:0889       	move.l	a5,MINUBPLSIZEMINUS4(a1)
               S01:00032D38:  23 4D AF FC
F00:0890       	move.l	d3,d7
               S01:00032D3C:  2E 03
F00:0891       	lsr.l	#4,d7
               S01:00032D3E:  E8 8F
F00:0892       	eor.l	d1,d7
               S01:00032D40:  B3 87
F00:0893       	and.l	d4,d7
               S01:00032D42:  CE 84
F00:0894       	eor.l	d7,d1
               S01:00032D44:  BF 81
F00:0895       	lsl.l	#4,d7
               S01:00032D46:  E9 8F
F00:0896       	eor.l	d7,d3
               S01:00032D48:  BF 83
F00:0897       	move.w	d1,d7			; Swap 16x4, part 2
               S01:00032D4A:  3E 01
F00:0898       	move.w	d0,d1
               S01:00032D4C:  32 00
F00:0899       	swap	d1
               S01:00032D4E:  48 41
F00:0900       	move.w	d1,d0
               S01:00032D50:  30 01
F00:0901       	move.w	d7,d1
               S01:00032D52:  32 07
F00:0902       	lsl.l	#2,d0			; Swap/Merge 2x4, part 2
               S01:00032D54:  E5 88
F00:0903       	or.l	d0,d1
               S01:00032D56:  82 80
F00:0904       	move.l	d1,(a3)+
               S01:00032D58:  26 C1
F00:0905       .start1
F00:0906       	move.w	d2,d7			; Swap 16x4, part 3 & 4
               S01:00032D5A:  3E 02
F00:0907       	move.w	d5,d2
               S01:00032D5C:  34 05
F00:0908       	swap	d2
               S01:00032D5E:  48 42
F00:0909       	move.w	d2,d5
               S01:00032D60:  3A 02
F00:0910       	move.w	d7,d2
               S01:00032D62:  34 07
F00:0911       	move.w	d3,d7
               S01:00032D64:  3E 03
F00:0912       	move.w	d6,d3
               S01:00032D66:  36 06
F00:0913       	swap	d3
               S01:00032D68:  48 43
F00:0914       	move.w	d3,d6
               S01:00032D6A:  3C 03
F00:0915       	move.w	d7,d3
               S01:00032D6C:  36 07
F00:0916       	move.l	a6,d0
               S01:00032D6E:  20 0E
F00:0917       	move.l	d2,d7			; Swap/Merge 2x4, part 3 & 4
               S01:00032D70:  2E 02
F00:0918       	lsr.l	#2,d7
               S01:00032D72:  E4 8F
F00:0919       	eor.l	d5,d7
               S01:00032D74:  BB 87
F00:0920       	and.l	d0,d7
               S01:00032D76:  CE 80
F00:0921       	eor.l	d7,d5
               S01:00032D78:  BF 85
F00:0922       	lsl.l	#2,d7
               S01:00032D7A:  E5 8F
F00:0923       	eor.l	d7,d2
               S01:00032D7C:  BF 82
F00:0924       	move.l	d3,d7
               S01:00032D7E:  2E 03
F00:0925       	lsr.l	#2,d7
               S01:00032D80:  E4 8F
F00:0926       	eor.l	d6,d7
               S01:00032D82:  BD 87
F00:0927       	and.l	d0,d7
               S01:00032D84:  CE 80
F00:0928       	eor.l	d7,d6
               S01:00032D86:  BF 86
F00:0929       	lsl.l	#2,d7
               S01:00032D88:  E5 8F
F00:0930       	eor.l	d7,d3
               S01:00032D8A:  BF 83
F00:0931       	move.l	#$00ff00ff,d4
               S01:00032D8C:  28 3C 00 FF 00 FF
F00:0932       	move.l	d6,d7			; Swap 8x2, part 1
               S01:00032D92:  2E 06
F00:0933       	lsr.l	#8,d7
               S01:00032D94:  E0 8F
F00:0934       	eor.l	d5,d7
               S01:00032D96:  BB 87
F00:0935       	and.l	d4,d7
               S01:00032D98:  CE 84
F00:0936       	eor.l	d7,d5
               S01:00032D9A:  BF 85
F00:0937       	lsl.l	#8,d7
               S01:00032D9C:  E1 8F
F00:0938       	eor.l	d7,d6
               S01:00032D9E:  BF 86
F00:0939       	move.l	#$55555555,d1
               S01:00032DA0:  22 3C 55 55 55 55
F00:0940       	move.l	d6,d7			; Swap 1x2, part 1
               S01:00032DA6:  2E 06
F00:0941       	lsr.l	d7
               S01:00032DA8:  E2 8F
F00:0942       	eor.l	d5,d7
               S01:00032DAA:  BB 87
F00:0943       	and.l	d1,d7
               S01:00032DAC:  CE 81
F00:0944       	eor.l	d7,d5
               S01:00032DAE:  BF 85
F00:0945       	move.l  a1,d0
               S01:00032DB0:  20 09
F00:0946       	add.l   #BPLSIZEX2, a1
               S01:00032DB2:  D3 FC 00 00 A0 00
F00:0947       	move.l	d5,(a1)
               S01:00032DB8:  22 85
F00:0948       	move.l  d0,a1
               S01:00032DBA:  22 40
F00:0949       	add.l	d7,d7
               S01:00032DBC:  DE 87
F00:0950       	eor.l	d6,d7
               S01:00032DBE:  BD 87
F00:0951       	
F00:0952       	move.l	d3,d5			; Swap 8x2, part 2
               S01:00032DC0:  2A 03
F00:0953       	lsr.l	#8,d5
               S01:00032DC2:  E0 8D
F00:0954       	eor.l	d2,d5
               S01:00032DC4:  B5 85
F00:0955       	and.l	d4,d5
               S01:00032DC6:  CA 84
F00:0956       	eor.l	d5,d2
               S01:00032DC8:  BB 82
F00:0957       	lsl.l	#8,d5
               S01:00032DCA:  E1 8D
F00:0958       	eor.l	d5,d3
               S01:00032DCC:  BB 83
F00:0959       	move.l	d3,d5			; Swap 1x2, part 2
               S01:00032DCE:  2A 03
F00:0960       	lsr.l	d5
               S01:00032DD0:  E2 8D
F00:0961       	eor.l	d2,d5
               S01:00032DD2:  B5 85
F00:0962       	and.l	d1,d5
               S01:00032DD4:  CA 81
F00:0963       	eor.l	d5,d2
               S01:00032DD6:  BB 82
F00:0964       	add.l	d5,d5
               S01:00032DD8:  DA 85
F00:0965       	eor.l	d5,d3
               S01:00032DDA:  BB 83
F00:0966       	move.l	d2,a4
               S01:00032DDC:  28 42
F00:0967       	move.l	d3,a5
               S01:00032DDE:  2A 43
F00:0968       	cmpa.l	a0,a2
               S01:00032DE0:  B5 C8
F00:0969       	bne	.x1
               S01:00032DE2:  66 00 FE FE
F00:0970       .x1end
F00:0971       	move.l	d7,BPLSIZE(a1)
               S01:00032DE6:  23 47 50 00
F00:0972       	move.l	a4,(a1)+
               S01:00032DEA:  22 CC
F00:0973       	move.l	a5,MINUBPLSIZEMINUS4(a1)
               S01:00032DEC:  23 4D AF FC
F00:0974       	move.l	(sp)+,a1
               S01:00032DF0:  22 5F
F00:0975       	add.l	#BPLSIZEX3,a1
               S01:00032DF2:  D3 FC 00 00 F0 00
F00:0976       	move.l	#$00ff00ff,d3
               S01:00032DF8:  26 3C 00 FF 00 FF
F00:0977       	lea	c2p1x1_5_c5_030_tempbuf,a0
               S01:00032DFE:  41 F9 00 00 00 B6 [R]
F00:0978       	move.l	c2p1x1_5_c5_030_pixels,d0
               S01:00032E04:  20 3A 00 36
F00:0979       	lsr.l	#2,d0
               S01:00032E08:  E4 88
F00:0980       	lea	(a0,d0.l),a2
               S01:00032E0A:  45 F0 08 00
F00:0981       	move.l	(a0)+,d0
               S01:00032E0E:  20 18
F00:0982       	move.l	(a0)+,d1
               S01:00032E10:  22 18
F00:0983       	bra.s	.start2
               S01:00032E12:  60 06
F00:0984       .x2
F00:0985       	move.l	(a0)+,d0
               S01:00032E14:  20 18
F00:0986       	move.l	(a0)+,d1
               S01:00032E16:  22 18
F00:0987       	move.l	d2,(a1)+
               S01:00032E18:  22 C2
F00:0988       .start2
F00:0989       	move.l	d1,d2			; Swap 8x2
               S01:00032E1A:  24 01
F00:0990       	lsr.l	#8,d2
               S01:00032E1C:  E0 8A
F00:0991       	eor.l	d0,d2
               S01:00032E1E:  B1 82
F00:0992       	and.l	d3,d2
               S01:00032E20:  C4 83
F00:0993       	eor.l	d2,d0
               S01:00032E22:  B5 80
F00:0994       	lsl.l	#8,d2
               S01:00032E24:  E1 8A
F00:0995       	eor.l	d1,d2
               S01:00032E26:  B3 82
F00:0996       	add.l	d0,d0			; Merge 1x2
               S01:00032E28:  D0 80
F00:0997       	add.l	d0,d2
               S01:00032E2A:  D4 80
F00:0998       	cmpa.l	a0,a2
               S01:00032E2C:  B5 C8
F00:0999       	bne.s	.x2
               S01:00032E2E:  66 E4
F00:1000       .x2end
F00:1001       	move.l	d2,(a1)+
               S01:00032E30:  22 C2
F00:1002       .none
F00:1003       	movem.l	(sp)+,d2-d7/a2-a6
               S01:00032E32:  4C DF 7C FC
F00:1004       	rts
               S01:00032E36:  4E 75
F00:1005       c2p1x1_5_c5_030_scroffs ds.l 1
F00:1006       c2p1x1_5_c5_030_pixels ds.l 1
F00:1007       	rts
               S01:00032E40:  4E 75
F00:1008       	; ***********  Defining procedure : CookieCut
F00:1009       	;    Procedure type : User-defined procedure
F00:1010       	jmp block36
               S01:00032E42:  60 10
F00:1011       cc_src	dc.l	0
               S01:00032E44:  00 00 00 00
F00:1012       cc_dst	dc.l	0
               S01:00032E48:  00 00 00 00
F00:1013       cc_mask	dc.l	0
               S01:00032E4C:  00 00 00 00
F00:1014       cc_size	dc.w	0
               S01:00032E50:  00 00
F00:1015       	 	CNOP 0,4
F00:1016       block36
F00:1017       CookieCut
F00:1018       waitforblitter37
F00:1019       	btst	#14,DMACONR
               S01:00032E54:  08 39 00 0E 00 DF F0 02
F00:1020       	bne.s	waitforblitter37
               S01:00032E5C:  66 F6
F00:1021       	; Poke command
F00:1022       	move.l #$DFF000,a0
               S01:00032E5E:  20 7C 00 DF F0 00
F00:1023       	add.w #$50,a0; cc_mask
               S01:00032E64:  41 E8 00 50
F00:1024       	move.l cc_mask,(a0)
               S01:00032E68:  20 BA FF E2
F00:1025       	
F00:1026       ; //BLTAPT
F00:1027       	; Poke command
F00:1028       	move.l #$DFF000,a0
               S01:00032E6C:  20 7C 00 DF F0 00
F00:1029       	add.w #$4c,a0; cc_src
               S01:00032E72:  41 E8 00 4C
F00:1030       	move.l cc_src,(a0)
               S01:00032E76:  20 BA FF CC
F00:1031       	
F00:1032       ; //BLTBPT
F00:1033       	; Poke command
F00:1034       	move.l #$DFF000,a0
               S01:00032E7A:  20 7C 00 DF F0 00
F00:1035       	add.w #$48,a0; cc_dst
               S01:00032E80:  41 E8 00 48
F00:1036       	move.l cc_dst,(a0)
               S01:00032E84:  20 BA FF C2
F00:1037       	
F00:1038       ; //BLTCPT	
F00:1039       	; Poke command
F00:1040       	move.l #$DFF000,a0
               S01:00032E88:  20 7C 00 DF F0 00
F00:1041       	add.w #$54,a0; cc_dst
               S01:00032E8E:  41 E8 00 54
F00:1042       	move.l cc_dst,(a0)
               S01:00032E92:  20 BA FF B4
F00:1043       	
F00:1044       ; //BLTDPT		
F00:1045       	; Poke command
F00:1046       	move.l #$DFF000,a0
               S01:00032E96:  20 7C 00 DF F0 00
F00:1047       	add.w #$40,a0; #$FCA
               S01:00032E9C:  41 E8 00 40
F00:1048       	move.w #$FCA,(a0)
               S01:00032EA0:  30 BC 0F CA
F00:1049       	
F00:1050       ; //BLTCON0	
F00:1051       	; Poke command
F00:1052       	move.l #$DFF000,a0
               S01:00032EA4:  20 7C 00 DF F0 00
F00:1053       	add.w #$58,a0; cc_size
               S01:00032EAA:  41 E8 00 58
F00:1054       	move.w cc_size,(a0)
               S01:00032EAE:  30 BA FF A0
F00:1055       	rts
               S01:00032EB2:  4E 75
F00:1056       	
F00:1057       ; //BLTSIZE*
F00:1058       ; ///All Channels / Cookie Cut
F00:1059       	; ***********  Defining procedure : DistortCopperLine
F00:1060       	;    Procedure type : User-defined procedure
F00:1061       DistortCopperLine
F00:1062       	moveq.l #0,d1
               S01:00032EB4:  72 00
F00:1063       	move.w i,d1          ; Loadvar regular end
               S01:00032EB6:  32 3A F3 1C
F00:1064       	moveq.l #0,d2
               S01:00032EBA:  74 00
F00:1065       	move.w  row,d2 
               S01:00032EBC:  34 3A F7 2E
F00:1066       	; Array is integer, so multiply with 2
F00:1067       	add.w d1,d1
               S01:00032EC0:  D2 41
F00:1068       	lea sine4Copper,a0             ; LoadVariable:: is array
               S01:00032EC2:  41 FA F3 28
F00:1069       	move.w (a0,d1),d0             ; LoadVariable:: is array
               S01:00032EC6:  30 30 10 00
F00:1070       	; Store variable : current
F00:1071       	lsr.w #$8,d0 ; Optimization: simple A := A op Const MUL DIV SHR etc
               S01:00032ECA:  E0 48
F00:1072       	cmp.w #$1,d0
               S01:00032ECC:  B0 7C 00 01
F00:1073       	bls c_eblock39
               S01:00032ED0:  63 20
F00:1074       c_ctb38: ;Main true block ;keep 
F00:1075       	move.l d6,(a5)+
               S01:00032ED2:  2A C6
F00:1076       	move.l d5,(a5)+
               S01:00032ED4:  2A C5
F00:1077       	cmp.w d7,d2
               S01:00032ED6:  B4 47
F00:1078       	bne c_edblock91
               S01:00032ED8:  66 02
F00:1079       c_ctb89: ;Main true block ;keep 
F00:1080       	move.l a3,(a5)+
               S01:00032EDA:  2A CB
F00:1081       c_edblock91
F00:1082       	add.w #$100,d2 ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00032EDC:  D4 7C 01 00
F00:1083       	move.w d2,(a5)+
               S01:00032EE0:  3A C2
F00:1084       	move.w #$fffe,(a5)+
               S01:00032EE2:  3A FC FF FE
F00:1085       	move.l d4,(a5)+
               S01:00032EE6:  2A C4
F00:1086       	move.l d3,(a5)+
               S01:00032EE8:  2A C3
F00:1087       	cmp.w d7,d2
               S01:00032EEA:  B4 47
F00:1088       	bne c_edblock97
               S01:00032EEC:  66 02
F00:1089       c_ctb95: ;Main true block ;keep 
F00:1090       	move.l a3,(a5)+
               S01:00032EEE:  2A CB
F00:1091       c_edblock97
F00:1092       	bra.s c_edblock40
               S01:00032EF0:  60 22
F00:1093       c_eblock39
F00:1094       	cmp.w #$0,d0
               S01:00032EF2:  4A 40
F00:1095       	bls c_eblock103
               S01:00032EF4:  63 14
F00:1096       c_ctb102: ;Main true block ;keep 
F00:1097       	move.l d6,(a5)+
               S01:00032EF6:  2A C6
F00:1098       	move.l d5,(a5)+
               S01:00032EF8:  2A C5
F00:1099       	cmp.w d7,d2
               S01:00032EFA:  B4 47
F00:1100       	bne c_edblock123
               S01:00032EFC:  66 02
F00:1101       c_ctb121: ;Main true block ;keep 
F00:1102       	move.l a3,(a5)+
               S01:00032EFE:  2A CB
F00:1103       c_edblock123
F00:1104       	move.w #$0,curbplmod ; Simple a:=b optimization 
               S01:00032F00:  33 FC 00 00 00 03 21 DE [R]
F00:1105       	bra.s c_edblock104
               S01:00032F08:  60 0A
F00:1106       c_eblock103
F00:1107       	move.l a6,(a5)+
               S01:00032F0A:  2A CE
F00:1108       	move.l a4,(a5)+
               S01:00032F0C:  2A CC
F00:1109       	cmp.w d7,d2
               S01:00032F0E:  B4 47
F00:1110       	bne c_edblock130
               S01:00032F10:  66 02
F00:1111       c_ctb128: ;Main true block ;keep 
F00:1112       	move.l a3,(a5)+
               S01:00032F12:  2A CB
F00:1113       c_edblock130
F00:1114       c_edblock104
F00:1115       c_edblock40
F00:1116       	cmp.w #$fe,i
               S01:00032F14:  0C 79 00 FE 00 03 21 D4 [R]
F00:1117       	bhs c_eblock135
               S01:00032F1C:  64 08
F00:1118       c_ctb134: ;Main true block ;keep 
F00:1119       	add.w #$1,i ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00032F1E:  52 79 00 03 21 D4 [R]
F00:1120       	bra.s c_edblock136
               S01:00032F24:  60 08
F00:1121       c_eblock135
F00:1122       	move.w #$0,i ; Simple a:=b optimization 
               S01:00032F26:  33 FC 00 00 00 03 21 D4 [R]
F00:1123       c_edblock136
F00:1124       	move.w d2,row
               S01:00032F2E:  33 C2 00 03 25 EC [R]
F00:1125       	rts
               S01:00032F34:  4E 75
F00:1126       	
F00:1127       	rts
               S01:00032F36:  4E 75
F00:1128       	; ***********  Defining procedure : ColorCycle
F00:1129       	;    Procedure type : User-defined procedure
F00:1130       ColorCycle
F00:1131       	move.w #$1,colorcycled ; Simple a:=b optimization 
               S01:00032F38:  33 FC 00 01 00 00 A0 BA [R]
F00:1132       	move.l	a5,curcopperpos
               S01:00032F40:  23 CD 00 00 A0 BC [R]
F00:1133       	
F00:1134       	move.w #$1f,d0
               S01:00032F46:  30 3C 00 1F
F00:1135       	move.l #image_palette_cycled,a0
               S01:00032F4A:  41 FA F2 00
F00:1136       	move.l curcopperpos,a1
               S01:00032F4E:  22 79 00 00 A0 BC [R]
F00:1137       memcpy40
F00:1138       	move.l (a0)+,(a1)+
               S01:00032F54:  22 D8
F00:1139       	dbf d0,memcpy40
               S01:00032F56:  51 C8 FF FC
F00:1140       	add.l #128,a5
               S01:00032F5A:  4B ED 00 80
F00:1141       	
F00:1142       	rts
               S01:00032F5E:  4E 75
F00:1143       	; ***********  Defining procedure : ColorCycleRestore
F00:1144       	;    Procedure type : User-defined procedure
F00:1145       ColorCycleRestore
F00:1146       	move.w #$2,colorcycled ; Simple a:=b optimization 
               S01:00032F60:  33 FC 00 02 00 00 A0 BA [R]
F00:1147       	move.l	a5,curcopperpos
               S01:00032F68:  23 CD 00 00 A0 BC [R]
F00:1148       	
F00:1149       	move.w #$1f,d0
               S01:00032F6E:  30 3C 00 1F
F00:1150       	move.l #image_palette,a1
               S01:00032F72:  43 FA F1 58
F00:1151       	move.l curcopperpos,a0
               S01:00032F76:  20 79 00 00 A0 BC [R]
F00:1152       memcpy42
F00:1153       	move.l (a1)+,(a0)+
               S01:00032F7C:  20 D9
F00:1154       	dbf d0,memcpy42
               S01:00032F7E:  51 C8 FF FC
F00:1155       	add.l #128,a5
               S01:00032F82:  4B ED 00 80
F00:1156       	
F00:1157       	rts
               S01:00032F86:  4E 75
F00:1158       	; ***********  Defining procedure : CopperEffects
F00:1159       	;    Procedure type : User-defined procedure
F00:1160       CopperEffects
F00:1161       	move.w istart,i ; Simple a:=b optimization 
               S01:00032F88:  33 FA F2 56 00 03 21 D4 [R]
F00:1162       	move.w #$2c01,row ; Simple a:=b optimization 
               S01:00032F90:  33 FC 2C 01 00 03 25 EC [R]
F00:1163       		moveq.l #0,d7
               S01:00032F98:  7E 00
F00:1164       		move.w #$ff01,d7	
               S01:00032F9A:  3E 3C FF 01
F00:1165       		move.l #$1080000,d6
               S01:00032F9E:  2C 3C 01 08 00 00
F00:1166       		move.l #$10a0000,d5
               S01:00032FA4:  2A 3C 01 0A 00 00
F00:1167       		move.l #$108ffd8,d4
               S01:00032FAA:  28 3C 01 08 FF D8
F00:1168       		move.l #$10affd8,d3
               S01:00032FB0:  26 3C 01 0A FF D8
F00:1169       		move.l #$1080028,a6
               S01:00032FB6:  2C 7C 01 08 00 28
F00:1170       		move.l #$10a0028,a4
               S01:00032FBC:  28 7C 01 0A 00 28
F00:1171       		move.l #$ffdffffe,a3
               S01:00032FC2:  26 7C FF DF FF FE
F00:1172       	
F00:1173       	lea copper_custom,a5
               S01:00032FC8:  4B F9 00 00 01 1C [R]
F00:1174       while44
F00:1175       loopstart48
F00:1176       	move.w lightypos,d1          ; Loadvar regular end
               S01:00032FCE:  32 39 00 00 A0 C0 [R]
F00:1177       	move.w row,d0
               S01:00032FD4:  30 3A F6 16
F00:1178       	cmp.w d1,d0
               S01:00032FD8:  B0 41
F00:1179       	bhi edblock47
               S01:00032FDA:  62 1E
F00:1180       ctb45: ;Main true block ;keep 
F00:1181       	move.w row,(a5)+
               S01:00032FDC:  3A FA F6 0E
F00:1182       	move.w #$fffe,(a5)+
               S01:00032FE0:  3A FC FF FE
F00:1183       	cmp.w #$0,beerinput
               S01:00032FE4:  4A 79 00 03 21 DC [R]
F00:1184       	bls edblock61
               S01:00032FEA:  63 04
F00:1185       ctb59: ;Main true block ;keep 
F00:1186       	jsr DistortCopperLine
               S01:00032FEC:  61 00 FE C6
F00:1187       edblock61
F00:1188       	add.w #$100,row ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00032FF0:  06 79 01 00 00 03 25 EC [R]
F00:1189       	jmp while44
               S01:00032FF8:  60 D4
F00:1190       edblock47
F00:1191       loopend49
F00:1192       	cmp.w #$6,effectNumber
               S01:00032FFA:  0C 79 00 06 00 03 21 E2 [R]
F00:1193       	bne edblock67
               S01:00033002:  66 20
F00:1194       ctb65: ;Main true block ;keep 
F00:1195       	move.w row,(a5)+
               S01:00033004:  3A FA F5 E6
F00:1196       	move.w #$fffe,(a5)+
               S01:00033008:  3A FC FF FE
F00:1197       	cmp.w #$0,beerinput
               S01:0003300C:  4A 79 00 03 21 DC [R]
F00:1198       	bls edblock79
               S01:00033012:  63 04
F00:1199       ctb77: ;Main true block ;keep 
F00:1200       	jsr DistortCopperLine
               S01:00033014:  61 00 FE 9E
F00:1201       edblock79
F00:1202       	jsr ColorCycle
               S01:00033018:  61 00 FF 1E
F00:1203       	add.w #$100,row ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0003301C:  06 79 01 00 00 03 25 EC [R]
F00:1204       edblock67
F00:1205       while82
F00:1206       loopstart86
F00:1207       	; Swapped comparison expressions
F00:1208       	moveq #0,d0
               S01:00033024:  70 00
F00:1209       	move.w lightypos,d0     ; BOP move
               S01:00033026:  30 39 00 00 A0 C0 [R]
F00:1210       	add.w #$1000,d0 ; simple bop
               S01:0003302C:  D0 7C 10 00
F00:1211       	cmp.w row,d0
               S01:00033030:  B0 7A F5 BA
F00:1212       	blo edblock85
               S01:00033034:  65 1E
F00:1213       ctb83: ;Main true block ;keep 
F00:1214       	move.w row,(a5)+
               S01:00033036:  3A FA F5 B4
F00:1215       	move.w #$fffe,(a5)+
               S01:0003303A:  3A FC FF FE
F00:1216       	cmp.w #$0,beerinput
               S01:0003303E:  4A 79 00 03 21 DC [R]
F00:1217       	bls edblock99
               S01:00033044:  63 04
F00:1218       ctb97: ;Main true block ;keep 
F00:1219       	jsr DistortCopperLine
               S01:00033046:  61 00 FE 6C
F00:1220       edblock99
F00:1221       	add.w #$100,row ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0003304A:  06 79 01 00 00 03 25 EC [R]
F00:1222       	jmp while82
               S01:00033052:  60 D0
F00:1223       edblock85
F00:1224       loopend87
F00:1225       	cmp.w #$6,effectNumber
               S01:00033054:  0C 79 00 06 00 03 21 E2 [R]
F00:1226       	bne edblock105
               S01:0003305C:  66 20
F00:1227       ctb103: ;Main true block ;keep 
F00:1228       	move.w row,(a5)+
               S01:0003305E:  3A FA F5 8C
F00:1229       	move.w #$fffe,(a5)+
               S01:00033062:  3A FC FF FE
F00:1230       	jsr ColorCycleRestore
               S01:00033066:  61 00 FE F8
F00:1231       	cmp.w #$0,beerinput
               S01:0003306A:  4A 79 00 03 21 DC [R]
F00:1232       	bls edblock117
               S01:00033070:  63 04
F00:1233       ctb115: ;Main true block ;keep 
F00:1234       	jsr DistortCopperLine
               S01:00033072:  61 00 FE 40
F00:1235       edblock117
F00:1236       	add.w #$100,row ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00033076:  06 79 01 00 00 03 25 EC [R]
F00:1237       edblock105
F00:1238       while120
F00:1239       loopstart124
F00:1240       	cmp.w #$2c01,row
               S01:0003307E:  0C 79 2C 01 00 03 25 EC [R]
F00:1241       	blo edblock123
               S01:00033086:  65 1E
F00:1242       ctb121: ;Main true block ;keep 
F00:1243       	move.w row,(a5)+
               S01:00033088:  3A FA F5 62
F00:1244       	move.w #$fffe,(a5)+
               S01:0003308C:  3A FC FF FE
F00:1245       	cmp.w #$0,beerinput
               S01:00033090:  4A 79 00 03 21 DC [R]
F00:1246       	bls edblock137
               S01:00033096:  63 04
F00:1247       ctb135: ;Main true block ;keep 
F00:1248       	jsr DistortCopperLine
               S01:00033098:  61 00 FE 1A
F00:1249       edblock137
F00:1250       	add.w #$100,row ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0003309C:  06 79 01 00 00 03 25 EC [R]
F00:1251       	jmp while120
               S01:000330A4:  60 D8
F00:1252       edblock123
F00:1253       loopend125
F00:1254       while140
F00:1255       loopstart144
F00:1256       	cmp.w #$2c01,row
               S01:000330A6:  0C 79 2C 01 00 03 25 EC [R]
F00:1257       	bhs edblock143
               S01:000330AE:  64 1E
F00:1258       ctb141: ;Main true block ;keep 
F00:1259       	move.w row,(a5)+
               S01:000330B0:  3A FA F5 3A
F00:1260       	move.w #$fffe,(a5)+
               S01:000330B4:  3A FC FF FE
F00:1261       	cmp.w #$0,beerinput
               S01:000330B8:  4A 79 00 03 21 DC [R]
F00:1262       	bls edblock157
               S01:000330BE:  63 04
F00:1263       ctb155: ;Main true block ;keep 
F00:1264       	jsr DistortCopperLine
               S01:000330C0:  61 00 FD F2
F00:1265       edblock157
F00:1266       	add.w #$100,row ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000330C4:  06 79 01 00 00 03 25 EC [R]
F00:1267       	jmp while140
               S01:000330CC:  60 D8
F00:1268       edblock143
F00:1269       loopend145
F00:1270       	move.w #$ffff,(a5)+
               S01:000330CE:  3A FC FF FF
F00:1271       	move.w #$fffe,(a5)+
               S01:000330D2:  3A FC FF FE
F00:1272       	cmp.w #$ff,istart
               S01:000330D6:  0C 79 00 FF 00 03 21 E0 [R]
F00:1273       	bhs eblock162
               S01:000330DE:  64 08
F00:1274       ctb161: ;Main true block ;keep 
F00:1275       	add.w #$1,istart ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000330E0:  52 79 00 03 21 E0 [R]
F00:1276       	jmp edblock163
               S01:000330E6:  60 08
F00:1277       eblock162
F00:1278       	move.w #$0,istart ; Simple a:=b optimization 
               S01:000330E8:  33 FC 00 00 00 03 21 E0 [R]
F00:1279       edblock163
F00:1280       	rts
               S01:000330F0:  4E 75
F00:1281       	
F00:1282       ; //Poke16(#$dff180,0,$000);			
F00:1283       	; ***********  Defining procedure : DistortMore
F00:1284       	;    Procedure type : User-defined procedure
F00:1285       DistortMore
F00:1286       	move.w #$0,i ; Simple a:=b optimization 
               S01:000330F2:  33 FC 00 00 00 03 21 D4 [R]
F00:1287       forloop169
F00:1288       	moveq #0,d0
               S01:000330FA:  70 00
F00:1289       	move.l #0,d2
               S01:000330FC:  74 00
F00:1290       	move.w i,d2          ; Loadvar regular end
               S01:000330FE:  34 3A F0 D4
F00:1291       	; Array is integer, so multiply with 2
F00:1292       	lsl #1,d2
               S01:00033102:  E3 4A
F00:1293       	lea sine4Copper,a0             ; LoadVariable:: is array
               S01:00033104:  41 FA F0 E6
F00:1294       	move.w (a0,d2),d1             ; LoadVariable:: is array
               S01:00033108:  32 30 20 00
F00:1295       	move.w d1,d0     ; BOP move
               S01:0003310C:  30 01
F00:1296       	move.l #0,d2
               S01:0003310E:  74 00
F00:1297       	move.w i,d2          ; Loadvar regular end
               S01:00033110:  34 3A F0 C2
F00:1298       	; Array is integer, so multiply with 2
F00:1299       	lsl #1,d2
               S01:00033114:  E3 4A
F00:1300       	lea sine4CopperAdd,a0             ; LoadVariable:: is array
               S01:00033116:  41 FA F2 D4
F00:1301       	move.w (a0,d2),d1             ; LoadVariable:: is array
               S01:0003311A:  32 30 20 00
F00:1302       	add.w d1,d0 ; simple bop
               S01:0003311E:  D0 41
F00:1303       	; Store variable : sine4Copper
F00:1304       	move.w i,d2          ; Loadvar regular end
               S01:00033120:  34 3A F0 B2
F00:1305       	lsl #1,d2
               S01:00033124:  E3 4A
F00:1306       	lea sine4Copper,a0
               S01:00033126:  41 FA F0 C4
F00:1307       	move.w d0,(a0,d2)
               S01:0003312A:  31 80 20 00
F00:1308       loopstart170
F00:1309       	; Create increasecounter
F00:1310       	add.w #$1,i ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0003312E:  52 79 00 03 21 D4 [R]
F00:1311       	; end increasecounter
F00:1312       	move #$ff,d0
               S01:00033134:  30 3C 00 FF
F00:1313       	cmp.w i,d0
               S01:00033138:  B0 7A F0 9A
F00:1314       	bne forloop169
               S01:0003313C:  66 BC
F00:1315       loopend171
F00:1316       	rts
               S01:0003313E:  4E 75
F00:1317       	; ***********  Defining procedure : BeerFoam
F00:1318       	;    Procedure type : User-defined procedure
F00:1319       	jmp block174
               S01:00033140:  60 0A
F00:1320       bf_dstimage	dc.l	0
               S01:00033142:  00 00 00 00
F00:1321       foamsize	dc.w	0
               S01:00033146:  00 00
F00:1322       foampos	dc.w	0
               S01:00033148:  00 00
F00:1323       	 	CNOP 0,4
F00:1324       block174
F00:1325       BeerFoam
F00:1326       	
F00:1327       ; //ablit description:	
F00:1328       ; // - SrcImage 
F00:1329       ; // - DstImage
F00:1330       ; // - SrcShiftBytes: Start Byte to Blit From
F00:1331       ; // - XOffset: X Offset in Bytes (8 Pixel) to Blit To
F00:1332       ; // - YOffset: YOffset to Blit to
F00:1333       ; // - BlitWidth: With in Bytes of the Blit
F00:1334       ; // - BlitSize: Complete Size of the Blit
F00:1335       ; // - BlitAmod
F00:1336       ; // - BlitDmod
F00:1337       ; // - BlitB + BlitCmod
F00:1338       ; // - Channels and Minterm
F00:1339       	move.l #imageFoam,srcimage ; Simple a:=b optimization 
               S01:0003314C:  23 FC 00 05 F2 1C 00 03 21 E8 [R]
F00:1340       	move.l #imageMask,imagemask ; Simple a:=b optimization 
               S01:00033156:  23 FC 00 05 F6 90 00 03 21 E4 [R]
F00:1341       	moveq #0,d0
               S01:00033160:  70 00
F00:1342       	move.l imagemask,d0     ; BOP move
               S01:00033162:  20 3A F0 80
F00:1343       	moveq #0,d1
               S01:00033166:  72 00
F00:1344       	move.w #$c,d1     ; BOP move
               S01:00033168:  32 3C 00 0C
F00:1345       	; LHS is byte, so initiate advanced op
F00:1346       	; is advanced bop
F00:1347       	moveq #0,d3
               S01:0003316C:  76 00
F00:1348       	move.w foampos,d3     ; BOP move
               S01:0003316E:  36 3A FF D8
F00:1349       	sub.w #$3e,d3 ; simple bop
               S01:00033172:  96 7C 00 3E
F00:1350       	; Reset register
F00:1351       	moveq #0,d2
               S01:00033176:  74 00
F00:1352       	move.w d3,d2     ; Advanced movee
               S01:00033178:  34 03
F00:1353       	mulu.w d2,d1
               S01:0003317A:  C2 C2
F00:1354       	add.l d1,d0 ; simple bop
               S01:0003317C:  D0 81
F00:1355       	; Store variable : imagemask
F00:1356       	move.l d0,imagemask
               S01:0003317E:  23 C0 00 03 21 E4 [R]
F00:1357       	moveq #0,d0
               S01:00033184:  70 00
F00:1358       	moveq #0,d1
               S01:00033186:  72 00
F00:1359       	move.l bf_dstimage,d1     ; BOP move
               S01:00033188:  22 3A FF B8
F00:1360       	add.l #$e,d1 ; simple bop
               S01:0003318C:  D2 BC 00 00 00 0E
F00:1361       	move.l d1,d0     ; BOP move
               S01:00033192:  20 01
F00:1362       	moveq #0,d1
               S01:00033194:  72 00
F00:1363       	move.w foampos,d1     ; BOP move
               S01:00033196:  32 3A FF B0
F00:1364       	; ORG TYPE of foampos INTEGER
F00:1365       	; LHS is byte, so initiate advanced op
F00:1366       	; is advanced bop
F00:1367       	; Reset register
F00:1368       	moveq #0,d2
               S01:0003319A:  74 00
F00:1369       	move.w #$28,d2     ; Advanced movee
               S01:0003319C:  34 3C 00 28
F00:1370       	mulu.w d2,d1
               S01:000331A0:  C2 C2
F00:1371       	add.l d1,d0 ; simple bop
               S01:000331A2:  D0 81
F00:1372       	; Store variable : bf_dstimage
F00:1373       	move.l d0,bf_dstimage
               S01:000331A4:  23 C0 00 03 31 42 [R]
F00:1374       waitforblitter175
F00:1375       	btst	#14,DMACONR
               S01:000331AA:  08 39 00 0E 00 DF F0 02
F00:1376       	bne.s	waitforblitter175
               S01:000331B2:  66 F6
F00:1377       	; Poke command
F00:1378       	move.l #$DFF000,a0
               S01:000331B4:  20 7C 00 DF F0 00
F00:1379       	add.w #$44,a0; #$FFFFFFFF
               S01:000331BA:  41 E8 00 44
F00:1380       	move.l #$FFFFFFFF,(a0)
               S01:000331BE:  20 BC FF FF FF FF
F00:1381       	
F00:1382       ; //BltAfwm+BltAlwm
F00:1383       	; Poke command
F00:1384       	move.l #$DFF000,a0
               S01:000331C4:  20 7C 00 DF F0 00
F00:1385       	add.w #$60,a0; #$1c
               S01:000331CA:  41 E8 00 60
F00:1386       	move.w #$1c,(a0)
               S01:000331CE:  30 BC 00 1C
F00:1387       	
F00:1388       ; //BLTCMOD
F00:1389       	; Poke command
F00:1390       	move.l #$DFF000,a0
               S01:000331D2:  20 7C 00 DF F0 00
F00:1391       	add.w #$62,a0; #$0
               S01:000331D8:  41 E8 00 62
F00:1392       	move.w #$0,(a0)
               S01:000331DC:  30 BC 00 00
F00:1393       	
F00:1394       ; //BLTBMOD
F00:1395       	; Poke command
F00:1396       	move.l #$DFF000,a0
               S01:000331E0:  20 7C 00 DF F0 00
F00:1397       	add.w #$64,a0; #$0
               S01:000331E6:  41 E8 00 64
F00:1398       	move.w #$0,(a0)
               S01:000331EA:  30 BC 00 00
F00:1399       	
F00:1400       ; //BLTAMOD
F00:1401       	; Poke command
F00:1402       	move.l #$DFF000,a0
               S01:000331EE:  20 7C 00 DF F0 00
F00:1403       	add.w #$66,a0; #$1c
               S01:000331F4:  41 E8 00 66
F00:1404       	move.w #$1c,(a0)
               S01:000331F8:  30 BC 00 1C
F00:1405       	
F00:1406       ; //BLTDMOD		
F00:1407       	; Poke command
F00:1408       	move.l #$DFF000,a0
               S01:000331FC:  20 7C 00 DF F0 00
F00:1409       	add.w #$42,a0; #$0
               S01:00033202:  41 E8 00 42
F00:1410       	move.w #$0,(a0)
               S01:00033206:  30 BC 00 00
F00:1411       	
F00:1412       ; //BLTCON1		
F00:1413       	moveq #0,d0
               S01:0003320A:  70 00
F00:1414       	moveq #0,d1
               S01:0003320C:  72 00
F00:1415       	move.w foamsize,d1     ; BOP move
               S01:0003320E:  32 3A FF 36
F00:1416       	lsl.w #$6,d1 ; simple bop
               S01:00033212:  ED 49
F00:1417       	move.w d1,d0     ; BOP move
               S01:00033214:  30 01
F00:1418       	add.w #$6,d0 ; simple bop
               S01:00033216:  5C 40
F00:1419       	; Store variable : bltsize
F00:1420       	move.w d0,bltsize
               S01:00033218:  33 C0 00 03 21 D6 [R]
F00:1421       	move.l srcimage,cc_src ; Simple a:=b optimization 
               S01:0003321E:  23 FA EF C8 00 03 2E 44 [R]
F00:1422       	move.l bf_dstimage,cc_dst ; Simple a:=b optimization 
               S01:00033226:  23 FA FF 1A 00 03 2E 48 [R]
F00:1423       	move.l imagemask,cc_mask ; Simple a:=b optimization 
               S01:0003322E:  23 FA EF B4 00 03 2E 4C [R]
F00:1424       	move.w bltsize,cc_size ; Simple a:=b optimization 
               S01:00033236:  33 FA EF 9E 00 03 2E 50 [R]
F00:1425       	jsr CookieCut
               S01:0003323E:  61 00 FC 14
F00:1426       	add.l #$e4,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00033242:  06 B9 00 00 00 E4 00 03 21 E8 [R]
F00:1427       	add.l #$57d0,bf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0003324C:  06 B9 00 00 57 D0 00 03 31 42 [R]
F00:1428       	move.l srcimage,cc_src ; Simple a:=b optimization 
               S01:00033256:  23 FA EF 90 00 03 2E 44 [R]
F00:1429       	move.l bf_dstimage,cc_dst ; Simple a:=b optimization 
               S01:0003325E:  23 FA FE E2 00 03 2E 48 [R]
F00:1430       	move.l imagemask,cc_mask ; Simple a:=b optimization 
               S01:00033266:  23 FA EF 7C 00 03 2E 4C [R]
F00:1431       	move.w bltsize,cc_size ; Simple a:=b optimization 
               S01:0003326E:  33 FA EF 66 00 03 2E 50 [R]
F00:1432       	jsr CookieCut
               S01:00033276:  61 00 FB DC
F00:1433       	add.l #$e4,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0003327A:  06 B9 00 00 00 E4 00 03 21 E8 [R]
F00:1434       	add.l #$57d0,bf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00033284:  06 B9 00 00 57 D0 00 03 31 42 [R]
F00:1435       	move.l srcimage,cc_src ; Simple a:=b optimization 
               S01:0003328E:  23 FA EF 58 00 03 2E 44 [R]
F00:1436       	move.l bf_dstimage,cc_dst ; Simple a:=b optimization 
               S01:00033296:  23 FA FE AA 00 03 2E 48 [R]
F00:1437       	move.l imagemask,cc_mask ; Simple a:=b optimization 
               S01:0003329E:  23 FA EF 44 00 03 2E 4C [R]
F00:1438       	move.w bltsize,cc_size ; Simple a:=b optimization 
               S01:000332A6:  33 FA EF 2E 00 03 2E 50 [R]
F00:1439       	jsr CookieCut
               S01:000332AE:  61 00 FB A4
F00:1440       	add.l #$e4,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000332B2:  06 B9 00 00 00 E4 00 03 21 E8 [R]
F00:1441       	add.l #$57d0,bf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000332BC:  06 B9 00 00 57 D0 00 03 31 42 [R]
F00:1442       	move.l srcimage,cc_src ; Simple a:=b optimization 
               S01:000332C6:  23 FA EF 20 00 03 2E 44 [R]
F00:1443       	move.l bf_dstimage,cc_dst ; Simple a:=b optimization 
               S01:000332CE:  23 FA FE 72 00 03 2E 48 [R]
F00:1444       	move.l imagemask,cc_mask ; Simple a:=b optimization 
               S01:000332D6:  23 FA EF 0C 00 03 2E 4C [R]
F00:1445       	move.w bltsize,cc_size ; Simple a:=b optimization 
               S01:000332DE:  33 FA EE F6 00 03 2E 50 [R]
F00:1446       	jsr CookieCut
               S01:000332E6:  61 00 FB 6C
F00:1447       	add.l #$e4,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000332EA:  06 B9 00 00 00 E4 00 03 21 E8 [R]
F00:1448       	add.l #$57d0,bf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000332F4:  06 B9 00 00 57 D0 00 03 31 42 [R]
F00:1449       	move.l srcimage,cc_src ; Simple a:=b optimization 
               S01:000332FE:  23 FA EE E8 00 03 2E 44 [R]
F00:1450       	move.l bf_dstimage,cc_dst ; Simple a:=b optimization 
               S01:00033306:  23 FA FE 3A 00 03 2E 48 [R]
F00:1451       	move.l imagemask,cc_mask ; Simple a:=b optimization 
               S01:0003330E:  23 FA EE D4 00 03 2E 4C [R]
F00:1452       	move.w bltsize,cc_size ; Simple a:=b optimization 
               S01:00033316:  33 FA EE BE 00 03 2E 50 [R]
F00:1453       	jsr CookieCut
               S01:0003331E:  61 00 FB 34
F00:1454       	rts
               S01:00033322:  4E 75
F00:1455       	; ***********  Defining procedure : FillDrinkBeer
F00:1456       	;    Procedure type : User-defined procedure
F00:1457       	jmp block176
               S01:00033324:  60 0E
F00:1458       dstimage dc.l 0
               S01:00033326:  00 00 00 00
F00:1459       yoffset	dc.w	0
               S01:0003332A:  00 00
F00:1460       fd_srcimage	dc.l	0
               S01:0003332C:  00 00 00 00
F00:1461       fd_srcimageoffset	dc.l	0
               S01:00033330:  00 00 00 00
F00:1462       	 	CNOP 0,4
F00:1463       block176
F00:1464       FillDrinkBeer
F00:1465       	
F00:1466       ; //ablit description:	
F00:1467       ; // - SrcImage 
F00:1468       ; // - DstImage
F00:1469       ; // - SrcShiftBytes: Start Byte to Blit From
F00:1470       ; // - XOffset: X Offset in Bytes (8 Pixel) to Blit To
F00:1471       ; // - YOffset: YOffset to Blit to
F00:1472       ; // - BlitWidth: With in Bytes of the Blit
F00:1473       ; // - BlitSize: Complete Size of the Blit
F00:1474       ; // - BlitAmod
F00:1475       ; // - BlitDmod
F00:1476       ; // - BlitB + BlitCmod
F00:1477       ; // - Channels and Minterm
F00:1478       ; //	fd_srcimage := #imageCupFull;
F00:1479       waitforblitter177
F00:1480       	btst	#14,DMACONR
               S01:00033334:  08 39 00 0E 00 DF F0 02
F00:1481       	bne.s	waitforblitter177
               S01:0003333C:  66 F6
F00:1482       	moveq.l #0,d6
               S01:0003333E:  7C 00
F00:1483       	lea     $dff000,a6 ; Hardware registers
               S01:00033340:  4D F9 00 DF F0 00
F00:1484       	move.l fd_srcimage,a0
               S01:00033346:  20 7A FF E4
F00:1485       	move.l dstimage,a1
               S01:0003334A:  22 7A FF DA
F00:1486       	moveq #0,d0
               S01:0003334E:  70 00
F00:1487       	move.w yoffset,d0     ; BOP move
               S01:00033350:  30 3A FF D8
F00:1488       	; ORG TYPE of yoffset INTEGER
F00:1489       	; LHS is byte, so initiate advanced op
F00:1490       	; is advanced bop
F00:1491       	; Reset register
F00:1492       	moveq #0,d1
               S01:00033354:  72 00
F00:1493       	move.w #$c,d1     ; Advanced movee
               S01:00033356:  32 3C 00 0C
F00:1494       	mulu.w d1,d0
               S01:0003335A:  C0 C1
F00:1495       	move.w d0,d6
               S01:0003335C:  3C 00
F00:1496       	move.w #$e,d1
               S01:0003335E:  32 3C 00 0E
F00:1497       	moveq #0,d0
               S01:00033362:  70 00
F00:1498       	move.w yoffset,d0     ; BOP move
               S01:00033364:  30 3A FF C4
F00:1499       	add.w #$52,d0 ; simple bop
               S01:00033368:  D0 7C 00 52
F00:1500       	move.w d0,d2
               S01:0003336C:  34 00
F00:1501       	move.w #$28,d3
               S01:0003336E:  36 3C 00 28
F00:1502       	move.w #$86,d4
               S01:00033372:  38 3C 00 86
F00:1503       	move.w #$0,BLTAMOD(a6)
               S01:00033376:  3D 7C 00 00 00 64
F00:1504       	move.w #$0,BLTBMOD(a6)
               S01:0003337C:  3D 7C 00 00 00 62
F00:1505       	move.w #$0,BLTCMOD(a6)
               S01:00033382:  3D 7C 00 00 00 60
F00:1506       	move.w #$1c,BLTDMOD(a6)
               S01:00033388:  3D 7C 00 1C 00 66
F00:1507       	move.w #$9f0,d0
               S01:0003338E:  30 3C 09 F0
F00:1508       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:00033392:  3D 7C 00 00 00 42
F00:1509       	jsr blitter
               S01:00033398:  61 00 0D 38
F00:1510       	moveq #0,d0
               S01:0003339C:  70 00
F00:1511       	move.l fd_srcimageoffset,d0     ; BOP move
               S01:0003339E:  20 3A FF 90
F00:1512       	add.l fd_srcimage,d0 ; simple bop
               S01:000333A2:  D0 BA FF 88
F00:1513       	; Store variable : fd_srcimage
F00:1514       	move.l d0,fd_srcimage
               S01:000333A6:  23 C0 00 03 33 2C [R]
F00:1515       	add.l #$57d0,dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000333AC:  06 B9 00 00 57 D0 00 03 33 26 [R]
F00:1516       waitforblitter178
F00:1517       	btst	#14,DMACONR
               S01:000333B6:  08 39 00 0E 00 DF F0 02
F00:1518       	bne.s	waitforblitter178
               S01:000333BE:  66 F6
F00:1519       	moveq.l #0,d6
               S01:000333C0:  7C 00
F00:1520       	lea     $dff000,a6 ; Hardware registers
               S01:000333C2:  4D F9 00 DF F0 00
F00:1521       	move.l fd_srcimage,a0
               S01:000333C8:  20 7A FF 62
F00:1522       	move.l dstimage,a1
               S01:000333CC:  22 7A FF 58
F00:1523       	moveq #0,d0
               S01:000333D0:  70 00
F00:1524       	move.w yoffset,d0     ; BOP move
               S01:000333D2:  30 3A FF 56
F00:1525       	; ORG TYPE of yoffset INTEGER
F00:1526       	; LHS is byte, so initiate advanced op
F00:1527       	; is advanced bop
F00:1528       	; Reset register
F00:1529       	moveq #0,d1
               S01:000333D6:  72 00
F00:1530       	move.w #$c,d1     ; Advanced movee
               S01:000333D8:  32 3C 00 0C
F00:1531       	mulu.w d1,d0
               S01:000333DC:  C0 C1
F00:1532       	move.w d0,d6
               S01:000333DE:  3C 00
F00:1533       	move.w #$e,d1
               S01:000333E0:  32 3C 00 0E
F00:1534       	moveq #0,d0
               S01:000333E4:  70 00
F00:1535       	move.w yoffset,d0     ; BOP move
               S01:000333E6:  30 3A FF 42
F00:1536       	add.w #$52,d0 ; simple bop
               S01:000333EA:  D0 7C 00 52
F00:1537       	move.w d0,d2
               S01:000333EE:  34 00
F00:1538       	move.w #$28,d3
               S01:000333F0:  36 3C 00 28
F00:1539       	move.w #$86,d4
               S01:000333F4:  38 3C 00 86
F00:1540       	move.w #$0,BLTAMOD(a6)
               S01:000333F8:  3D 7C 00 00 00 64
F00:1541       	move.w #$0,BLTBMOD(a6)
               S01:000333FE:  3D 7C 00 00 00 62
F00:1542       	move.w #$0,BLTCMOD(a6)
               S01:00033404:  3D 7C 00 00 00 60
F00:1543       	move.w #$1c,BLTDMOD(a6)
               S01:0003340A:  3D 7C 00 1C 00 66
F00:1544       	move.w #$9f0,d0
               S01:00033410:  30 3C 09 F0
F00:1545       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:00033414:  3D 7C 00 00 00 42
F00:1546       	jsr blitter
               S01:0003341A:  61 00 0C B6
F00:1547       	moveq #0,d0
               S01:0003341E:  70 00
F00:1548       	move.l fd_srcimageoffset,d0     ; BOP move
               S01:00033420:  20 3A FF 0E
F00:1549       	add.l fd_srcimage,d0 ; simple bop
               S01:00033424:  D0 BA FF 06
F00:1550       	; Store variable : fd_srcimage
F00:1551       	move.l d0,fd_srcimage
               S01:00033428:  23 C0 00 03 33 2C [R]
F00:1552       	add.l #$57d0,dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0003342E:  06 B9 00 00 57 D0 00 03 33 26 [R]
F00:1553       waitforblitter179
F00:1554       	btst	#14,DMACONR
               S01:00033438:  08 39 00 0E 00 DF F0 02
F00:1555       	bne.s	waitforblitter179
               S01:00033440:  66 F6
F00:1556       	moveq.l #0,d6
               S01:00033442:  7C 00
F00:1557       	lea     $dff000,a6 ; Hardware registers
               S01:00033444:  4D F9 00 DF F0 00
F00:1558       	move.l fd_srcimage,a0
               S01:0003344A:  20 7A FE E0
F00:1559       	move.l dstimage,a1
               S01:0003344E:  22 7A FE D6
F00:1560       	moveq #0,d0
               S01:00033452:  70 00
F00:1561       	move.w yoffset,d0     ; BOP move
               S01:00033454:  30 3A FE D4
F00:1562       	; ORG TYPE of yoffset INTEGER
F00:1563       	; LHS is byte, so initiate advanced op
F00:1564       	; is advanced bop
F00:1565       	; Reset register
F00:1566       	moveq #0,d1
               S01:00033458:  72 00
F00:1567       	move.w #$c,d1     ; Advanced movee
               S01:0003345A:  32 3C 00 0C
F00:1568       	mulu.w d1,d0
               S01:0003345E:  C0 C1
F00:1569       	move.w d0,d6
               S01:00033460:  3C 00
F00:1570       	move.w #$e,d1
               S01:00033462:  32 3C 00 0E
F00:1571       	moveq #0,d0
               S01:00033466:  70 00
F00:1572       	move.w yoffset,d0     ; BOP move
               S01:00033468:  30 3A FE C0
F00:1573       	add.w #$52,d0 ; simple bop
               S01:0003346C:  D0 7C 00 52
F00:1574       	move.w d0,d2
               S01:00033470:  34 00
F00:1575       	move.w #$28,d3
               S01:00033472:  36 3C 00 28
F00:1576       	move.w #$86,d4
               S01:00033476:  38 3C 00 86
F00:1577       	move.w #$0,BLTAMOD(a6)
               S01:0003347A:  3D 7C 00 00 00 64
F00:1578       	move.w #$0,BLTBMOD(a6)
               S01:00033480:  3D 7C 00 00 00 62
F00:1579       	move.w #$0,BLTCMOD(a6)
               S01:00033486:  3D 7C 00 00 00 60
F00:1580       	move.w #$1c,BLTDMOD(a6)
               S01:0003348C:  3D 7C 00 1C 00 66
F00:1581       	move.w #$9f0,d0
               S01:00033492:  30 3C 09 F0
F00:1582       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:00033496:  3D 7C 00 00 00 42
F00:1583       	jsr blitter
               S01:0003349C:  61 00 0C 34
F00:1584       	moveq #0,d0
               S01:000334A0:  70 00
F00:1585       	move.l fd_srcimageoffset,d0     ; BOP move
               S01:000334A2:  20 3A FE 8C
F00:1586       	add.l fd_srcimage,d0 ; simple bop
               S01:000334A6:  D0 BA FE 84
F00:1587       	; Store variable : fd_srcimage
F00:1588       	move.l d0,fd_srcimage
               S01:000334AA:  23 C0 00 03 33 2C [R]
F00:1589       	add.l #$57d0,dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000334B0:  06 B9 00 00 57 D0 00 03 33 26 [R]
F00:1590       waitforblitter180
F00:1591       	btst	#14,DMACONR
               S01:000334BA:  08 39 00 0E 00 DF F0 02
F00:1592       	bne.s	waitforblitter180
               S01:000334C2:  66 F6
F00:1593       	moveq.l #0,d6
               S01:000334C4:  7C 00
F00:1594       	lea     $dff000,a6 ; Hardware registers
               S01:000334C6:  4D F9 00 DF F0 00
F00:1595       	move.l fd_srcimage,a0
               S01:000334CC:  20 7A FE 5E
F00:1596       	move.l dstimage,a1
               S01:000334D0:  22 7A FE 54
F00:1597       	moveq #0,d0
               S01:000334D4:  70 00
F00:1598       	move.w yoffset,d0     ; BOP move
               S01:000334D6:  30 3A FE 52
F00:1599       	; ORG TYPE of yoffset INTEGER
F00:1600       	; LHS is byte, so initiate advanced op
F00:1601       	; is advanced bop
F00:1602       	; Reset register
F00:1603       	moveq #0,d1
               S01:000334DA:  72 00
F00:1604       	move.w #$c,d1     ; Advanced movee
               S01:000334DC:  32 3C 00 0C
F00:1605       	mulu.w d1,d0
               S01:000334E0:  C0 C1
F00:1606       	move.w d0,d6
               S01:000334E2:  3C 00
F00:1607       	move.w #$e,d1
               S01:000334E4:  32 3C 00 0E
F00:1608       	moveq #0,d0
               S01:000334E8:  70 00
F00:1609       	move.w yoffset,d0     ; BOP move
               S01:000334EA:  30 3A FE 3E
F00:1610       	add.w #$52,d0 ; simple bop
               S01:000334EE:  D0 7C 00 52
F00:1611       	move.w d0,d2
               S01:000334F2:  34 00
F00:1612       	move.w #$28,d3
               S01:000334F4:  36 3C 00 28
F00:1613       	move.w #$86,d4
               S01:000334F8:  38 3C 00 86
F00:1614       	move.w #$0,BLTAMOD(a6)
               S01:000334FC:  3D 7C 00 00 00 64
F00:1615       	move.w #$0,BLTBMOD(a6)
               S01:00033502:  3D 7C 00 00 00 62
F00:1616       	move.w #$0,BLTCMOD(a6)
               S01:00033508:  3D 7C 00 00 00 60
F00:1617       	move.w #$1c,BLTDMOD(a6)
               S01:0003350E:  3D 7C 00 1C 00 66
F00:1618       	move.w #$9f0,d0
               S01:00033514:  30 3C 09 F0
F00:1619       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:00033518:  3D 7C 00 00 00 42
F00:1620       	jsr blitter
               S01:0003351E:  61 00 0B B2
F00:1621       	moveq #0,d0
               S01:00033522:  70 00
F00:1622       	move.l fd_srcimageoffset,d0     ; BOP move
               S01:00033524:  20 3A FE 0A
F00:1623       	add.l fd_srcimage,d0 ; simple bop
               S01:00033528:  D0 BA FE 02
F00:1624       	; Store variable : fd_srcimage
F00:1625       	move.l d0,fd_srcimage
               S01:0003352C:  23 C0 00 03 33 2C [R]
F00:1626       	add.l #$57d0,dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00033532:  06 B9 00 00 57 D0 00 03 33 26 [R]
F00:1627       waitforblitter181
F00:1628       	btst	#14,DMACONR
               S01:0003353C:  08 39 00 0E 00 DF F0 02
F00:1629       	bne.s	waitforblitter181
               S01:00033544:  66 F6
F00:1630       	moveq.l #0,d6
               S01:00033546:  7C 00
F00:1631       	lea     $dff000,a6 ; Hardware registers
               S01:00033548:  4D F9 00 DF F0 00
F00:1632       	move.l fd_srcimage,a0
               S01:0003354E:  20 7A FD DC
F00:1633       	move.l dstimage,a1
               S01:00033552:  22 7A FD D2
F00:1634       	moveq #0,d0
               S01:00033556:  70 00
F00:1635       	move.w yoffset,d0     ; BOP move
               S01:00033558:  30 3A FD D0
F00:1636       	; ORG TYPE of yoffset INTEGER
F00:1637       	; LHS is byte, so initiate advanced op
F00:1638       	; is advanced bop
F00:1639       	; Reset register
F00:1640       	moveq #0,d1
               S01:0003355C:  72 00
F00:1641       	move.w #$c,d1     ; Advanced movee
               S01:0003355E:  32 3C 00 0C
F00:1642       	mulu.w d1,d0
               S01:00033562:  C0 C1
F00:1643       	move.w d0,d6
               S01:00033564:  3C 00
F00:1644       	move.w #$e,d1
               S01:00033566:  32 3C 00 0E
F00:1645       	moveq #0,d0
               S01:0003356A:  70 00
F00:1646       	move.w yoffset,d0     ; BOP move
               S01:0003356C:  30 3A FD BC
F00:1647       	add.w #$52,d0 ; simple bop
               S01:00033570:  D0 7C 00 52
F00:1648       	move.w d0,d2
               S01:00033574:  34 00
F00:1649       	move.w #$28,d3
               S01:00033576:  36 3C 00 28
F00:1650       	move.w #$86,d4
               S01:0003357A:  38 3C 00 86
F00:1651       	move.w #$0,BLTAMOD(a6)
               S01:0003357E:  3D 7C 00 00 00 64
F00:1652       	move.w #$0,BLTBMOD(a6)
               S01:00033584:  3D 7C 00 00 00 62
F00:1653       	move.w #$0,BLTCMOD(a6)
               S01:0003358A:  3D 7C 00 00 00 60
F00:1654       	move.w #$1c,BLTDMOD(a6)
               S01:00033590:  3D 7C 00 1C 00 66
F00:1655       	move.w #$9f0,d0
               S01:00033596:  30 3C 09 F0
F00:1656       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0003359A:  3D 7C 00 00 00 42
F00:1657       	jsr blitter
               S01:000335A0:  61 00 0B 30
F00:1658       	rts
               S01:000335A4:  4E 75
F00:1659       	
F00:1660       ; //	Flips rendering buffer and updates copper list & pointers
F00:1661       ; //
F00:1662       	; ***********  Defining procedure : FlipBuffers
F00:1663       	;    Procedure type : User-defined procedure
F00:1664       FlipBuffers
F00:1665       	cmp.w #$0,curBuf
               S01:000335A6:  4A 79 00 00 A0 B6 [R]
F00:1666       	bne eblock185
               S01:000335AC:  66 3A
F00:1667       ctb184: ;Main true block ;keep 
F00:1668       	move.l #image1,screen ; Simple a:=b optimization 
               S01:000335AE:  23 FC 00 02 62 F0 00 03 21 CC [R]
F00:1669       	moveq #0,d0
               S01:000335B8:  70 00
F00:1670       	move.l screen,d0     ; BOP move
               S01:000335BA:  20 3A EC 10
F00:1671       	add.l screenOffset,d0 ; simple bop
               S01:000335BE:  D0 B9 00 00 A0 C2 [R]
F00:1672       	; Store variable : screen
F00:1673       	move.l d0,screen
               S01:000335C4:  23 C0 00 03 21 CC [R]
F00:1674       	move.l #image2,offscreen ; Simple a:=b optimization 
               S01:000335CA:  23 FC 00 04 1A 00 00 03 21 D0 [R]
F00:1675       	moveq #0,d0
               S01:000335D4:  70 00
F00:1676       	move.l offscreen,d0     ; BOP move
               S01:000335D6:  20 3A EB F8
F00:1677       	add.l screenOffset,d0 ; simple bop
               S01:000335DA:  D0 B9 00 00 A0 C2 [R]
F00:1678       	; Store variable : offscreen
F00:1679       	move.l d0,offscreen
               S01:000335E0:  23 C0 00 03 21 D0 [R]
F00:1680       	jmp edblock186
               S01:000335E6:  60 38
F00:1681       eblock185
F00:1682       	move.l #image2,screen ; Simple a:=b optimization 
               S01:000335E8:  23 FC 00 04 1A 00 00 03 21 CC [R]
F00:1683       	moveq #0,d0
               S01:000335F2:  70 00
F00:1684       	move.l screen,d0     ; BOP move
               S01:000335F4:  20 3A EB D6
F00:1685       	add.l screenOffset,d0 ; simple bop
               S01:000335F8:  D0 B9 00 00 A0 C2 [R]
F00:1686       	; Store variable : screen
F00:1687       	move.l d0,screen
               S01:000335FE:  23 C0 00 03 21 CC [R]
F00:1688       	move.l #image1,offscreen ; Simple a:=b optimization 
               S01:00033604:  23 FC 00 02 62 F0 00 03 21 D0 [R]
F00:1689       	moveq #0,d0
               S01:0003360E:  70 00
F00:1690       	move.l offscreen,d0     ; BOP move
               S01:00033610:  20 3A EB BE
F00:1691       	add.l screenOffset,d0 ; simple bop
               S01:00033614:  D0 B9 00 00 A0 C2 [R]
F00:1692       	; Store variable : offscreen
F00:1693       	move.l d0,offscreen
               S01:0003361A:  23 C0 00 03 21 D0 [R]
F00:1694       edblock186
F00:1695       	; setcopperlist32
F00:1696       	move.l offscreen,a1
               S01:00033620:  22 7A EB AE
F00:1697       	move.l a1,d0
               S01:00033624:  20 09
F00:1698       	move.l #copper_bitplane0,a0
               S01:00033626:  41 F9 00 00 00 E8 [R]
F00:1699       	move.w d0,6(a0)
               S01:0003362C:  31 40 00 06
F00:1700       	swap d0
               S01:00033630:  48 40
F00:1701       	move.w d0,2(a0)
               S01:00033632:  31 40 00 02
F00:1702       	; setcopperlist32
F00:1703       	moveq #0,d1
               S01:00033636:  72 00
F00:1704       	move.l offscreen,d1     ; BOP move
               S01:00033638:  22 3A EB 96
F00:1705       	add.l #$57d0,d1 ; simple bop
               S01:0003363C:  D2 BC 00 00 57 D0
F00:1706       	move.l d1,d0
               S01:00033642:  20 01
F00:1707       	move.l #copper_bitplane1,a0
               S01:00033644:  41 F9 00 00 00 F0 [R]
F00:1708       	move.w d0,6(a0)
               S01:0003364A:  31 40 00 06
F00:1709       	swap d0
               S01:0003364E:  48 40
F00:1710       	move.w d0,2(a0)
               S01:00033650:  31 40 00 02
F00:1711       	; setcopperlist32
F00:1712       	moveq #0,d1
               S01:00033654:  72 00
F00:1713       	move.l offscreen,d1     ; BOP move
               S01:00033656:  22 3A EB 78
F00:1714       	; NodeBinop : both are pure numeric optimization : #$afa0
F00:1715       	add.l #$afa0,d1 ; simple bop
               S01:0003365A:  D2 BC 00 00 AF A0
F00:1716       	move.l d1,d0
               S01:00033660:  20 01
F00:1717       	move.l #copper_bitplane2,a0
               S01:00033662:  41 F9 00 00 00 F8 [R]
F00:1718       	move.w d0,6(a0)
               S01:00033668:  31 40 00 06
F00:1719       	swap d0
               S01:0003366C:  48 40
F00:1720       	move.w d0,2(a0)
               S01:0003366E:  31 40 00 02
F00:1721       	; setcopperlist32
F00:1722       	moveq #0,d1
               S01:00033672:  72 00
F00:1723       	move.l offscreen,d1     ; BOP move
               S01:00033674:  22 3A EB 5A
F00:1724       	; NodeBinop : both are pure numeric optimization : #$10770
F00:1725       	add.l #$10770,d1 ; simple bop
               S01:00033678:  D2 BC 00 01 07 70
F00:1726       	move.l d1,d0
               S01:0003367E:  20 01
F00:1727       	move.l #copper_bitplane3,a0
               S01:00033680:  41 F9 00 00 01 00 [R]
F00:1728       	move.w d0,6(a0)
               S01:00033686:  31 40 00 06
F00:1729       	swap d0
               S01:0003368A:  48 40
F00:1730       	move.w d0,2(a0)
               S01:0003368C:  31 40 00 02
F00:1731       	; setcopperlist32
F00:1732       	moveq #0,d1
               S01:00033690:  72 00
F00:1733       	move.l offscreen,d1     ; BOP move
               S01:00033692:  22 3A EB 3C
F00:1734       	; NodeBinop : both are pure numeric optimization : #$15f40
F00:1735       	add.l #$15f40,d1 ; simple bop
               S01:00033696:  D2 BC 00 01 5F 40
F00:1736       	move.l d1,d0
               S01:0003369C:  20 01
F00:1737       	move.l #copper_bitplane4,a0
               S01:0003369E:  41 F9 00 00 01 08 [R]
F00:1738       	move.w d0,6(a0)
               S01:000336A4:  31 40 00 06
F00:1739       	swap d0
               S01:000336A8:  48 40
F00:1740       	move.w d0,2(a0)
               S01:000336AA:  31 40 00 02
F00:1741       	moveq #0,d0
               S01:000336AE:  70 00
F00:1742       	moveq #0,d1
               S01:000336B0:  72 00
F00:1743       	move.w curBuf,d1     ; BOP move
               S01:000336B2:  32 39 00 00 A0 B6 [R]
F00:1744       	add.w #$1,d1 ; simple bop
               S01:000336B8:  52 41
F00:1745       	move.w d1,d0     ; BOP move
               S01:000336BA:  30 01
F00:1746       	and.w #$1,d0 ; simple bop
               S01:000336BC:  C0 7C 00 01
F00:1747       	; Store variable : curBuf
F00:1748       	move.w d0,curBuf
               S01:000336C0:  33 C0 00 00 A0 B6 [R]
F00:1749       	rts
               S01:000336C6:  4E 75
F00:1750       	; ***********  Defining procedure : RemoveFoam
F00:1751       	;    Procedure type : User-defined procedure
F00:1752       	jmp block191
               S01:000336C8:  60 06
F00:1753       rf_dstimage dc.l 0
               S01:000336CA:  00 00 00 00
F00:1754       rf_yoffset	dc.w	0
               S01:000336CE:  00 00
F00:1755       	 	CNOP 0,4
F00:1756       block191
F00:1757       RemoveFoam
F00:1758       	cmp.w #$94,rf_yoffset
               S01:000336D0:  0C 79 00 94 00 03 36 CE [R]
F00:1759       	bls edblock195
               S01:000336D8:  63 08
F00:1760       ctb193: ;Main true block ;keep 
F00:1761       	
F00:1762       ; //ablit description:	
F00:1763       ; // - SrcImage 
F00:1764       ; // - DstImage
F00:1765       ; // - SrcShiftBytes: Start Byte to Blit From
F00:1766       ; // - XOffset: X Offset in Bytes (8 Pixel) to Blit To
F00:1767       ; // - YOffset: YOffset to Blit to
F00:1768       ; // - BlitWidth: With in Bytes of the Blit
F00:1769       ; // - BlitSize: Complete Size of the Blit
F00:1770       ; // - BlitAmod
F00:1771       ; // - BlitDmod
F00:1772       ; // - BlitB + BlitCmod
F00:1773       ; // - Channels and Minterm
F00:1774       	move.w #$94,rf_yoffset ; Simple a:=b optimization 
               S01:000336DA:  33 FC 00 94 00 03 36 CE [R]
F00:1775       edblock195
F00:1776       	move.l #imageRestoreCup,srcimage ; Simple a:=b optimization 
               S01:000336E2:  23 FC 00 02 3C F8 00 03 21 E8 [R]
F00:1777       waitforblitter198
F00:1778       	btst	#14,DMACONR
               S01:000336EC:  08 39 00 0E 00 DF F0 02
F00:1779       	bne.s	waitforblitter198
               S01:000336F4:  66 F6
F00:1780       	moveq.l #0,d6
               S01:000336F6:  7C 00
F00:1781       	lea     $dff000,a6 ; Hardware registers
               S01:000336F8:  4D F9 00 DF F0 00
F00:1782       	move.l srcimage,a0
               S01:000336FE:  20 7A EA E8
F00:1783       	move.l rf_dstimage,a1
               S01:00033702:  22 7A FF C6
F00:1784       	moveq #0,d0
               S01:00033706:  70 00
F00:1785       	move.w rf_yoffset,d0     ; BOP move
               S01:00033708:  30 3A FF C4
F00:1786       	; ORG TYPE of rf_yoffset INTEGER
F00:1787       	; LHS is byte, so initiate advanced op
F00:1788       	; is advanced bop
F00:1789       	; Reset register
F00:1790       	moveq #0,d1
               S01:0003370C:  72 00
F00:1791       	move.w #$c,d1     ; Advanced movee
               S01:0003370E:  32 3C 00 0C
F00:1792       	mulu.w d1,d0
               S01:00033712:  C0 C1
F00:1793       	move.w d0,d6
               S01:00033714:  3C 00
F00:1794       	move.w #$e,d1
               S01:00033716:  32 3C 00 0E
F00:1795       	moveq #0,d0
               S01:0003371A:  70 00
F00:1796       	move.w rf_yoffset,d0     ; BOP move
               S01:0003371C:  30 3A FF B0
F00:1797       	add.w #$3e,d0 ; simple bop
               S01:00033720:  D0 7C 00 3E
F00:1798       	move.w d0,d2
               S01:00033724:  34 00
F00:1799       	move.w #$28,d3
               S01:00033726:  36 3C 00 28
F00:1800       	move.w #$146,d4
               S01:0003372A:  38 3C 01 46
F00:1801       	move.w #$0,BLTAMOD(a6)
               S01:0003372E:  3D 7C 00 00 00 64
F00:1802       	move.w #$0,BLTBMOD(a6)
               S01:00033734:  3D 7C 00 00 00 62
F00:1803       	move.w #$0,BLTCMOD(a6)
               S01:0003373A:  3D 7C 00 00 00 60
F00:1804       	move.w #$1c,BLTDMOD(a6)
               S01:00033740:  3D 7C 00 1C 00 66
F00:1805       	move.w #$9f0,d0
               S01:00033746:  30 3C 09 F0
F00:1806       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0003374A:  3D 7C 00 00 00 42
F00:1807       	jsr blitter
               S01:00033750:  61 00 09 80
F00:1808       	add.l #$798,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00033754:  06 B9 00 00 07 98 00 03 21 E8 [R]
F00:1809       	add.l #$57d0,rf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0003375E:  06 B9 00 00 57 D0 00 03 36 CA [R]
F00:1810       waitforblitter199
F00:1811       	btst	#14,DMACONR
               S01:00033768:  08 39 00 0E 00 DF F0 02
F00:1812       	bne.s	waitforblitter199
               S01:00033770:  66 F6
F00:1813       	moveq.l #0,d6
               S01:00033772:  7C 00
F00:1814       	lea     $dff000,a6 ; Hardware registers
               S01:00033774:  4D F9 00 DF F0 00
F00:1815       	move.l srcimage,a0
               S01:0003377A:  20 7A EA 6C
F00:1816       	move.l rf_dstimage,a1
               S01:0003377E:  22 7A FF 4A
F00:1817       	moveq #0,d0
               S01:00033782:  70 00
F00:1818       	move.w rf_yoffset,d0     ; BOP move
               S01:00033784:  30 3A FF 48
F00:1819       	; ORG TYPE of rf_yoffset INTEGER
F00:1820       	; LHS is byte, so initiate advanced op
F00:1821       	; is advanced bop
F00:1822       	; Reset register
F00:1823       	moveq #0,d1
               S01:00033788:  72 00
F00:1824       	move.w #$c,d1     ; Advanced movee
               S01:0003378A:  32 3C 00 0C
F00:1825       	mulu.w d1,d0
               S01:0003378E:  C0 C1
F00:1826       	move.w d0,d6
               S01:00033790:  3C 00
F00:1827       	move.w #$e,d1
               S01:00033792:  32 3C 00 0E
F00:1828       	moveq #0,d0
               S01:00033796:  70 00
F00:1829       	move.w rf_yoffset,d0     ; BOP move
               S01:00033798:  30 3A FF 34
F00:1830       	add.w #$3e,d0 ; simple bop
               S01:0003379C:  D0 7C 00 3E
F00:1831       	move.w d0,d2
               S01:000337A0:  34 00
F00:1832       	move.w #$28,d3
               S01:000337A2:  36 3C 00 28
F00:1833       	move.w #$146,d4
               S01:000337A6:  38 3C 01 46
F00:1834       	move.w #$0,BLTAMOD(a6)
               S01:000337AA:  3D 7C 00 00 00 64
F00:1835       	move.w #$0,BLTBMOD(a6)
               S01:000337B0:  3D 7C 00 00 00 62
F00:1836       	move.w #$0,BLTCMOD(a6)
               S01:000337B6:  3D 7C 00 00 00 60
F00:1837       	move.w #$1c,BLTDMOD(a6)
               S01:000337BC:  3D 7C 00 1C 00 66
F00:1838       	move.w #$9f0,d0
               S01:000337C2:  30 3C 09 F0
F00:1839       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:000337C6:  3D 7C 00 00 00 42
F00:1840       	jsr blitter
               S01:000337CC:  61 00 09 04
F00:1841       	add.l #$798,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000337D0:  06 B9 00 00 07 98 00 03 21 E8 [R]
F00:1842       	add.l #$57d0,rf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000337DA:  06 B9 00 00 57 D0 00 03 36 CA [R]
F00:1843       waitforblitter200
F00:1844       	btst	#14,DMACONR
               S01:000337E4:  08 39 00 0E 00 DF F0 02
F00:1845       	bne.s	waitforblitter200
               S01:000337EC:  66 F6
F00:1846       	moveq.l #0,d6
               S01:000337EE:  7C 00
F00:1847       	lea     $dff000,a6 ; Hardware registers
               S01:000337F0:  4D F9 00 DF F0 00
F00:1848       	move.l srcimage,a0
               S01:000337F6:  20 7A E9 F0
F00:1849       	move.l rf_dstimage,a1
               S01:000337FA:  22 7A FE CE
F00:1850       	moveq #0,d0
               S01:000337FE:  70 00
F00:1851       	move.w rf_yoffset,d0     ; BOP move
               S01:00033800:  30 3A FE CC
F00:1852       	; ORG TYPE of rf_yoffset INTEGER
F00:1853       	; LHS is byte, so initiate advanced op
F00:1854       	; is advanced bop
F00:1855       	; Reset register
F00:1856       	moveq #0,d1
               S01:00033804:  72 00
F00:1857       	move.w #$c,d1     ; Advanced movee
               S01:00033806:  32 3C 00 0C
F00:1858       	mulu.w d1,d0
               S01:0003380A:  C0 C1
F00:1859       	move.w d0,d6
               S01:0003380C:  3C 00
F00:1860       	move.w #$e,d1
               S01:0003380E:  32 3C 00 0E
F00:1861       	moveq #0,d0
               S01:00033812:  70 00
F00:1862       	move.w rf_yoffset,d0     ; BOP move
               S01:00033814:  30 3A FE B8
F00:1863       	add.w #$3e,d0 ; simple bop
               S01:00033818:  D0 7C 00 3E
F00:1864       	move.w d0,d2
               S01:0003381C:  34 00
F00:1865       	move.w #$28,d3
               S01:0003381E:  36 3C 00 28
F00:1866       	move.w #$146,d4
               S01:00033822:  38 3C 01 46
F00:1867       	move.w #$0,BLTAMOD(a6)
               S01:00033826:  3D 7C 00 00 00 64
F00:1868       	move.w #$0,BLTBMOD(a6)
               S01:0003382C:  3D 7C 00 00 00 62
F00:1869       	move.w #$0,BLTCMOD(a6)
               S01:00033832:  3D 7C 00 00 00 60
F00:1870       	move.w #$1c,BLTDMOD(a6)
               S01:00033838:  3D 7C 00 1C 00 66
F00:1871       	move.w #$9f0,d0
               S01:0003383E:  30 3C 09 F0
F00:1872       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:00033842:  3D 7C 00 00 00 42
F00:1873       	jsr blitter
               S01:00033848:  61 00 08 88
F00:1874       	add.l #$798,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0003384C:  06 B9 00 00 07 98 00 03 21 E8 [R]
F00:1875       	add.l #$57d0,rf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00033856:  06 B9 00 00 57 D0 00 03 36 CA [R]
F00:1876       waitforblitter201
F00:1877       	btst	#14,DMACONR
               S01:00033860:  08 39 00 0E 00 DF F0 02
F00:1878       	bne.s	waitforblitter201
               S01:00033868:  66 F6
F00:1879       	moveq.l #0,d6
               S01:0003386A:  7C 00
F00:1880       	lea     $dff000,a6 ; Hardware registers
               S01:0003386C:  4D F9 00 DF F0 00
F00:1881       	move.l srcimage,a0
               S01:00033872:  20 7A E9 74
F00:1882       	move.l rf_dstimage,a1
               S01:00033876:  22 7A FE 52
F00:1883       	moveq #0,d0
               S01:0003387A:  70 00
F00:1884       	move.w rf_yoffset,d0     ; BOP move
               S01:0003387C:  30 3A FE 50
F00:1885       	; ORG TYPE of rf_yoffset INTEGER
F00:1886       	; LHS is byte, so initiate advanced op
F00:1887       	; is advanced bop
F00:1888       	; Reset register
F00:1889       	moveq #0,d1
               S01:00033880:  72 00
F00:1890       	move.w #$c,d1     ; Advanced movee
               S01:00033882:  32 3C 00 0C
F00:1891       	mulu.w d1,d0
               S01:00033886:  C0 C1
F00:1892       	move.w d0,d6
               S01:00033888:  3C 00
F00:1893       	move.w #$e,d1
               S01:0003388A:  32 3C 00 0E
F00:1894       	moveq #0,d0
               S01:0003388E:  70 00
F00:1895       	move.w rf_yoffset,d0     ; BOP move
               S01:00033890:  30 3A FE 3C
F00:1896       	add.w #$3e,d0 ; simple bop
               S01:00033894:  D0 7C 00 3E
F00:1897       	move.w d0,d2
               S01:00033898:  34 00
F00:1898       	move.w #$28,d3
               S01:0003389A:  36 3C 00 28
F00:1899       	move.w #$146,d4
               S01:0003389E:  38 3C 01 46
F00:1900       	move.w #$0,BLTAMOD(a6)
               S01:000338A2:  3D 7C 00 00 00 64
F00:1901       	move.w #$0,BLTBMOD(a6)
               S01:000338A8:  3D 7C 00 00 00 62
F00:1902       	move.w #$0,BLTCMOD(a6)
               S01:000338AE:  3D 7C 00 00 00 60
F00:1903       	move.w #$1c,BLTDMOD(a6)
               S01:000338B4:  3D 7C 00 1C 00 66
F00:1904       	move.w #$9f0,d0
               S01:000338BA:  30 3C 09 F0
F00:1905       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:000338BE:  3D 7C 00 00 00 42
F00:1906       	jsr blitter
               S01:000338C4:  61 00 08 0C
F00:1907       	add.l #$798,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000338C8:  06 B9 00 00 07 98 00 03 21 E8 [R]
F00:1908       	add.l #$57d0,rf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000338D2:  06 B9 00 00 57 D0 00 03 36 CA [R]
F00:1909       waitforblitter202
F00:1910       	btst	#14,DMACONR
               S01:000338DC:  08 39 00 0E 00 DF F0 02
F00:1911       	bne.s	waitforblitter202
               S01:000338E4:  66 F6
F00:1912       	moveq.l #0,d6
               S01:000338E6:  7C 00
F00:1913       	lea     $dff000,a6 ; Hardware registers
               S01:000338E8:  4D F9 00 DF F0 00
F00:1914       	move.l srcimage,a0
               S01:000338EE:  20 7A E8 F8
F00:1915       	move.l rf_dstimage,a1
               S01:000338F2:  22 7A FD D6
F00:1916       	moveq #0,d0
               S01:000338F6:  70 00
F00:1917       	move.w rf_yoffset,d0     ; BOP move
               S01:000338F8:  30 3A FD D4
F00:1918       	; ORG TYPE of rf_yoffset INTEGER
F00:1919       	; LHS is byte, so initiate advanced op
F00:1920       	; is advanced bop
F00:1921       	; Reset register
F00:1922       	moveq #0,d1
               S01:000338FC:  72 00
F00:1923       	move.w #$c,d1     ; Advanced movee
               S01:000338FE:  32 3C 00 0C
F00:1924       	mulu.w d1,d0
               S01:00033902:  C0 C1
F00:1925       	move.w d0,d6
               S01:00033904:  3C 00
F00:1926       	move.w #$e,d1
               S01:00033906:  32 3C 00 0E
F00:1927       	moveq #0,d0
               S01:0003390A:  70 00
F00:1928       	move.w rf_yoffset,d0     ; BOP move
               S01:0003390C:  30 3A FD C0
F00:1929       	add.w #$3e,d0 ; simple bop
               S01:00033910:  D0 7C 00 3E
F00:1930       	move.w d0,d2
               S01:00033914:  34 00
F00:1931       	move.w #$28,d3
               S01:00033916:  36 3C 00 28
F00:1932       	move.w #$146,d4
               S01:0003391A:  38 3C 01 46
F00:1933       	move.w #$0,BLTAMOD(a6)
               S01:0003391E:  3D 7C 00 00 00 64
F00:1934       	move.w #$0,BLTBMOD(a6)
               S01:00033924:  3D 7C 00 00 00 62
F00:1935       	move.w #$0,BLTCMOD(a6)
               S01:0003392A:  3D 7C 00 00 00 60
F00:1936       	move.w #$1c,BLTDMOD(a6)
               S01:00033930:  3D 7C 00 1C 00 66
F00:1937       	move.w #$9f0,d0
               S01:00033936:  30 3C 09 F0
F00:1938       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0003393A:  3D 7C 00 00 00 42
F00:1939       	jsr blitter
               S01:00033940:  61 00 07 90
F00:1940       	rts
               S01:00033944:  4E 75
F00:1941       	; ***********  Defining procedure : EffBeerFoam
F00:1942       	;    Procedure type : User-defined procedure
F00:1943       EffBeerFoam
F00:1944       	add.w #$1,foamCounter ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00033946:  52 79 00 00 A0 C6 [R]
F00:1945       	move.l screen,bf_dstimage ; Simple a:=b optimization 
               S01:0003394C:  23 FA E8 7E 00 03 31 42 [R]
F00:1946       	move.w foamCounter,foamsize ; Simple a:=b optimization 
               S01:00033954:  33 F9 00 00 A0 C6 00 03 31 46 [R]
F00:1947       	moveq #0,d0
               S01:0003395E:  70 00
F00:1948       	move.w #$d7,d0     ; BOP move
               S01:00033960:  30 3C 00 D7
F00:1949       	sub.w foamCounter,d0 ; simple bop
               S01:00033964:  90 79 00 00 A0 C6 [R]
F00:1950       	; Store variable : foampos
F00:1951       	move.w d0,foampos
               S01:0003396A:  33 C0 00 03 31 48 [R]
F00:1952       	jsr BeerFoam
               S01:00033970:  61 00 F7 DA
F00:1953       	rts
               S01:00033974:  4E 75
F00:1954       	; ***********  Defining procedure : EffBeerFill
F00:1955       	;    Procedure type : User-defined procedure
F00:1956       EffBeerFill
F00:1957       	move.l screen,dstimage ; Simple a:=b optimization 
               S01:00033976:  23 FA E8 54 00 03 33 26 [R]
F00:1958       	move.w yOffset,yoffset ; Simple a:=b optimization 
               S01:0003397E:  33 F9 00 00 A0 CA 00 03 33 2A [R]
F00:1959       	move.l #imageCupFull,fd_srcimage ; Simple a:=b optimization 
               S01:00033988:  23 FC 00 05 D1 10 00 03 33 2C [R]
F00:1960       	moveq #0,d0
               S01:00033992:  70 00
F00:1961       	move.w #$69c,d0
               S01:00033994:  30 3C 06 9C
F00:1962       	move.l d0,fd_srcimageoffset
               S01:00033998:  23 C0 00 03 33 30 [R]
F00:1963       	jsr FillDrinkBeer
               S01:0003399E:  61 00 F9 94
F00:1964       	cmp.w #$1,yOffset
               S01:000339A2:  0C 79 00 01 00 00 A0 CA [R]
F00:1965       	blo edblock208
               S01:000339AA:  65 0C
F00:1966       ctb206: ;Main true block ;keep 
F00:1967       	sub.w #$1,yOffset ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000339AC:  53 79 00 00 A0 CA [R]
F00:1968       	add.w #$1,foamCounter ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000339B2:  52 79 00 00 A0 C6 [R]
F00:1969       edblock208
F00:1970       	cmp.w #$13,foamCounter
               S01:000339B8:  0C 79 00 13 00 00 A0 C6 [R]
F00:1971       	bhi eblock213
               S01:000339C0:  62 2A
F00:1972       ctb212: ;Main true block ;keep 
F00:1973       	move.l screen,bf_dstimage ; Simple a:=b optimization 
               S01:000339C2:  23 FA E8 08 00 03 31 42 [R]
F00:1974       	move.w foamCounter,foamsize ; Simple a:=b optimization 
               S01:000339CA:  33 F9 00 00 A0 C6 00 03 31 46 [R]
F00:1975       	moveq #0,d0
               S01:000339D4:  70 00
F00:1976       	move.w #$d8,d0     ; BOP move
               S01:000339D6:  30 3C 00 D8
F00:1977       	sub.w foamCounter,d0 ; simple bop
               S01:000339DA:  90 79 00 00 A0 C6 [R]
F00:1978       	; Store variable : foampos
F00:1979       	move.w d0,foampos
               S01:000339E0:  33 C0 00 03 31 48 [R]
F00:1980       	jsr BeerFoam
               S01:000339E6:  61 00 F7 64
F00:1981       	jmp edblock214
               S01:000339EA:  60 26
F00:1982       eblock213
F00:1983       	move.l screen,bf_dstimage ; Simple a:=b optimization 
               S01:000339EC:  23 FA E7 DE 00 03 31 42 [R]
F00:1984       	move.w #$13,foamsize ; Simple a:=b optimization 
               S01:000339F4:  33 FC 00 13 00 03 31 46 [R]
F00:1985       	moveq #0,d0
               S01:000339FC:  70 00
F00:1986       	move.w #$d8,d0     ; BOP move
               S01:000339FE:  30 3C 00 D8
F00:1987       	sub.w foamCounter,d0 ; simple bop
               S01:00033A02:  90 79 00 00 A0 C6 [R]
F00:1988       	; Store variable : foampos
F00:1989       	move.w d0,foampos
               S01:00033A08:  33 C0 00 03 31 48 [R]
F00:1990       	jsr BeerFoam
               S01:00033A0E:  61 00 F7 3C
F00:1991       edblock214
F00:1992       	rts
               S01:00033A12:  4E 75
F00:1993       	; ***********  Defining procedure : EffBeerDrink
F00:1994       	;    Procedure type : User-defined procedure
F00:1995       EffBeerDrink
F00:1996       	move.l screen,rf_dstimage ; Simple a:=b optimization 
               S01:00033A14:  23 FA E7 B6 00 03 36 CA [R]
F00:1997       	move.w yOffset,rf_yoffset ; Simple a:=b optimization 
               S01:00033A1C:  33 F9 00 00 A0 CA 00 03 36 CE [R]
F00:1998       	jsr RemoveFoam
               S01:00033A26:  61 00 FC A8
F00:1999       	cmp.w #$13,foamCounter
               S01:00033A2A:  0C 79 00 13 00 00 A0 C6 [R]
F00:2000       	bhi eblock222
               S01:00033A32:  62 2A
F00:2001       ctb221: ;Main true block ;keep 
F00:2002       	move.l screen,bf_dstimage ; Simple a:=b optimization 
               S01:00033A34:  23 FA E7 96 00 03 31 42 [R]
F00:2003       	move.w foamCounter,foamsize ; Simple a:=b optimization 
               S01:00033A3C:  33 F9 00 00 A0 C6 00 03 31 46 [R]
F00:2004       	moveq #0,d0
               S01:00033A46:  70 00
F00:2005       	move.w #$d8,d0     ; BOP move
               S01:00033A48:  30 3C 00 D8
F00:2006       	sub.w foamCounter,d0 ; simple bop
               S01:00033A4C:  90 79 00 00 A0 C6 [R]
F00:2007       	; Store variable : foampos
F00:2008       	move.w d0,foampos
               S01:00033A52:  33 C0 00 03 31 48 [R]
F00:2009       	jsr BeerFoam
               S01:00033A58:  61 00 F6 F2
F00:2010       	jmp edblock223
               S01:00033A5C:  60 26
F00:2011       eblock222
F00:2012       	move.l screen,bf_dstimage ; Simple a:=b optimization 
               S01:00033A5E:  23 FA E7 6C 00 03 31 42 [R]
F00:2013       	move.w #$13,foamsize ; Simple a:=b optimization 
               S01:00033A66:  33 FC 00 13 00 03 31 46 [R]
F00:2014       	moveq #0,d0
               S01:00033A6E:  70 00
F00:2015       	move.w #$d8,d0     ; BOP move
               S01:00033A70:  30 3C 00 D8
F00:2016       	sub.w foamCounter,d0 ; simple bop
               S01:00033A74:  90 79 00 00 A0 C6 [R]
F00:2017       	; Store variable : foampos
F00:2018       	move.w d0,foampos
               S01:00033A7A:  33 C0 00 03 31 48 [R]
F00:2019       	jsr BeerFoam
               S01:00033A80:  61 00 F6 CA
F00:2020       edblock223
F00:2021       	rts
               S01:00033A84:  4E 75
F00:2022       	; ***********  Defining procedure : EffScrollup
F00:2023       	;    Procedure type : User-defined procedure
F00:2024       EffScrollup
F00:2025       	sub.l #$28,screenOffset ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00033A86:  04 B9 00 00 00 28 00 00 A0 C2 [R]
F00:2026       	rts
               S01:00033A90:  4E 75
F00:2027       	; ***********  Defining procedure : EffScrolldown
F00:2028       	;    Procedure type : User-defined procedure
F00:2029       EffScrolldown
F00:2030       	add.l #$28,screenOffset ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00033A92:  06 B9 00 00 00 28 00 00 A0 C2 [R]
F00:2031       	rts
               S01:00033A9C:  4E 75
F00:2032       	; ***********  Defining procedure : RestoreCup
F00:2033       	;    Procedure type : User-defined procedure
F00:2034       	jmp block230
               S01:00033A9E:  60 10
F00:2035       rc_srcimage	dc.l	0
               S01:00033AA0:  00 00 00 00
F00:2036       rc_dstimage	dc.l	0
               S01:00033AA4:  00 00 00 00
F00:2037       rc_yoffset	dc.w	0
               S01:00033AA8:  00 00
F00:2038       rc_height	dc.l	0
               S01:00033AAA:  00 00 00 00
F00:2039       	 	CNOP 0,4
F00:2040       block230
F00:2041       RestoreCup
F00:2042       	
F00:2043       ; //ablit description:	
F00:2044       ; // - SrcImage 
F00:2045       ; // - DstImage
F00:2046       ; // - SrcShiftBytes: Start Byte to Blit From
F00:2047       ; // - XOffset: X Offset in Bytes (8 Pixel) to Blit To
F00:2048       ; // - YOffset: YOffset to Blit to
F00:2049       ; // - BlitWidth: With in Bytes of the Blit
F00:2050       ; // - BlitSize: Complete Size of the Blit
F00:2051       ; // - BlitAmod
F00:2052       ; // - BlitDmod
F00:2053       ; // - BlitB + BlitCmod
F00:2054       ; // - Channels and Minterm
F00:2055       	move.l rc_srcimage,srcimage ; Simple a:=b optimization 
               S01:00033AB0:  23 FA FF EE 00 03 21 E8 [R]
F00:2056       	moveq #0,d0
               S01:00033AB8:  70 00
F00:2057       	move.l rc_height,d0     ; BOP move
               S01:00033ABA:  20 3A FF EE
F00:2058       	; ORG TYPE of rc_height LONG
F00:2059       	; LHS is byte, so initiate advanced op
F00:2060       	; is advanced bop
F00:2061       	; Reset register
F00:2062       	moveq #0,d1
               S01:00033ABE:  72 00
F00:2063       	move.w #$c,d1     ; Advanced movee
               S01:00033AC0:  32 3C 00 0C
F00:2064       	mulu.w d1,d0
               S01:00033AC4:  C0 C1
F00:2065       	; Store variable : planeoffset
F00:2066       	move.l d0,planeoffset
               S01:00033AC6:  23 C0 00 03 25 F4 [R]
F00:2067       	moveq #0,d0
               S01:00033ACC:  70 00
F00:2068       	moveq #0,d1
               S01:00033ACE:  72 00
F00:2069       	move.l rc_height,d1     ; BOP move
               S01:00033AD0:  22 3A FF D8
F00:2070       	lsl.l #$6,d1 ; simple bop
               S01:00033AD4:  ED 89
F00:2071       	move.l d1,d0     ; BOP move
               S01:00033AD6:  20 01
F00:2072       	add.l #$6,d0 ; simple bop
               S01:00033AD8:  5C 80
F00:2073       	; Store variable : bltsize
F00:2074       	move.w d0,bltsize
               S01:00033ADA:  33 C0 00 03 21 D6 [R]
F00:2075       waitforblitter231
F00:2076       	btst	#14,DMACONR
               S01:00033AE0:  08 39 00 0E 00 DF F0 02
F00:2077       	bne.s	waitforblitter231
               S01:00033AE8:  66 F6
F00:2078       	moveq.l #0,d6
               S01:00033AEA:  7C 00
F00:2079       	lea     $dff000,a6 ; Hardware registers
               S01:00033AEC:  4D F9 00 DF F0 00
F00:2080       	move.l srcimage,a0
               S01:00033AF2:  20 7A E6 F4
F00:2081       	move.l rc_dstimage,a1
               S01:00033AF6:  22 7A FF AC
F00:2082       	move.w #$0,d6
               S01:00033AFA:  3C 3C 00 00
F00:2083       	move.w #$e,d1
               S01:00033AFE:  32 3C 00 0E
F00:2084       	move.w rc_yoffset,d2
               S01:00033B02:  34 3A FF A4
F00:2085       	move.w #$28,d3
               S01:00033B06:  36 3C 00 28
F00:2086       	move.w bltsize,d4
               S01:00033B0A:  38 3A E6 CA
F00:2087       	move.w #$0,BLTAMOD(a6)
               S01:00033B0E:  3D 7C 00 00 00 64
F00:2088       	move.w #$0,BLTBMOD(a6)
               S01:00033B14:  3D 7C 00 00 00 62
F00:2089       	move.w #$0,BLTCMOD(a6)
               S01:00033B1A:  3D 7C 00 00 00 60
F00:2090       	move.w #$1c,BLTDMOD(a6)
               S01:00033B20:  3D 7C 00 1C 00 66
F00:2091       	move.w #$9f0,d0
               S01:00033B26:  30 3C 09 F0
F00:2092       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:00033B2A:  3D 7C 00 00 00 42
F00:2093       	jsr blitter
               S01:00033B30:  61 00 05 A0
F00:2094       	moveq #0,d0
               S01:00033B34:  70 00
F00:2095       	move.l planeoffset,d0     ; BOP move
               S01:00033B36:  20 3A EA BC
F00:2096       	add.l srcimage,d0 ; simple bop
               S01:00033B3A:  D0 BA E6 AC
F00:2097       	; Store variable : srcimage
F00:2098       	move.l d0,srcimage
               S01:00033B3E:  23 C0 00 03 21 E8 [R]
F00:2099       	add.l #$57d0,rc_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00033B44:  06 B9 00 00 57 D0 00 03 3A A4 [R]
F00:2100       waitforblitter232
F00:2101       	btst	#14,DMACONR
               S01:00033B4E:  08 39 00 0E 00 DF F0 02
F00:2102       	bne.s	waitforblitter232
               S01:00033B56:  66 F6
F00:2103       	moveq.l #0,d6
               S01:00033B58:  7C 00
F00:2104       	lea     $dff000,a6 ; Hardware registers
               S01:00033B5A:  4D F9 00 DF F0 00
F00:2105       	move.l srcimage,a0
               S01:00033B60:  20 7A E6 86
F00:2106       	move.l rc_dstimage,a1
               S01:00033B64:  22 7A FF 3E
F00:2107       	move.w #$0,d6
               S01:00033B68:  3C 3C 00 00
F00:2108       	move.w #$e,d1
               S01:00033B6C:  32 3C 00 0E
F00:2109       	move.w rc_yoffset,d2
               S01:00033B70:  34 3A FF 36
F00:2110       	move.w #$28,d3
               S01:00033B74:  36 3C 00 28
F00:2111       	move.w bltsize,d4
               S01:00033B78:  38 3A E6 5C
F00:2112       	move.w #$0,BLTAMOD(a6)
               S01:00033B7C:  3D 7C 00 00 00 64
F00:2113       	move.w #$0,BLTBMOD(a6)
               S01:00033B82:  3D 7C 00 00 00 62
F00:2114       	move.w #$0,BLTCMOD(a6)
               S01:00033B88:  3D 7C 00 00 00 60
F00:2115       	move.w #$1c,BLTDMOD(a6)
               S01:00033B8E:  3D 7C 00 1C 00 66
F00:2116       	move.w #$9f0,d0
               S01:00033B94:  30 3C 09 F0
F00:2117       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:00033B98:  3D 7C 00 00 00 42
F00:2118       	jsr blitter
               S01:00033B9E:  61 00 05 32
F00:2119       	moveq #0,d0
               S01:00033BA2:  70 00
F00:2120       	move.l planeoffset,d0     ; BOP move
               S01:00033BA4:  20 3A EA 4E
F00:2121       	add.l srcimage,d0 ; simple bop
               S01:00033BA8:  D0 BA E6 3E
F00:2122       	; Store variable : srcimage
F00:2123       	move.l d0,srcimage
               S01:00033BAC:  23 C0 00 03 21 E8 [R]
F00:2124       	add.l #$57d0,rc_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00033BB2:  06 B9 00 00 57 D0 00 03 3A A4 [R]
F00:2125       waitforblitter233
F00:2126       	btst	#14,DMACONR
               S01:00033BBC:  08 39 00 0E 00 DF F0 02
F00:2127       	bne.s	waitforblitter233
               S01:00033BC4:  66 F6
F00:2128       	moveq.l #0,d6
               S01:00033BC6:  7C 00
F00:2129       	lea     $dff000,a6 ; Hardware registers
               S01:00033BC8:  4D F9 00 DF F0 00
F00:2130       	move.l srcimage,a0
               S01:00033BCE:  20 7A E6 18
F00:2131       	move.l rc_dstimage,a1
               S01:00033BD2:  22 7A FE D0
F00:2132       	move.w #$0,d6
               S01:00033BD6:  3C 3C 00 00
F00:2133       	move.w #$e,d1
               S01:00033BDA:  32 3C 00 0E
F00:2134       	move.w rc_yoffset,d2
               S01:00033BDE:  34 3A FE C8
F00:2135       	move.w #$28,d3
               S01:00033BE2:  36 3C 00 28
F00:2136       	move.w bltsize,d4
               S01:00033BE6:  38 3A E5 EE
F00:2137       	move.w #$0,BLTAMOD(a6)
               S01:00033BEA:  3D 7C 00 00 00 64
F00:2138       	move.w #$0,BLTBMOD(a6)
               S01:00033BF0:  3D 7C 00 00 00 62
F00:2139       	move.w #$0,BLTCMOD(a6)
               S01:00033BF6:  3D 7C 00 00 00 60
F00:2140       	move.w #$1c,BLTDMOD(a6)
               S01:00033BFC:  3D 7C 00 1C 00 66
F00:2141       	move.w #$9f0,d0
               S01:00033C02:  30 3C 09 F0
F00:2142       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:00033C06:  3D 7C 00 00 00 42
F00:2143       	jsr blitter
               S01:00033C0C:  61 00 04 C4
F00:2144       	moveq #0,d0
               S01:00033C10:  70 00
F00:2145       	move.l planeoffset,d0     ; BOP move
               S01:00033C12:  20 3A E9 E0
F00:2146       	add.l srcimage,d0 ; simple bop
               S01:00033C16:  D0 BA E5 D0
F00:2147       	; Store variable : srcimage
F00:2148       	move.l d0,srcimage
               S01:00033C1A:  23 C0 00 03 21 E8 [R]
F00:2149       	add.l #$57d0,rc_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00033C20:  06 B9 00 00 57 D0 00 03 3A A4 [R]
F00:2150       waitforblitter234
F00:2151       	btst	#14,DMACONR
               S01:00033C2A:  08 39 00 0E 00 DF F0 02
F00:2152       	bne.s	waitforblitter234
               S01:00033C32:  66 F6
F00:2153       	moveq.l #0,d6
               S01:00033C34:  7C 00
F00:2154       	lea     $dff000,a6 ; Hardware registers
               S01:00033C36:  4D F9 00 DF F0 00
F00:2155       	move.l srcimage,a0
               S01:00033C3C:  20 7A E5 AA
F00:2156       	move.l rc_dstimage,a1
               S01:00033C40:  22 7A FE 62
F00:2157       	move.w #$0,d6
               S01:00033C44:  3C 3C 00 00
F00:2158       	move.w #$e,d1
               S01:00033C48:  32 3C 00 0E
F00:2159       	move.w rc_yoffset,d2
               S01:00033C4C:  34 3A FE 5A
F00:2160       	move.w #$28,d3
               S01:00033C50:  36 3C 00 28
F00:2161       	move.w bltsize,d4
               S01:00033C54:  38 3A E5 80
F00:2162       	move.w #$0,BLTAMOD(a6)
               S01:00033C58:  3D 7C 00 00 00 64
F00:2163       	move.w #$0,BLTBMOD(a6)
               S01:00033C5E:  3D 7C 00 00 00 62
F00:2164       	move.w #$0,BLTCMOD(a6)
               S01:00033C64:  3D 7C 00 00 00 60
F00:2165       	move.w #$1c,BLTDMOD(a6)
               S01:00033C6A:  3D 7C 00 1C 00 66
F00:2166       	move.w #$9f0,d0
               S01:00033C70:  30 3C 09 F0
F00:2167       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:00033C74:  3D 7C 00 00 00 42
F00:2168       	jsr blitter
               S01:00033C7A:  61 00 04 56
F00:2169       	moveq #0,d0
               S01:00033C7E:  70 00
F00:2170       	move.l planeoffset,d0     ; BOP move
               S01:00033C80:  20 3A E9 72
F00:2171       	add.l srcimage,d0 ; simple bop
               S01:00033C84:  D0 BA E5 62
F00:2172       	; Store variable : srcimage
F00:2173       	move.l d0,srcimage
               S01:00033C88:  23 C0 00 03 21 E8 [R]
F00:2174       	add.l #$57d0,rc_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00033C8E:  06 B9 00 00 57 D0 00 03 3A A4 [R]
F00:2175       waitforblitter235
F00:2176       	btst	#14,DMACONR
               S01:00033C98:  08 39 00 0E 00 DF F0 02
F00:2177       	bne.s	waitforblitter235
               S01:00033CA0:  66 F6
F00:2178       	moveq.l #0,d6
               S01:00033CA2:  7C 00
F00:2179       	lea     $dff000,a6 ; Hardware registers
               S01:00033CA4:  4D F9 00 DF F0 00
F00:2180       	move.l srcimage,a0
               S01:00033CAA:  20 7A E5 3C
F00:2181       	move.l rc_dstimage,a1
               S01:00033CAE:  22 7A FD F4
F00:2182       	move.w #$0,d6
               S01:00033CB2:  3C 3C 00 00
F00:2183       	move.w #$e,d1
               S01:00033CB6:  32 3C 00 0E
F00:2184       	move.w rc_yoffset,d2
               S01:00033CBA:  34 3A FD EC
F00:2185       	move.w #$28,d3
               S01:00033CBE:  36 3C 00 28
F00:2186       	move.w bltsize,d4
               S01:00033CC2:  38 3A E5 12
F00:2187       	move.w #$0,BLTAMOD(a6)
               S01:00033CC6:  3D 7C 00 00 00 64
F00:2188       	move.w #$0,BLTBMOD(a6)
               S01:00033CCC:  3D 7C 00 00 00 62
F00:2189       	move.w #$0,BLTCMOD(a6)
               S01:00033CD2:  3D 7C 00 00 00 60
F00:2190       	move.w #$1c,BLTDMOD(a6)
               S01:00033CD8:  3D 7C 00 1C 00 66
F00:2191       	move.w #$9f0,d0
               S01:00033CDE:  30 3C 09 F0
F00:2192       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:00033CE2:  3D 7C 00 00 00 42
F00:2193       	jsr blitter
               S01:00033CE8:  61 00 03 E8
F00:2194       	rts
               S01:00033CEC:  4E 75
F00:2195       	; ***********  Defining procedure : Get_Musicpos
F00:2196       	;    Procedure type : User-defined procedure
F00:2197       Get_Musicpos
F00:2198       		move.w	(LSP_State+m_currentSeq)(pc),musicPos
               S01:00033CEE:  33 FA EE F2 00 03 21 D8 [R]
F00:2199       	
F00:2200       	rts
               S01:00033CF6:  4E 75
F00:2201       	 	CNOP 0,4
F00:2202       block1
F00:2203       	moveq #0,d0
               S01:00033CF8:  70 00
F00:2204       	move.w #$0,d0
               S01:00033CFA:  30 3C 00 00
F00:2205       	move.l d0,curcopperpos
               S01:00033CFE:  23 C0 00 00 A0 BC [R]
F00:2206       	move.l #music,cs_music ; Simple a:=b optimization 
               S01:00033D04:  23 FC 00 00 00 00 00 03 28 3A [R]
F00:2207       	move.l #bank,cs_bank ; Simple a:=b optimization 
               S01:00033D0E:  23 FC 00 01 BF B8 00 03 28 3E [R]
F00:2208       	move.w #$0,cs_vbr ; Simple a:=b optimization 
               S01:00033D18:  33 FC 00 00 00 03 28 42 [R]
F00:2209       	move.w #$0,cs_palntsc ; Simple a:=b optimization 
               S01:00033D20:  33 FC 00 00 00 03 28 44 [R]
F00:2210       	jsr LSP_CIAStart
               S01:00033D28:  61 00 EB 1E
F00:2211       	jsr Load_c2p
               S01:00033D2C:  61 00 EE F4
F00:2212       	move.l #imagechunky,chunkybuffer ; Simple a:=b optimization 
               S01:00033D30:  23 FC 00 00 A0 CC 00 03 2B EA [R]
F00:2213       	move.l #image1,bplbuffer ; Simple a:=b optimization 
               S01:00033D3A:  23 FC 00 02 62 F0 00 03 2B EE [R]
F00:2214       	jsr c2p_convert
               S01:00033D44:  61 00 EE AE
F00:2215       	move.l #image1,Graphics_pa ; Simple a:=b optimization 
               S01:00033D48:  23 FC 00 02 62 F0 00 00 00 94 [R]
F00:2216       	move.w #$5,Graphics_bpl ; Simple a:=b optimization 
               S01:00033D52:  33 FC 00 05 00 00 00 98 [R]
F00:2217       	jsr Graphics_SetupNonInterlacedScreen
               S01:00033D5A:  61 00 E8 A0
F00:2218       	jsr FlipBuffers
               S01:00033D5E:  61 00 F8 46
F00:2219       	move.w #$1f,d0
               S01:00033D62:  30 3C 00 1F
F00:2220       	move.l #image_palette,a0
               S01:00033D66:  41 FA E3 64
F00:2221       	move.l #copper_palette,a1
               S01:00033D6A:  43 F9 00 00 00 68 [R]
F00:2222       memcpy237
F00:2223       	move.l (a0)+,(a1)+
               S01:00033D70:  22 D8
F00:2224       	dbf d0,memcpy237
               S01:00033D72:  51 C8 FF FC
F00:2225       while238
F00:2226       loopstart242
F00:2227       	cmp.w #$0,isDone
               S01:00033D76:  4A 79 00 00 A0 B8 [R]
F00:2228       	bne edblock241
               S01:00033D7C:  66 00 02 EA
F00:2229       ctb239: ;Main true block ;keep 
F00:2230       waitVB366
F00:2231       	move.l VPOSR,d0
               S01:00033D80:  20 39 00 DF F0 04
F00:2232       	and.l #$1ff00,d0
               S01:00033D86:  C0 BC 00 01 FF 00
F00:2233       	cmp.l #300<<8,d0
               S01:00033D8C:  B0 BC 00 01 2C 00
F00:2234       	bne waitVB366
               S01:00033D92:  66 EC
F00:2235       	move.w #$0,colorcycled ; Simple a:=b optimization 
               S01:00033D94:  33 FC 00 00 00 00 A0 BA [R]
F00:2236       	jsr FlipBuffers
               S01:00033D9C:  61 00 F8 08
F00:2237       	jsr Get_Musicpos
               S01:00033DA0:  61 00 FF 4C
F00:2238       	move #$1,d0
               S01:00033DA4:  30 3C 00 01
F00:2239       	cmp.w effectNumber,d0
               S01:00033DA8:  B0 7A E4 38
F00:2240       	bne casenext368
               S01:00033DAC:  66 1C
F00:2241       	add.w #$1,eff0Counter ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00033DAE:  52 79 00 00 A0 C8 [R]
F00:2242       	cmp.w #$1e,eff0Counter
               S01:00033DB4:  0C 79 00 1E 00 00 A0 C8 [R]
F00:2243       	blo edblock373
               S01:00033DBC:  65 08
F00:2244       ctb371: ;Main true block ;keep 
F00:2245       	move.w #$2,effectNumber ; Simple a:=b optimization 
               S01:00033DBE:  33 FC 00 02 00 03 21 E2 [R]
F00:2246       edblock373
F00:2247       	jmp caseend367
               S01:00033DC6:  60 00 02 9C
F00:2248       casenext368
F00:2249       	move #$2,d0
               S01:00033DCA:  30 3C 00 02
F00:2250       	cmp.w effectNumber,d0
               S01:00033DCE:  B0 7A E4 12
F00:2251       	bne casenext376
               S01:00033DD2:  66 20
F00:2252       	cmp.w #$c,foamCounter
               S01:00033DD4:  0C 79 00 0C 00 00 A0 C6 [R]
F00:2253       	bhi eblock380
               S01:00033DDC:  62 06
F00:2254       ctb379: ;Main true block ;keep 
F00:2255       	jsr EffBeerFoam
               S01:00033DDE:  61 00 FB 66
F00:2256       	jmp edblock381
               S01:00033DE2:  60 08
F00:2257       eblock380
F00:2258       	move.w #$3,effectNumber ; Simple a:=b optimization 
               S01:00033DE4:  33 FC 00 03 00 03 21 E2 [R]
F00:2259       edblock381
F00:2260       	jsr CopperEffects
               S01:00033DEC:  61 00 F1 9A
F00:2261       	jmp caseend367
               S01:00033DF0:  60 00 02 72
F00:2262       casenext376
F00:2263       	move #$3,d0
               S01:00033DF4:  30 3C 00 03
F00:2264       	cmp.w effectNumber,d0
               S01:00033DF8:  B0 7A E3 E8
F00:2265       	bne casenext386
               S01:00033DFC:  66 1E
F00:2266       	jsr EffBeerFill
               S01:00033DFE:  61 00 FB 76
F00:2267       	cmp.w #$4,musicPos
               S01:00033E02:  0C 79 00 04 00 03 21 D8 [R]
F00:2268       	bne edblock391
               S01:00033E0A:  66 08
F00:2269       ctb389: ;Main true block ;keep 
F00:2270       	move.w #$4,effectNumber ; Simple a:=b optimization 
               S01:00033E0C:  33 FC 00 04 00 03 21 E2 [R]
F00:2271       edblock391
F00:2272       	jsr CopperEffects
               S01:00033E14:  61 00 F1 72
F00:2273       	jmp caseend367
               S01:00033E18:  60 00 02 4A
F00:2274       casenext386
F00:2275       	move #$4,d0
               S01:00033E1C:  30 3C 00 04
F00:2276       	cmp.w effectNumber,d0
               S01:00033E20:  B0 7A E3 C0
F00:2277       	bne casenext394
               S01:00033E24:  66 26
F00:2278       	cmp.l #$0,screenOffset
               S01:00033E26:  4A B9 00 00 A0 C2 [R]
F00:2279       	bls eblock398
               S01:00033E2C:  63 06
F00:2280       ctb397: ;Main true block ;keep 
F00:2281       	jsr EffScrollup
               S01:00033E2E:  61 00 FC 56
F00:2282       	jmp edblock399
               S01:00033E32:  60 08
F00:2283       eblock398
F00:2284       	move.w #$5,effectNumber ; Simple a:=b optimization 
               S01:00033E34:  33 FC 00 05 00 03 21 E2 [R]
F00:2285       edblock399
F00:2286       	jsr CopperEffects
               S01:00033E3C:  61 00 F1 4A
F00:2287       	move.w #$0,tmp ; Simple a:=b optimization 
               S01:00033E40:  33 FC 00 00 00 03 25 EE [R]
F00:2288       	jmp caseend367
               S01:00033E48:  60 00 02 1A
F00:2289       casenext394
F00:2290       	move #$5,d0
               S01:00033E4C:  30 3C 00 05
F00:2291       	cmp.w effectNumber,d0
               S01:00033E50:  B0 7A E3 90
F00:2292       	bne casenext404
               S01:00033E54:  66 00 00 9C
F00:2293       	cmp.w #$8,musicPos
               S01:00033E58:  0C 79 00 08 00 03 21 D8 [R]
F00:2294       	bne localfailed412
               S01:00033E60:  66 02
F00:2295       	jmp ctb407
               S01:00033E62:  60 16
F00:2296       localfailed412: ;keep
F00:2297       	; ; logical OR, second chance
F00:2298       	cmp.w #$20,musicPos
               S01:00033E64:  0C 79 00 20 00 03 21 D8 [R]
F00:2299       	bne localfailed411
               S01:00033E6C:  66 02
F00:2300       	jmp ctb407
               S01:00033E6E:  60 0A
F00:2301       localfailed411: ;keep
F00:2302       	; ; logical OR, second chance
F00:2303       	cmp.w #$38,musicPos
               S01:00033E70:  0C 79 00 38 00 03 21 D8 [R]
F00:2304       	bne edblock409
               S01:00033E78:  66 08
F00:2305       ctb407: ;Main true block ;keep 
F00:2306       	move.w #$6,effectNumber ; Simple a:=b optimization 
               S01:00033E7A:  33 FC 00 06 00 03 21 E2 [R]
F00:2307       edblock409
F00:2308       	cmp.w #$2,tmp
               S01:00033E82:  0C 79 00 02 00 03 25 EE [R]
F00:2309       	bhs edblock417
               S01:00033E8A:  64 58
F00:2310       ctb415: ;Main true block ;keep 
F00:2311       	move.l #imageCupFull,rc_srcimage ; Simple a:=b optimization 
               S01:00033E8C:  23 FC 00 05 D1 10 00 03 3A A0 [R]
F00:2312       	move.l screen,rc_dstimage ; Simple a:=b optimization 
               S01:00033E96:  23 FA E3 34 00 03 3A A4 [R]
F00:2313       	move.w #$152,rc_yoffset ; Simple a:=b optimization 
               S01:00033E9E:  33 FC 01 52 00 03 3A A8 [R]
F00:2314       	moveq #0,d0
               S01:00033EA6:  70 00
F00:2315       	move.w #$8d,d0
               S01:00033EA8:  30 3C 00 8D
F00:2316       	move.l d0,rc_height
               S01:00033EAC:  23 C0 00 03 3A AA [R]
F00:2317       	jsr RestoreCup
               S01:00033EB2:  61 00 FB FC
F00:2318       	moveq #0,d0
               S01:00033EB6:  70 00
F00:2319       	move.l screen,d0     ; BOP move
               S01:00033EB8:  20 3A E3 12
F00:2320       	add.l #$2800,d0 ; simple bop
               S01:00033EBC:  D0 BC 00 00 28 00
F00:2321       	; Store variable : tmp2
F00:2322       	move.l d0,tmp2
               S01:00033EC2:  23 C0 00 03 25 F0 [R]
F00:2323       	move.l tmp2,bf_dstimage ; Simple a:=b optimization 
               S01:00033EC8:  23 FA E7 26 00 03 31 42 [R]
F00:2324       	move.w #$13,foamsize ; Simple a:=b optimization 
               S01:00033ED0:  33 FC 00 13 00 03 31 46 [R]
F00:2325       	move.w #$40,foampos ; Simple a:=b optimization 
               S01:00033ED8:  33 FC 00 40 00 03 31 48 [R]
F00:2326       	jsr BeerFoam
               S01:00033EE0:  61 00 F2 6A
F00:2327       edblock417
F00:2328       	add.w #$1,tmp ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00033EE4:  52 79 00 03 25 EE [R]
F00:2329       	jsr CopperEffects
               S01:00033EEA:  61 00 F0 9C
F00:2330       	jmp caseend367
               S01:00033EEE:  60 00 01 74
F00:2331       casenext404
F00:2332       	move #$6,d0
               S01:00033EF2:  30 3C 00 06
F00:2333       	cmp.w effectNumber,d0
               S01:00033EF6:  B0 7A E2 EA
F00:2334       	bne casenext420
               S01:00033EFA:  66 4E
F00:2335       	jsr CopperEffects
               S01:00033EFC:  61 00 F0 8A
F00:2336       	cmp.w #$8901,lightypos
               S01:00033F00:  0C 79 89 01 00 00 A0 C0 [R]
F00:2337       	bhi eblock424
               S01:00033F08:  62 0A
F00:2338       ctb423: ;Main true block ;keep 
F00:2339       	add.w #$100,lightypos ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00033F0A:  06 79 01 00 00 00 A0 C0 [R]
F00:2340       	jmp edblock425
               S01:00033F12:  60 08
F00:2341       eblock424
F00:2342       	move.w #$3001,lightypos ; Simple a:=b optimization 
               S01:00033F14:  33 FC 30 01 00 00 A0 C0 [R]
F00:2343       edblock425
F00:2344       	cmp.w #$10,musicPos
               S01:00033F1C:  0C 79 00 10 00 03 21 D8 [R]
F00:2345       	bne localfailed436
               S01:00033F24:  66 02
F00:2346       	jmp ctb431
               S01:00033F26:  60 16
F00:2347       localfailed436: ;keep
F00:2348       	; ; logical OR, second chance
F00:2349       	cmp.w #$28,musicPos
               S01:00033F28:  0C 79 00 28 00 03 21 D8 [R]
F00:2350       	bne localfailed435
               S01:00033F30:  66 02
F00:2351       	jmp ctb431
               S01:00033F32:  60 0A
F00:2352       localfailed435: ;keep
F00:2353       	; ; logical OR, second chance
F00:2354       	cmp.w #$40,musicPos
               S01:00033F34:  0C 79 00 40 00 03 21 D8 [R]
F00:2355       	bne edblock433
               S01:00033F3C:  66 08
F00:2356       ctb431: ;Main true block ;keep 
F00:2357       	move.w #$7,effectNumber ; Simple a:=b optimization 
               S01:00033F3E:  33 FC 00 07 00 03 21 E2 [R]
F00:2358       edblock433
F00:2359       	jmp caseend367
               S01:00033F46:  60 00 01 1C
F00:2360       casenext420
F00:2361       	move #$7,d0
               S01:00033F4A:  30 3C 00 07
F00:2362       	cmp.w effectNumber,d0
               S01:00033F4E:  B0 7A E2 92
F00:2363       	bne casenext438
               S01:00033F52:  66 22
F00:2364       	jsr CopperEffects
               S01:00033F54:  61 00 F0 32
F00:2365       	cmp.l #$2800,screenOffset
               S01:00033F58:  0C B9 00 00 28 00 00 00 A0 C2 [R]
F00:2366       	bhs eblock442
               S01:00033F62:  64 06
F00:2367       ctb441: ;Main true block ;keep 
F00:2368       	jsr EffScrolldown
               S01:00033F64:  61 00 FB 2C
F00:2369       	jmp edblock443
               S01:00033F68:  60 08
F00:2370       eblock442
F00:2371       	move.w #$8,effectNumber ; Simple a:=b optimization 
               S01:00033F6A:  33 FC 00 08 00 03 21 E2 [R]
F00:2372       edblock443
F00:2373       	jmp caseend367
               S01:00033F72:  60 00 00 F0
F00:2374       casenext438
F00:2375       	move #$8,d0
               S01:00033F76:  30 3C 00 08
F00:2376       	cmp.w effectNumber,d0
               S01:00033F7A:  B0 7A E2 66
F00:2377       	bne casenext448
               S01:00033F7E:  66 30
F00:2378       	cmp.w #$18,musicPos
               S01:00033F80:  0C 79 00 18 00 03 21 D8 [R]
F00:2379       	bne localfailed456
               S01:00033F88:  66 02
F00:2380       	jmp ctb451
               S01:00033F8A:  60 14
F00:2381       localfailed456: ;keep
F00:2382       	; ; logical OR, second chance
F00:2383       	cmp.w #$2c,musicPos
               S01:00033F8C:  0C 79 00 2C 00 03 21 D8 [R]
F00:2384       	bne localfailed455
               S01:00033F94:  66 02
F00:2385       	jmp ctb451
               S01:00033F96:  60 08
F00:2386       localfailed455: ;keep
F00:2387       	; ; logical OR, second chance
F00:2388       	cmp.w #$0,musicPos
               S01:00033F98:  4A 79 00 03 21 D8 [R]
F00:2389       	bne edblock453
               S01:00033F9E:  66 08
F00:2390       ctb451: ;Main true block ;keep 
F00:2391       	move.w #$9,effectNumber ; Simple a:=b optimization 
               S01:00033FA0:  33 FC 00 09 00 03 21 E2 [R]
F00:2392       edblock453
F00:2393       	jsr CopperEffects
               S01:00033FA8:  61 00 EF DE
F00:2394       	jmp caseend367
               S01:00033FAC:  60 00 00 B6
F00:2395       casenext448
F00:2396       	move #$9,d0
               S01:00033FB0:  30 3C 00 09
F00:2397       	cmp.w effectNumber,d0
               S01:00033FB4:  B0 7A E2 2C
F00:2398       	bne casenext458
               S01:00033FB8:  66 76
F00:2399       	cmp.w #$1,foamCounter
               S01:00033FBA:  0C 79 00 01 00 00 A0 C6 [R]
F00:2400       	bls eblock462
               S01:00033FC2:  63 12
F00:2401       ctb461: ;Main true block ;keep 
F00:2402       	jsr EffBeerDrink
               S01:00033FC4:  61 00 FA 4E
F00:2403       	sub.w #$1,foamCounter ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00033FC8:  53 79 00 00 A0 C6 [R]
F00:2404       	add.w #$1,yOffset ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00033FCE:  52 79 00 00 A0 CA [R]
F00:2405       	jmp edblock463
               S01:00033FD4:  60 54
F00:2406       eblock462
F00:2407       	move.l #imageRestoreCup,rc_srcimage ; Simple a:=b optimization 
               S01:00033FD6:  23 FC 00 02 3C F8 00 03 3A A0 [R]
F00:2408       	move.l screen,rc_dstimage ; Simple a:=b optimization 
               S01:00033FE0:  23 FA E1 EA 00 03 3A A4 [R]
F00:2409       	move.w #$3d,rc_yoffset ; Simple a:=b optimization 
               S01:00033FE8:  33 FC 00 3D 00 03 3A A8 [R]
F00:2410       	moveq #0,d0
               S01:00033FF0:  70 00
F00:2411       	move.w #$a2,d0
               S01:00033FF2:  30 3C 00 A2
F00:2412       	move.l d0,rc_height
               S01:00033FF6:  23 C0 00 03 3A AA [R]
F00:2413       	jsr RestoreCup
               S01:00033FFC:  61 00 FA B2
F00:2414       	cmp.w #$1c,musicPos
               S01:00034000:  0C 79 00 1C 00 03 21 D8 [R]
F00:2415       	bne localfailed482
               S01:00034008:  66 02
F00:2416       	jmp ctb477
               S01:0003400A:  60 16
F00:2417       localfailed482: ;keep
F00:2418       	; ; logical OR, second chance
F00:2419       	cmp.w #$30,musicPos
               S01:0003400C:  0C 79 00 30 00 03 21 D8 [R]
F00:2420       	bne localfailed481
               S01:00034014:  66 02
F00:2421       	jmp ctb477
               S01:00034016:  60 0A
F00:2422       localfailed481: ;keep
F00:2423       	; ; logical OR, second chance
F00:2424       	cmp.w #$4,musicPos
               S01:00034018:  0C 79 00 04 00 03 21 D8 [R]
F00:2425       	bne edblock479
               S01:00034020:  66 08
F00:2426       ctb477: ;Main true block ;keep 
F00:2427       	move.w #$a,effectNumber ; Simple a:=b optimization 
               S01:00034022:  33 FC 00 0A 00 03 21 E2 [R]
F00:2428       edblock479
F00:2429       edblock463
F00:2430       	jsr CopperEffects
               S01:0003402A:  61 00 EF 5C
F00:2431       	jmp caseend367
               S01:0003402E:  60 34
F00:2432       casenext458
F00:2433       	move #$a,d0
               S01:00034030:  30 3C 00 0A
F00:2434       	cmp.w effectNumber,d0
               S01:00034034:  B0 7A E1 AC
F00:2435       	bne casenext484
               S01:00034038:  66 2A
F00:2436       	add.w #$1,beerinput ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0003403A:  52 79 00 03 21 DC [R]
F00:2437       	jsr DistortMore
               S01:00034040:  61 00 F0 B0
F00:2438       	move.w #$0,eff0Counter ; Simple a:=b optimization 
               S01:00034044:  33 FC 00 00 00 00 A0 C8 [R]
F00:2439       	move.w #$4,effectNumber ; Simple a:=b optimization 
               S01:0003404C:  33 FC 00 04 00 03 21 E2 [R]
F00:2440       	move.w #$97,foamCounter ; Simple a:=b optimization 
               S01:00034054:  33 FC 00 97 00 00 A0 C6 [R]
F00:2441       	move.w #$1,yOffset ; Simple a:=b optimization 
               S01:0003405C:  33 FC 00 01 00 00 A0 CA [R]
F00:2442       casenext484
F00:2443       caseend367
F00:2444       	jmp while238
               S01:00034064:  60 00 FD 10
F00:2445       edblock241
F00:2446       loopend243
F00:2447       	 	CNOP 0,4
F00:2448       	 	CNOP 0,4
F00:2449       ; exit gracefully - reverse everything done in init
F00:2450       	move.w #$7fff,DMACON
               S01:00034068:  33 FC 7F FF 00 DF F0 96
F00:2451       	move.w	olddmareq,DMACON
               S01:00034070:  33 FA 00 A6 00 DF F0 96
F00:2452       	move.w #$7fff,INTENA
               S01:00034078:  33 FC 7F FF 00 DF F0 9A
F00:2453       	move.w	oldintena,INTENA
               S01:00034080:  33 FA 00 9A 00 DF F0 9A
F00:2454       	move.w #$7fff,INTREQ
               S01:00034088:  33 FC 7F FF 00 DF F0 9C
F00:2455       	move.w	oldintreq,INTREQ
               S01:00034090:  33 FA 00 88 00 DF F0 9C
F00:2456       	move.w #$7fff,ADKCON
               S01:00034098:  33 FC 7F FF 00 DF F0 9E
F00:2457       	move.w	oldadkcon,ADKCON
               S01:000340A0:  33 FA 00 7C 00 DF F0 9E
F00:2458       
F00:2459       	move.l	oldcopper,COP1LCH
               S01:000340A8:  23 FA 00 62 00 DF F0 80
F00:2460       	move.l 	gfxbase,a6
               S01:000340B0:  2C 7A 00 5E
F00:2461       	move.l 	oldview,a1
               S01:000340B4:  22 7A 00 52
F00:2462       	jsr -222(a6)	; LoadView
               S01:000340B8:  4E AE FF 22
F00:2463       	jsr -270(a6)	; WaitTOF
               S01:000340BC:  4E AE FE F2
F00:2464       	jsr -270(a6)	; WaitTOF
               S01:000340C0:  4E AE FE F2
F00:2465       	move.l	$4,a6
               S01:000340C4:  2C 78 00 04
F00:2466       	jsr -138(a6)	; Permit
               S01:000340C8:  4E AE FF 76
F00:2467       
F00:2468       	; end program
F00:2469       	movem.l (sp)+,d0-d7/a0-a6
               S01:000340CC:  4C DF 7F FF
F00:2470       	rts
               S01:000340D0:  4E 75
F00:2471       
F00:2472       
F00:2473       ;** PROCEDURES
F00:2474       ; d6 = src shift
F00:2475       ; d1 = dst x
F00:2476       ; d2 = dst y
F00:2477       ; d3 = modulo
F00:2478       ; a0 = source
F00:2479       ; a1 = dest
F00:2480       ; d4 = blitter size
F00:2481       ; d5 = bltmod
F00:2482       blitter:
F00:2483           add.l   d6,a0
               S01:000340D2:  D1 C6
F00:2484           mulu.w  d3,d2
               S01:000340D4:  C4 C3
F00:2485           add.l   d1,d2
               S01:000340D6:  D4 81
F00:2486           add.l   d2,a1
               S01:000340D8:  D3 C2
F00:2487                               ; Leftshift 1, use channels A and D, copy A -> D
F00:2488       
F00:2489           move.l  #$ffffffff,BLTAFWM(a6) ; Set last word and first word mask BLTAFWM and BLTALWM
               S01:000340DA:  2D 7C FF FF FF FF 00 44
F00:2490       .lp:
F00:2491       
F00:2492       .litwait: ; Wait for blitter to be done
F00:2493           btst    #14,DMACONR
               S01:000340E2:  08 39 00 0E 00 DF F0 02
F00:2494           bne.s   .litwait
               S01:000340EA:  66 F6
F00:2495       
F00:2496           move.w  d0,BLTCON0(a6)  ; Set registers; BLTCON0
               S01:000340EC:  3D 40 00 40
F00:2497           move.l  a0,BLTAPTH(a6) ; src 
               S01:000340F0:  2D 48 00 50
F00:2498           move.l  a1,BLTBPTH(a6) ; BLT Dest PTR
               S01:000340F4:  2D 49 00 4C
F00:2499           move.l  a1,BLTCPTH(a6) ; BLT Dest PTR
               S01:000340F8:  2D 49 00 48
F00:2500           move.l  a1,BLTDPTH(a6) ; BLT Dest PTR
               S01:000340FC:  2D 49 00 54
F00:2501           move.w  d4,BLTSIZE(a6) ; BLTSIZE & Start blitter
               S01:00034100:  3D 44 00 58
F00:2502           rts
               S01:00034104:  4E 75
F00:2503       
F00:2504       ; 1001
F00:2505       
F00:2506       
F00:2507       
F00:2508       
F00:2509       ; storage for 32-bit addresses and data
F00:2510       	CNOP 0,4
F00:2511       oldview:	dc.l 0
               S01:00034108:  00 00 00 00
F00:2512       oldcopper:	dc.l 0
               S01:0003410C:  00 00 00 00
F00:2513       gfxbase:	dc.l 0
               S01:00034110:  00 00 00 00
F00:2514       frame:          dc.l 0
               S01:00034114:  00 00 00 00
F00:2515       
F00:2516       ; storage for 16-bit data
F00:2517       	CNOP 0,4
F00:2518       olddmareq:	dc.w 0
               S01:00034118:  00 00
F00:2519       oldintreq:	dc.w 0
               S01:0003411A:  00 00
F00:2520       oldintena:	dc.w 0
               S01:0003411C:  00 00
F00:2521       oldadkcon:	dc.w 0
               S01:0003411E:  00 00
F00:2522       
F00:2523       copper_index    dc.w 0
               S01:00034120:  00 00
F00:2524       	CNOP 0,4
F00:2525       gfxname: dc.b 'graphics.library',0
               S01:00034124:  67 72 61 70 68 69 63 73 2E 6C 69 62 72 61 72 79
               S01:00034134:  00
F00:2526       
F00:2527       
F00:2528       
F00:2529         section datachip,data_c
F00:2530       
F00:2531       Chip:
F00:2532       
F00:2533           even
F00:2534       cop:
F00:2535           dc.w    $008e
               S02:00000000:  00 8E
F00:2536       copper_diwstrt:
F00:2537           dc.w    $2c81,$0090
               S02:00000002:  2C 81
               S02:00000004:  00 90
F00:2538       copper_diwstop:
F00:2539           dc.w    $2cc1
               S02:00000006:  2C C1
F00:2540       
F00:2541           
F00:2542           dc.w    $0092
               S02:00000008:  00 92
F00:2543       ddfstrt:
F00:2544       ; 
F00:2545           dc.w    $0038,$0094
               S02:0000000A:  00 38
               S02:0000000C:  00 94
F00:2546       ddfstop:
F00:2547           dc.w    $00d0
               S02:0000000E:  00 D0
F00:2548           dc.w    $0108
               S02:00000010:  01 08
F00:2549       copper_mod_even:
F00:2550       
F00:2551       ;set bplmodulo here
F00:2552           dc.w    0,$010a
               S02:00000012:  00 00
               S02:00000014:  01 0A
F00:2553       copper_mod_odd:
F00:2554       ;set bplmodulo here
F00:2555           dc.w    0
               S02:00000016:  00 00
F00:2556       
F00:2557       
F00:2558       
F00:2559       
F00:2560           
F00:2561       copper_spritestruct0:
F00:2562           dc.w $120,0, $122,0
               S02:00000018:  01 20
               S02:0000001A:  00 00
               S02:0000001C:  01 22
               S02:0000001E:  00 00
F00:2563       copper_spritestruct1:
F00:2564           dc.w $124,0, $126,0
               S02:00000020:  01 24
               S02:00000022:  00 00
               S02:00000024:  01 26
               S02:00000026:  00 00
F00:2565       copper_spritestruct2:
F00:2566           dc.w $128,0, $12A,0
               S02:00000028:  01 28
               S02:0000002A:  00 00
               S02:0000002C:  01 2A
               S02:0000002E:  00 00
F00:2567       copper_spritestruct3:
F00:2568           dc.w $12C,0, $12E,0
               S02:00000030:  01 2C
               S02:00000032:  00 00
               S02:00000034:  01 2E
               S02:00000036:  00 00
F00:2569       copper_spritestruct4:
F00:2570           dc.w $130,0, $132,0
               S02:00000038:  01 30
               S02:0000003A:  00 00
               S02:0000003C:  01 32
               S02:0000003E:  00 00
F00:2571       copper_spritestruct5:
F00:2572           dc.w $134,0, $136,0
               S02:00000040:  01 34
               S02:00000042:  00 00
               S02:00000044:  01 36
               S02:00000046:  00 00
F00:2573       copper_spritestruct6:
F00:2574           dc.w $138,0, $13A,0
               S02:00000048:  01 38
               S02:0000004A:  00 00
               S02:0000004C:  01 3A
               S02:0000004E:  00 00
F00:2575       copper_spritestruct7:
F00:2576           dc.w $13C,0, $13E,0
               S02:00000050:  01 3C
               S02:00000052:  00 00
               S02:00000054:  01 3E
               S02:00000056:  00 00
F00:2577       
F00:2578       copper_spritedata0:
F00:2579           dc.w $144,0, $146,0
               S02:00000058:  01 44
               S02:0000005A:  00 00
               S02:0000005C:  01 46
               S02:0000005E:  00 00
F00:2580       copper_spritedata1:
F00:2581           dc.w $14C,0, $14E,0
               S02:00000060:  01 4C
               S02:00000062:  00 00
               S02:00000064:  01 4E
               S02:00000066:  00 00
F00:2582       
F00:2583       
F00:2584       copper_palette:
F00:2585           dc.w    $0180, $000
               S02:00000068:  01 80
               S02:0000006A:  00 00
F00:2586           dc.w    $0182, $fff
               S02:0000006C:  01 82
               S02:0000006E:  0F FF
F00:2587           dc.w    $0184, $236
               S02:00000070:  01 84
               S02:00000072:  02 36
F00:2588           dc.w    $0186, $ba7
               S02:00000074:  01 86
               S02:00000076:  0B A7
F00:2589           dc.w    $0188, $836
               S02:00000078:  01 88
               S02:0000007A:  08 36
F00:2590           dc.w    $018a, $485
               S02:0000007C:  01 8A
               S02:0000007E:  04 85
F00:2591           dc.w    $018c, $723
               S02:00000080:  01 8C
               S02:00000082:  07 23
F00:2592           dc.w    $018e, $6cb
               S02:00000084:  01 8E
               S02:00000086:  06 CB
F00:2593           dc.w    $0190, $246
               S02:00000088:  01 90
               S02:0000008A:  02 46
F00:2594           dc.w    $0192, $034
               S02:0000008C:  01 92
               S02:0000008E:  00 34
F00:2595           dc.w    $0194, $569
               S02:00000090:  01 94
               S02:00000092:  05 69
F00:2596           dc.w    $0196, $444
               S02:00000094:  01 96
               S02:00000096:  04 44
F00:2597           dc.w    $0198, $666
               S02:00000098:  01 98
               S02:0000009A:  06 66
F00:2598           dc.w    $019a, $8d9
               S02:0000009C:  01 9A
               S02:0000009E:  08 D9
F00:2599           dc.w    $019c, $b56
               S02:000000A0:  01 9C
               S02:000000A2:  0B 56
F00:2600           dc.w    $019e, $999
               S02:000000A4:  01 9E
               S02:000000A6:  09 99
F00:2601       
F00:2602           dc.w    $01A0, $000
               S02:000000A8:  01 A0
               S02:000000AA:  00 00
F00:2603           dc.w    $01A2, $fff
               S02:000000AC:  01 A2
               S02:000000AE:  0F FF
F00:2604           dc.w    $01A4, $236
               S02:000000B0:  01 A4
               S02:000000B2:  02 36
F00:2605           dc.w    $01A6, $ba7
               S02:000000B4:  01 A6
               S02:000000B6:  0B A7
F00:2606           dc.w    $01A8, $836
               S02:000000B8:  01 A8
               S02:000000BA:  08 36
F00:2607           dc.w    $01Aa, $485
               S02:000000BC:  01 AA
               S02:000000BE:  04 85
F00:2608           dc.w    $01Ac, $723
               S02:000000C0:  01 AC
               S02:000000C2:  07 23
F00:2609           dc.w    $01Ae, $6cb
               S02:000000C4:  01 AE
               S02:000000C6:  06 CB
F00:2610           dc.w    $01B0, $246
               S02:000000C8:  01 B0
               S02:000000CA:  02 46
F00:2611           dc.w    $01B2, $034
               S02:000000CC:  01 B2
               S02:000000CE:  00 34
F00:2612           dc.w    $01B4, $569
               S02:000000D0:  01 B4
               S02:000000D2:  05 69
F00:2613           dc.w    $01B6, $444
               S02:000000D4:  01 B6
               S02:000000D6:  04 44
F00:2614           dc.w    $01B8, $666
               S02:000000D8:  01 B8
               S02:000000DA:  06 66
F00:2615           dc.w    $01Ba, $8d9
               S02:000000DC:  01 BA
               S02:000000DE:  08 D9
F00:2616           dc.w    $01Bc, $b56
               S02:000000E0:  01 BC
               S02:000000E2:  0B 56
F00:2617           dc.w    $01Be, $999
               S02:000000E4:  01 BE
               S02:000000E6:  09 99
F00:2618       
F00:2619       
F00:2620       
F00:2621       
F00:2622       
F00:2623       copper_bitplane0:
F00:2624           dc.w    $e0,0
               S02:000000E8:  00 E0
               S02:000000EA:  00 00
F00:2625           dc.w    $e2,0
               S02:000000EC:  00 E2
               S02:000000EE:  00 00
F00:2626       copper_bitplane1:
F00:2627           dc.w    $e4,0
               S02:000000F0:  00 E4
               S02:000000F2:  00 00
F00:2628           dc.w    $e6,0
               S02:000000F4:  00 E6
               S02:000000F6:  00 00
F00:2629       copper_bitplane2:
F00:2630           dc.w    $e8,0
               S02:000000F8:  00 E8
               S02:000000FA:  00 00
F00:2631           dc.w    $ea,0
               S02:000000FC:  00 EA
               S02:000000FE:  00 00
F00:2632       copper_bitplane3:
F00:2633           dc.w    $ec,0
               S02:00000100:  00 EC
               S02:00000102:  00 00
F00:2634           dc.w    $ee,0
               S02:00000104:  00 EE
               S02:00000106:  00 00
F00:2635       copper_bitplane4:
F00:2636           dc.w    $f0,0
               S02:00000108:  00 F0
               S02:0000010A:  00 00
F00:2637           dc.w    $f2,0
               S02:0000010C:  00 F2
               S02:0000010E:  00 00
F00:2638       
F00:2639       
F00:2640       copbplcon1:
F00:2641           dc.l    $01020000
               S02:00000110:  01 02 00 00
F00:2642           dc.l    $2c01fffe
               S02:00000114:  2C 01 FF FE
F00:2643       copbplcon0
F00:2644       ; Set bitplane  B
F00:2645          dc.w    $0100
               S02:00000118:  01 00
F00:2646       copper_resolution
F00:2647          dc.w     $4200 
               S02:0000011A:  42 00
F00:2648       
F00:2649       copper_custom:
F00:2650           dc.w	$ffdf, $fffe
               S02:0000011C:  FF DF
               S02:0000011E:  FF FE
F00:2651           dc.w	$2401, $fffe
               S02:00000120:  24 01
               S02:00000122:  FF FE
F00:2652           dc.w	$0100, $0200
               S02:00000124:  01 00
               S02:00000126:  02 00
F00:2653           dc.l    $fffffffe
               S02:00000128:  FF FF FF FE
F00:2654       
F00:2655       ;    dc.l    $2d01fffe, $01800000
F00:2656        ;   dc.l    $8001fffe, $01002200
F00:2657         ;  dc.l    $9001fffe, $01001200
F00:2658       ;    dc.l    $ffdffffe
F00:2659        ;   dc.l    $0d01fffe, $01000200
F00:2660        blk.l   1024
F00:2661           dc.l    $fffffffe
               S02:0000112C:  FF FF FF FE
F00:2662       
F00:2663       
F00:2664       spritepointer:
F00:2665           blk.b    256
F00:2666       
F00:2667       
F00:2668       
F00:2669       
F00:2670       
F00:2671       
F00:2672       	Section ChipRAM,Data_c
F00:2673        	CNOP 0,4
F00:2674       	 	CNOP 0,4
F00:2675       music
F00:2676       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/music/terra-mesta4.lsmusic"
               S03:00000000:  4C 53 50 31 6F 05 33 94 01 19 00 00 00 7D 00 2D
               S03:00000010:  00 35 00 3D 00 00 3A 00 00 30 00 00 37 8C 0D 1D
F00:2677       	 	CNOP 0,4
F00:2678       	 	CNOP 0,4
F00:2679       bank
F00:2680       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/music/terra-mesta4.lsbank"
               S03:0001BFB8:  6F 05 33 94 1A 31 44 AC 5E 64 67 68 67 64 60 5B
               S03:0001BFC8:  55 4E 47 3F 36 2E 26 1F 17 10 0A 04 FD F7 F1 EB
F00:2681       	 	CNOP 0,4
F00:2682       	 	CNOP 0,4
F00:2683       imageRestoreCup
F00:2684       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/restorecup.BPL"
               S03:00023CF8:  00 28 00 00 00 00 00 00 00 00 02 80 00 2C 00 00
               S03:00023D08:  00 00 00 00 00 00 03 40 00 38 00 00 00 00 00 00
F00:2685       	 	CNOP 0,4
F00:2686       	 	CNOP 0,4
F00:2687       image1
F00:2688       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/cupempty.BPL"
               S03:000262F0:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
               S03:00026300:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
F00:2689       	 	CNOP 0,4
F00:2690       	 	CNOP 0,4
F00:2691       image2
F00:2692       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/cupempty.BPL"
               S03:00041A00:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
               S03:00041A10:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
F00:2693       	 	CNOP 0,4
F00:2694       	 	CNOP 0,4
F00:2695       imageCupFull
F00:2696       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/cupfull.BPL"
               S03:0005D110:  00 5F E1 FC 00 00 00 3F FA 1F FF A0 00 3F F8 7F
               S03:0005D120:  FF FF FF FF 00 7E 01 50 00 60 40 00 00 00 01 FF
F00:2697       	 	CNOP 0,4
F00:2698       	 	CNOP 0,4
F00:2699       imageFoam
F00:2700       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/foam.BPL"
               S03:0005F21C:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
               S03:0005F22C:  00 00 00 00 00 2C 00 00 00 00 00 00 00 00 00 00
F00:2701       	 	CNOP 0,4
F00:2702       	 	CNOP 0,4
F00:2703       imageMask
F00:2704       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/mask.BPL"
               S03:0005F690:  00 00 00 00 00 00 00 00 00 74 00 00 00 00 00 00
               S03:0005F6A0:  00 00 00 01 FF FF E0 00 00 00 01 FF 00 00 00 1F
F00:2705       	 	CNOP 0,4
F00:2706       


Sections:
S01  CODE
S02  datachip
S03  ChipRAM


Sources:
F00  C:\Users\uersu\Documents\GitData\compofiller\\main.asm


Symbols:
spritepointer LAB (0x1130) UNUSED sec=datachip 
copbplcon0 LAB (0x118) UNUSED sec=datachip 
copbplcon1 LAB (0x110) UNUSED sec=datachip 
copper_spritedata1 LAB (0x60) UNUSED sec=datachip 
copper_spritedata0 LAB (0x58) UNUSED sec=datachip 
copper_spritestruct7 LAB (0x50) UNUSED sec=datachip 
copper_spritestruct6 LAB (0x48) UNUSED sec=datachip 
copper_spritestruct5 LAB (0x40) UNUSED sec=datachip 
copper_spritestruct4 LAB (0x38) UNUSED sec=datachip 
copper_spritestruct3 LAB (0x30) UNUSED sec=datachip 
copper_spritestruct2 LAB (0x28) UNUSED sec=datachip 
copper_spritestruct1 LAB (0x20) UNUSED sec=datachip 
copper_spritestruct0 LAB (0x18) UNUSED sec=datachip 
ddfstop LAB (0xe) UNUSED sec=datachip 
ddfstrt LAB (0xa) UNUSED sec=datachip 
copper_diwstop LAB (0x6) UNUSED sec=datachip 
copper_diwstrt LAB (0x2) UNUSED sec=datachip 
Chip LAB (0x0) UNUSED sec=datachip 
copper_index LAB (0x34120) UNUSED sec=CODE 
frame LAB (0x34114) UNUSED sec=CODE 
 blitter .litwait LAB (0x340e2) sec=CODE 
 blitter .lp LAB (0x340e2) UNUSED sec=CODE 
loopend243 LAB (0x34068) UNUSED sec=CODE 
casenext484 LAB (0x34064) sec=CODE 
edblock479 LAB (0x3402a) sec=CODE 
localfailed481 LAB (0x34018) sec=CODE 
ctb477 LAB (0x34022) sec=CODE 
localfailed482 LAB (0x3400c) sec=CODE 
edblock463 LAB (0x3402a) sec=CODE 
ctb461 LAB (0x33fc4) UNUSED sec=CODE 
eblock462 LAB (0x33fd6) sec=CODE 
casenext458 LAB (0x34030) sec=CODE 
edblock453 LAB (0x33fa8) sec=CODE 
localfailed455 LAB (0x33f98) sec=CODE 
ctb451 LAB (0x33fa0) sec=CODE 
localfailed456 LAB (0x33f8c) sec=CODE 
casenext448 LAB (0x33fb0) sec=CODE 
edblock443 LAB (0x33f72) sec=CODE 
ctb441 LAB (0x33f64) UNUSED sec=CODE 
eblock442 LAB (0x33f6a) sec=CODE 
casenext438 LAB (0x33f76) sec=CODE 
edblock433 LAB (0x33f46) sec=CODE 
localfailed435 LAB (0x33f34) sec=CODE 
ctb431 LAB (0x33f3e) sec=CODE 
localfailed436 LAB (0x33f28) sec=CODE 
edblock425 LAB (0x33f1c) sec=CODE 
ctb423 LAB (0x33f0a) UNUSED sec=CODE 
eblock424 LAB (0x33f14) sec=CODE 
casenext420 LAB (0x33f4a) sec=CODE 
ctb415 LAB (0x33e8c) UNUSED sec=CODE 
edblock417 LAB (0x33ee4) sec=CODE 
edblock409 LAB (0x33e82) sec=CODE 
localfailed411 LAB (0x33e70) sec=CODE 
ctb407 LAB (0x33e7a) sec=CODE 
localfailed412 LAB (0x33e64) sec=CODE 
casenext404 LAB (0x33ef2) sec=CODE 
edblock399 LAB (0x33e3c) sec=CODE 
ctb397 LAB (0x33e2e) UNUSED sec=CODE 
eblock398 LAB (0x33e34) sec=CODE 
casenext394 LAB (0x33e4c) sec=CODE 
ctb389 LAB (0x33e0c) UNUSED sec=CODE 
edblock391 LAB (0x33e14) sec=CODE 
casenext386 LAB (0x33e1c) sec=CODE 
edblock381 LAB (0x33dec) sec=CODE 
ctb379 LAB (0x33dde) UNUSED sec=CODE 
eblock380 LAB (0x33de4) sec=CODE 
casenext376 LAB (0x33df4) sec=CODE 
caseend367 LAB (0x34064) sec=CODE 
ctb371 LAB (0x33dbe) UNUSED sec=CODE 
edblock373 LAB (0x33dc6) sec=CODE 
casenext368 LAB (0x33dca) sec=CODE 
waitVB366 LAB (0x33d80) sec=CODE 
ctb239 LAB (0x33d80) UNUSED sec=CODE 
edblock241 LAB (0x34068) sec=CODE 
loopstart242 LAB (0x33d76) UNUSED sec=CODE 
while238 LAB (0x33d76) sec=CODE 
memcpy237 LAB (0x33d70) sec=CODE 
copper_palette LAB (0x68) REF sec=datachip 
bank LAB (0x1bfb8) REF sec=ChipRAM 
music LAB (0x0) REF sec=ChipRAM 
Get_Musicpos LAB (0x33cee) sec=CODE 
waitforblitter235 LAB (0x33c98) sec=CODE 
waitforblitter234 LAB (0x33c2a) sec=CODE 
waitforblitter233 LAB (0x33bbc) sec=CODE 
waitforblitter232 LAB (0x33b4e) sec=CODE 
waitforblitter231 LAB (0x33ae0) sec=CODE 
RestoreCup LAB (0x33ab0) sec=CODE 
rc_height LAB (0x33aaa) REF sec=CODE 
rc_yoffset LAB (0x33aa8) REF sec=CODE 
rc_dstimage LAB (0x33aa4) REF sec=CODE 
rc_srcimage LAB (0x33aa0) REF sec=CODE 
block230 LAB (0x33ab0) sec=CODE 
EffScrolldown LAB (0x33a92) sec=CODE 
EffScrollup LAB (0x33a86) sec=CODE 
edblock223 LAB (0x33a84) sec=CODE 
ctb221 LAB (0x33a34) UNUSED sec=CODE 
eblock222 LAB (0x33a5e) sec=CODE 
EffBeerDrink LAB (0x33a14) sec=CODE 
edblock214 LAB (0x33a12) sec=CODE 
ctb212 LAB (0x339c2) UNUSED sec=CODE 
eblock213 LAB (0x339ec) sec=CODE 
ctb206 LAB (0x339ac) UNUSED sec=CODE 
edblock208 LAB (0x339b8) sec=CODE 
imageCupFull LAB (0x5d110) REF sec=ChipRAM 
EffBeerFill LAB (0x33976) sec=CODE 
EffBeerFoam LAB (0x33946) sec=CODE 
waitforblitter202 LAB (0x338dc) sec=CODE 
waitforblitter201 LAB (0x33860) sec=CODE 
waitforblitter200 LAB (0x337e4) sec=CODE 
waitforblitter199 LAB (0x33768) sec=CODE 
waitforblitter198 LAB (0x336ec) sec=CODE 
imageRestoreCup LAB (0x23cf8) REF sec=ChipRAM 
ctb193 LAB (0x336da) UNUSED sec=CODE 
edblock195 LAB (0x336e2) sec=CODE 
RemoveFoam LAB (0x336d0) sec=CODE 
rf_yoffset LAB (0x336ce) REF sec=CODE 
rf_dstimage LAB (0x336ca) REF sec=CODE 
block191 LAB (0x336d0) sec=CODE 
edblock186 LAB (0x33620) sec=CODE 
image2 LAB (0x41a00) REF sec=ChipRAM 
image1 LAB (0x262f0) REF sec=ChipRAM 
ctb184 LAB (0x335ae) UNUSED sec=CODE 
eblock185 LAB (0x335e8) sec=CODE 
FlipBuffers LAB (0x335a6) sec=CODE 
waitforblitter181 LAB (0x3353c) sec=CODE 
waitforblitter180 LAB (0x334ba) sec=CODE 
waitforblitter179 LAB (0x33438) sec=CODE 
waitforblitter178 LAB (0x333b6) sec=CODE 
blitter LAB (0x340d2) sec=CODE 
waitforblitter177 LAB (0x33334) sec=CODE 
FillDrinkBeer LAB (0x33334) sec=CODE 
fd_srcimageoffset LAB (0x33330) REF sec=CODE 
fd_srcimage LAB (0x3332c) REF sec=CODE 
yoffset LAB (0x3332a) REF sec=CODE 
dstimage LAB (0x33326) REF sec=CODE 
block176 LAB (0x33334) sec=CODE 
waitforblitter175 LAB (0x331aa) sec=CODE 
imageMask LAB (0x5f690) REF sec=ChipRAM 
imageFoam LAB (0x5f21c) REF sec=ChipRAM 
BeerFoam LAB (0x3314c) sec=CODE 
foampos LAB (0x33148) REF sec=CODE 
foamsize LAB (0x33146) REF sec=CODE 
bf_dstimage LAB (0x33142) REF sec=CODE 
block174 LAB (0x3314c) sec=CODE 
loopend171 LAB (0x3313e) UNUSED sec=CODE 
loopstart170 LAB (0x3312e) UNUSED sec=CODE 
forloop169 LAB (0x330fa) sec=CODE 
DistortMore LAB (0x330f2) sec=CODE 
edblock163 LAB (0x330f0) sec=CODE 
ctb161 LAB (0x330e0) UNUSED sec=CODE 
eblock162 LAB (0x330e8) sec=CODE 
loopend145 LAB (0x330ce) UNUSED sec=CODE 
ctb155 LAB (0x330c0) UNUSED sec=CODE 
edblock157 LAB (0x330c4) sec=CODE 
ctb141 LAB (0x330b0) UNUSED sec=CODE 
edblock143 LAB (0x330ce) sec=CODE 
loopstart144 LAB (0x330a6) UNUSED sec=CODE 
while140 LAB (0x330a6) sec=CODE 
loopend125 LAB (0x330a6) UNUSED sec=CODE 
ctb135 LAB (0x33098) UNUSED sec=CODE 
edblock137 LAB (0x3309c) sec=CODE 
ctb121 LAB (0x33088) UNUSED sec=CODE 
edblock123 LAB (0x330a6) sec=CODE 
loopstart124 LAB (0x3307e) UNUSED sec=CODE 
while120 LAB (0x3307e) sec=CODE 
ctb115 LAB (0x33072) UNUSED sec=CODE 
edblock117 LAB (0x33076) sec=CODE 
ctb103 LAB (0x3305e) UNUSED sec=CODE 
edblock105 LAB (0x3307e) sec=CODE 
loopend87 LAB (0x33054) UNUSED sec=CODE 
ctb97 LAB (0x33046) UNUSED sec=CODE 
edblock99 LAB (0x3304a) sec=CODE 
ctb83 LAB (0x33036) UNUSED sec=CODE 
edblock85 LAB (0x33054) sec=CODE 
loopstart86 LAB (0x33024) UNUSED sec=CODE 
while82 LAB (0x33024) sec=CODE 
ctb77 LAB (0x33014) UNUSED sec=CODE 
edblock79 LAB (0x33018) sec=CODE 
ctb65 LAB (0x33004) UNUSED sec=CODE 
edblock67 LAB (0x33024) sec=CODE 
loopend49 LAB (0x32ffa) UNUSED sec=CODE 
ctb59 LAB (0x32fec) UNUSED sec=CODE 
edblock61 LAB (0x32ff0) sec=CODE 
ctb45 LAB (0x32fdc) UNUSED sec=CODE 
edblock47 LAB (0x32ffa) sec=CODE 
loopstart48 LAB (0x32fce) UNUSED sec=CODE 
while44 LAB (0x32fce) sec=CODE 
copper_custom LAB (0x11c) REF sec=datachip 
CopperEffects LAB (0x32f88) sec=CODE 
memcpy42 LAB (0x32f7c) sec=CODE 
ColorCycleRestore LAB (0x32f60) sec=CODE 
memcpy40 LAB (0x32f54) sec=CODE 
ColorCycle LAB (0x32f38) sec=CODE 
c_edblock136 LAB (0x32f2e) sec=CODE 
c_ctb134 LAB (0x32f1e) UNUSED sec=CODE 
c_eblock135 LAB (0x32f26) sec=CODE 
c_ctb128 LAB (0x32f12) UNUSED sec=CODE 
c_edblock130 LAB (0x32f14) sec=CODE 
c_edblock104 LAB (0x32f14) sec=CODE 
c_ctb121 LAB (0x32efe) UNUSED sec=CODE 
c_edblock123 LAB (0x32f00) sec=CODE 
c_ctb102 LAB (0x32ef6) UNUSED sec=CODE 
c_eblock103 LAB (0x32f0a) sec=CODE 
c_edblock40 LAB (0x32f14) sec=CODE 
c_ctb95 LAB (0x32eee) UNUSED sec=CODE 
c_edblock97 LAB (0x32ef0) sec=CODE 
c_ctb89 LAB (0x32eda) UNUSED sec=CODE 
c_edblock91 LAB (0x32edc) sec=CODE 
c_ctb38 LAB (0x32ed2) UNUSED sec=CODE 
c_eblock39 LAB (0x32ef2) sec=CODE 
DistortCopperLine LAB (0x32eb4) sec=CODE 
waitforblitter37 LAB (0x32e54) sec=CODE 
CookieCut LAB (0x32e54) sec=CODE 
cc_size LAB (0x32e50) REF sec=CODE 
cc_mask LAB (0x32e4c) REF sec=CODE 
cc_dst LAB (0x32e48) REF sec=CODE 
cc_src LAB (0x32e44) REF sec=CODE 
block36 LAB (0x32e54) sec=CODE 
 c2p1x1_5_c5_030 .x2end LAB (0x32e30) UNUSED sec=CODE 
 c2p1x1_5_c5_030 .x2 LAB (0x32e14) sec=CODE 
 c2p1x1_5_c5_030 .start2 LAB (0x32e1a) sec=CODE 
 c2p1x1_5_c5_030 .x1end LAB (0x32de6) UNUSED sec=CODE 
 c2p1x1_5_c5_030 .x1 LAB (0x32ce2) sec=CODE 
 c2p1x1_5_c5_030 .start1 LAB (0x32d5a) sec=CODE 
 c2p1x1_5_c5_030 .none LAB (0x32e32) sec=CODE 
_c2p1x1_5_c5_030 LAB (0x32c46) UNUSED EXPORT sec=CODE 
c2p1x1_5_c5_030_pixels LAB (0x32e3c) REF sec=CODE 
c2p1x1_5_c5_030_scroffs LAB (0x32e38) REF sec=CODE 
_c2p1x1_5_c5_030_init LAB (0x32c24) UNUSED EXPORT sec=CODE 
BPLSIZEX3 EXPR(61440=0xf000) EQU 
BPLSIZEX2 EXPR(40960=0xa000) EQU 
MINUBPLSIZEMINUS4 EXPR(-20484=0xffffaffc) EQU 
BPLY EXPR(512=0x200) EQU 
Load_c2p LAB (0x32c22) sec=CODE 
c2p1x1_5_c5_030 LAB (0x32c46) EXPORT sec=CODE 
c2p1x1_5_c5_030_init LAB (0x32c24) EXPORT sec=CODE 
BPLSIZE EXPR(20480=0x5000) EQU 
BPLX EXPR(320=0x140) EQU 
CHUNKYYMAX EXPR(512=0x200) EQU 
CHUNKYXMAX EXPR(320=0x140) EQU 
c2p_convert LAB (0x32bf4) sec=CODE 
bplbuffer LAB (0x32bee) REF sec=CODE 
chunkybuffer LAB (0x32bea) REF sec=CODE 
block34 LAB (0x32bf4) sec=CODE 
sizeof_LSPVars EXPR(46=0x2e) EQU 
m_relocDone EXPR(24=0x18) UNUSED EQU 
LSP_MusicGetPos LAB (0x32bb2) UNUSED sec=CODE 
 LSP_MusicSetPos .noTimingInfo LAB (0x32bb0) sec=CODE 
LSP_MusicSetPos LAB (0x32b90) UNUSED sec=CODE 
 LSP_MusicPlayTick .r_setPos LAB (0x32b62) UNUSED sec=CODE 
 LSP_MusicPlayTick .r_chgbpm LAB (0x32b78) sec=CODE 
 LSP_MusicPlayTick .r_rewind LAB (0x32b6a) sec=CODE 
 LSP_MusicPlayTick .noReset LAB (0x32b24) sec=CODE 
 LSP_MusicPlayTick .skip LAB (0x32b2c) sec=CODE 
 LSP_MusicPlayTick .setIns LAB (0x32b18) sec=CODE 
 LSP_MusicPlayTick .vloop LAB (0x32b06) sec=CODE 
 LSP_MusicPlayTick .resetv LAB (0x32b80) sec=CODE 
 LSP_MusicPlayTick .noPb LAB (0x32aea) sec=CODE 
 LSP_MusicPlayTick .noPc LAB (0x32ae2) sec=CODE 
 LSP_MusicPlayTick .noPd LAB (0x32ada) sec=CODE 
 LSP_MusicPlayTick .noPa LAB (0x32af2) sec=CODE 
 LSP_MusicPlayTick .noVa LAB (0x32aca) sec=CODE 
 LSP_MusicPlayTick .noVb LAB (0x32ac2) sec=CODE 
 LSP_MusicPlayTick .noVc LAB (0x32aba) sec=CODE 
 LSP_MusicPlayTick .noVd LAB (0x32ab2) sec=CODE 
 LSP_MusicPlayTick .cmdExec LAB (0x32aaa) sec=CODE 
 LSP_MusicPlayTick .noInst LAB (0x32b3c) sec=CODE 
 LSP_MusicPlayTick .cextended LAB (0x32b40) sec=CODE 
 LSP_MusicPlayTick .cloop LAB (0x32a9a) UNUSED sec=CODE 
 LSP_MusicPlayTick .process LAB (0x32a98) sec=CODE 
m_byteStreamLoop EXPR(28=0x1c) EQU 
m_wordStreamLoop EXPR(32=0x20) EQU 
m_byteStream EXPR(0=0x0) EQU 
m_wordStream EXPR(4=0x4) EQU 
 LSP_MusicInit .skipRel LAB (0x32a5a) sec=CODE 
 LSP_MusicInit .seqRel LAB (0x32a50) sec=CODE 
m_currentSeq EXPR(42=0x2a) EQU 
m_seqTable EXPR(38=0x26) EQU 
 LSP_MusicInit .noSeq LAB (0x32a60) sec=CODE 
m_seqCount EXPR(36=0x24) EQU 
m_codeTableAddr EXPR(12=0xc) EQU 
 LSP_MusicInit .relocated LAB (0x32a1e) sec=CODE 
 LSP_MusicInit .relocLoop LAB (0x32a14) sec=CODE 
m_lspInstruments EXPR(20=0x14) EQU 
m_escCodeGetPos EXPR(44=0x2c) EQU 
m_escCodeSetBpm EXPR(18=0x12) EQU 
m_escCodeRewind EXPR(16=0x10) EQU 
m_currentBpm EXPR(26=0x1a) EQU 
m_dmaconPatch EXPR(8=0x8) EQU 
LSP_State LAB (0x32bb8) sec=CODE 
 LSP_MusicInit .dataError LAB (0x32a8c) sec=CODE 
LSP_MusicDriver_CIA_Stop LAB (0x329a4) UNUSED sec=CODE 
 LSP_MusicDriver_CIA_Start .skipb LAB (0x32998) sec=CODE 
 LSP_MusicDriver_CIA_Start .LSP_DmaconIrq LAB (0x32978) sec=CODE 
 LSP_MusicDriver_CIA_Start .noChg LAB (0x32956) sec=CODE 
LSP_MusicPlayTick LAB (0x32a8e) sec=CODE 
 LSP_MusicDriver_CIA_Start .skipa LAB (0x3296c) sec=CODE 
 LSP_MusicDriver_CIA_Start .palClocks LAB (0x32910) sec=CODE 
 LSP_MusicDriver_CIA_Start .LSP_MainIrq LAB (0x32918) sec=CODE 
 LSP_MusicDriver_CIA_Start .ciaClock LAB (0x3289a) sec=CODE 
 LSP_MusicDriver_CIA_Start .LSP_IrqInstall LAB (0x328a4) sec=CODE 
 LSP_MusicDriver_CIA_Start .curBpm LAB (0x3289e) sec=CODE 
 LSP_MusicDriver_CIA_Start .pMusicBPM LAB (0x328a0) sec=CODE 
LSP_MusicInit LAB (0x329c6) sec=CODE 
 LSP_MusicDriver_CIA_Start .LSPDmaCon LAB (0x32894) sec=CODE 
 LSP_MusicDriver_CIA_Start .irqVector LAB (0x32896) sec=CODE 
lspend LAB (0x32be6) sec=CODE 
LSP_MusicDriver_CIA_Start LAB (0x3286a) sec=CODE 
LSP_CIAStart LAB (0x32848) sec=CODE 
cs_palntsc LAB (0x32844) REF sec=CODE 
cs_vbr LAB (0x32842) REF sec=CODE 
cs_bank LAB (0x3283e) REF sec=CODE 
cs_music LAB (0x3283a) REF sec=CODE 
block33 LAB (0x32848) sec=CODE 
ctb28 LAB (0x3281e) UNUSED sec=CODE 
edblock30 LAB (0x32836) sec=CODE 
ctb22 LAB (0x327da) UNUSED sec=CODE 
edblock24 LAB (0x32814) sec=CODE 
ctb16 LAB (0x32774) UNUSED sec=CODE 
edblock18 LAB (0x327d0) sec=CODE 
ctb10 LAB (0x326ec) UNUSED sec=CODE 
edblock12 LAB (0x3276a) sec=CODE 
copper_bitplane4 LAB (0x108) REF sec=datachip 
copper_bitplane3 LAB (0x100) REF sec=datachip 
copper_bitplane2 LAB (0xf8) REF sec=datachip 
copper_bitplane1 LAB (0xf0) REF sec=datachip 
copper_bitplane0 LAB (0xe8) REF sec=datachip 
ctb4 LAB (0x32642) UNUSED sec=CODE 
edblock6 LAB (0x326e2) sec=CODE 
copper_mod_odd LAB (0x16) REF sec=datachip 
copper_mod_even LAB (0x12) REF sec=datachip 
copper_resolution LAB (0x11a) REF sec=datachip 
Graphics_SetupNonInterlacedScreen LAB (0x325fc) sec=CODE 
block2 LAB (0x325fc) sec=CODE 
planeoffset LAB (0x325f4) REF sec=CODE 
tmp2 LAB (0x325f0) REF sec=CODE 
tmp LAB (0x325ee) REF sec=CODE 
row LAB (0x325ec) REF sec=CODE 
sine4CopperAdd LAB (0x323ec) sec=CODE 
sine4Copper LAB (0x321ec) sec=CODE 
srcimage LAB (0x321e8) REF sec=CODE 
imagemask LAB (0x321e4) REF sec=CODE 
effectNumber LAB (0x321e2) REF sec=CODE 
istart LAB (0x321e0) REF sec=CODE 
curbplmod LAB (0x321de) REF sec=CODE 
beerinput LAB (0x321dc) REF sec=CODE 
current LAB (0x321da) UNUSED sec=CODE 
musicPos LAB (0x321d8) REF sec=CODE 
bltsize LAB (0x321d6) REF sec=CODE 
i LAB (0x321d4) REF sec=CODE 
offscreen LAB (0x321d0) REF sec=CODE 
screen LAB (0x321cc) REF sec=CODE 
image_palette_cycled LAB (0x3214c) sec=CODE 
image_palette LAB (0x320cc) sec=CODE 
imagechunky LAB (0xa0cc) REF sec=CODE 
yOffset LAB (0xa0ca) REF sec=CODE 
eff0Counter LAB (0xa0c8) REF sec=CODE 
foamCounter LAB (0xa0c6) REF sec=CODE 
screenOffset LAB (0xa0c2) REF sec=CODE 
lightypos LAB (0xa0c0) REF sec=CODE 
curcopperpos LAB (0xa0bc) REF sec=CODE 
colorcycled LAB (0xa0ba) REF sec=CODE 
isDone LAB (0xa0b8) REF sec=CODE 
curBuf LAB (0xa0b6) REF sec=CODE 
c2p1x1_5_c5_030_tempbuf LAB (0xb6) REF sec=CODE 
Graphics_bytefill3 LAB (0xae) UNUSED sec=CODE 
Graphics_bytefill2 LAB (0xa4) UNUSED sec=CODE 
Graphics_bytefill1 LAB (0x9c) UNUSED sec=CODE 
Graphics_j LAB (0x9a) REF sec=CODE 
Graphics_bpl LAB (0x98) REF sec=CODE 
Graphics_pa LAB (0x94) REF sec=CODE 
block1 LAB (0x33cf8) REF sec=CODE 
cop LAB (0x0) REF sec=datachip 
oldcopper LAB (0x3410c) REF sec=CODE 
oldview LAB (0x34108) REF sec=CODE 
gfxbase LAB (0x34110) REF sec=CODE 
gfxname LAB (0x34124) REF sec=CODE 
oldadkcon LAB (0x3411e) REF sec=CODE 
oldintreq LAB (0x3411a) REF sec=CODE 
oldintena LAB (0x3411c) REF sec=CODE 
olddmareq LAB (0x34118) REF sec=CODE 
init LAB (0x0) UNUSED sec=CODE 
INTREQ2 EXPR(156=0x9c) UNUSED EQU 
INTENA2 EXPR(154=0x9a) UNUSED EQU 
ADKCON2 EXPR(158=0x9e) UNUSED EQU 
DMACON2 EXPR(150=0x96) UNUSED EQU 
INTREQ EXPR(14676124=0xdff09c) EQU 
INTENA EXPR(14676122=0xdff09a) EQU 
ADKCON EXPR(14676126=0xdff09e) EQU 
DMACON EXPR(14676118=0xdff096) EQU 
INTREQR2 EXPR(30=0x1e) UNUSED EQU 
INTENAR2 EXPR(28=0x1c) UNUSED EQU 
ADKCONR2 EXPR(16=0x10) UNUSED EQU 
DMACONR2 EXPR(2=0x2) UNUSED EQU 
COP1LCH2 EXPR(128=0x80) UNUSED EQU 
VPOSR2 EXPR(4=0x4) UNUSED EQU 
CIAAPRA2 EXPR(1=0x1) UNUSED EQU 
INTREQR EXPR(14675998=0xdff01e) EQU 
INTENAR EXPR(14675996=0xdff01c) EQU 
ADKCONR EXPR(14675984=0xdff010) EQU 
DMACONR EXPR(14675970=0xdff002) EQU 
COP1LCH EXPR(14676096=0xdff080) EQU 
VPOSR EXPR(14675972=0xdff004) EQU 
CIAAPRA EXPR(12574721=0xbfe001) UNUSED EQU 
BLTBDAT EXPR(114=0x72) UNUSED EQU 
BLTADAT EXPR(116=0x74) UNUSED EQU 
BLTSIZE EXPR(88=0x58) EQU 
BLTDPTH EXPR(84=0x54) EQU 
BLTCPTH EXPR(72=0x48) EQU 
BLTBPTH EXPR(76=0x4c) EQU 
BLTAPTL EXPR(82=0x52) UNUSED EQU 
BLTAPTH EXPR(80=0x50) EQU 
VHPOSR EXPR(6=0x6) UNUSED EQU 
BLTCON1 EXPR(66=0x42) EQU 
BLTCON0 EXPR(64=0x40) EQU 
BLTAFWM EXPR(68=0x44) EQU 
BLTDMOD EXPR(102=0x66) EQU 
BLTCMOD EXPR(96=0x60) EQU 
BLTBMOD EXPR(98=0x62) EQU 
BLTAMOD EXPR(100=0x64) EQU 
BPLCON2 EXPR(260=0x104) UNUSED EQU 
BPLCON1 EXPR(258=0x102) UNUSED EQU 
BPLCON0 EXPR(256=0x100) UNUSED EQU 
__LINE__ EXPR(2706=0xa92) INTERNAL 
__FO EXPR(0=0x0) INTERNAL 
__RS EXPR(46=0x2e) INTERNAL 
REPTN EXPR(-1=0xffffffff) INTERNAL 
__VASM EXPR(1=0x1) INTERNAL 

There have been no errors.

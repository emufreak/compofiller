F00:0001       BPLCON0=                    $100
F00:0002       BPLCON1=                    $102
F00:0003       BPLCON2=                    $104
F00:0004       BLTAMOD:                equ $64
F00:0005       BLTBMOD:                equ $62
F00:0006       BLTCMOD:                equ $60
F00:0007       BLTDMOD:                equ $66
F00:0008       BLTAFWM:                equ $44
F00:0009       BLTCON0:                equ $40
F00:0010       BLTCON1:                equ $42
F00:0011       VHPOSR:                 equ 6
F00:0012       BLTAPTH:                equ $50
F00:0013       BLTAPTL:                equ $52
F00:0014       BLTBPTH:                equ $4c
F00:0015       BLTCPTH:                equ $48
F00:0016       BLTDPTH:                equ $54
F00:0017       BLTSIZE:                equ $58
F00:0018       BLTADAT:                equ $74
F00:0019       BLTBDAT:                equ $72
F00:0020       CIAAPRA         EQU             $bfe001
F00:0021       VPOSR           EQU             $dff004
F00:0022       COP1LCH         EQU             $dff080
F00:0023       DMACONR		EQU		$dff002
F00:0024       ADKCONR		EQU		$dff010
F00:0025       INTENAR		EQU		$dff01c
F00:0026       INTREQR		EQU		$dff01e
F00:0027       CIAAPRA2         EQU             $001
F00:0028       VPOSR2           EQU             $004
F00:0029       COP1LCH2         EQU             $080
F00:0030       DMACONR2		EQU		$002
F00:0031       ADKCONR2		EQU		$010
F00:0032       INTENAR2		EQU		$01c
F00:0033       INTREQR2		EQU		$01e
F00:0034       DMACON		EQU		$dff096
F00:0035       ADKCON		EQU		$dff09e
F00:0036       INTENA		EQU		$dff09a
F00:0037       INTREQ		EQU		$dff09c
F00:0038       DMACON2		EQU		$096
F00:0039       ADKCON2		EQU		$09e
F00:0040       INTENA2		EQU		$09a
F00:0041       INTREQ2		EQU		$09c
F00:0042       init:
F00:0043       	; store data in hardwareregisters ORed with $8000
F00:0044               ;(bit 15 is a write-set bit when values are written back into the system)
F00:0045       ;Stack the registers
F00:0046       	movem.l d0-d7/a0-a6,-(sp)
               S01:00000000:  48 E7 FF FE
F00:0047       	move.w	DMACONR,d0
               S01:00000004:  30 39 00 DF F0 02
F00:0048       	or.w #$8000,d0
               S01:0000000A:  80 7C 80 00
F00:0049       	move.w d0,olddmareq
               S01:0000000E:  33 C0 00 06 AE E0 [R]
F00:0050       	move.w	INTENAR,d0
               S01:00000014:  30 39 00 DF F0 1C
F00:0051       	or.w #$8000,d0
               S01:0000001A:  80 7C 80 00
F00:0052       	move.w d0,oldintena
               S01:0000001E:  33 C0 00 06 AE E4 [R]
F00:0053       	move.w	INTREQR,d0
               S01:00000024:  30 39 00 DF F0 1E
F00:0054       	or.w #$8000,d0
               S01:0000002A:  80 7C 80 00
F00:0055       	move.w d0,oldintreq
               S01:0000002E:  33 C0 00 06 AE E2 [R]
F00:0056       ;        move.w  #$7fff,INTENA
F00:0057               move.w	ADKCONR,d0;
               S01:00000034:  30 39 00 DF F0 10
F00:0058       	or.w #$8000,d0
               S01:0000003A:  80 7C 80 00
F00:0059       	move.w d0,oldadkcon
               S01:0000003E:  33 C0 00 06 AE E6 [R]
F00:0060       	; base library address in $4
F00:0061       	move.l	$4,a6
               S01:00000044:  2C 78 00 04
F00:0062       	move.l	#gfxname,a1
               S01:00000048:  43 F9 00 06 AE EC [R]
F00:0063       	moveq	#0,d0 ; whatever
               S01:0000004E:  70 00
F00:0064       	jsr	-552(a6) 
               S01:00000050:  4E AE FD D8
F00:0065       	move.l	d0,gfxbase
               S01:00000054:  23 C0 00 06 AE D8 [R]
F00:0066       	move.l 	d0,a6
               S01:0000005A:  2C 40
F00:0067       	move.l 	34(a6),oldview
               S01:0000005C:  23 EE 00 22 00 06 AE D0 [R]
F00:0068       	move.l 	38(a6),oldcopper
               S01:00000064:  23 EE 00 26 00 06 AE D4 [R]
F00:0069       	move.l #0,a1
               S01:0000006C:  93 C9
F00:0070       	jsr -222(a6)	; LoadView
               S01:0000006E:  4E AE FF 22
F00:0071       	jsr -270(a6)	; WaitTOF
               S01:00000072:  4E AE FE F2
F00:0072       	jsr -270(a6)	; WaitTOF
               S01:00000076:  4E AE FE F2
F00:0073       	move.l	$4,a6
               S01:0000007A:  2C 78 00 04
F00:0074       	jsr -132(a6)	; Forbid
               S01:0000007E:  4E AE FF 7C
F00:0075               move.l #cop,a0
               S01:00000082:  41 F9 00 00 00 00 [R]
F00:0076               move.l a0,COP1LCH
               S01:00000088:  23 C8 00 DF F0 80
F00:0077       	jmp block1
               S01:0000008E:  4E F9 00 06 AA D8 [R]
F00:0078       Graphics_pa dc.l 0
               S01:00000094:  00 00 00 00
F00:0079       Graphics_bpl	dc.w	0
               S01:00000098:  00 00
F00:0080       Graphics_j	dc.w	0
               S01:0000009A:  00 00
F00:0081       Graphics_bytefill1	dc.b $ff, $7f, $3f, $1f, $f, $7, $3, $1
               S01:0000009C:  FF
               S01:0000009D:  7F
               S01:0000009E:  3F
               S01:0000009F:  1F
               S01:000000A0:  0F
               S01:000000A1:  07
               S01:000000A2:  03
               S01:000000A3:  01
F00:0082       Graphics_bytefill2	dc.b $0, $80, $c0, $e0, $f0, $f8, $fc, $fe
               S01:000000A4:  00
               S01:000000A5:  80
               S01:000000A6:  C0
               S01:000000A7:  E0
               S01:000000A8:  F0
               S01:000000A9:  F8
               S01:000000AA:  FC
               S01:000000AB:  FE
F00:0083       	dc.b $ff, $ff
               S01:000000AC:  FF
               S01:000000AD:  FF
F00:0084       Graphics_bytefill3	dc.b $fe, $fc, $f8, $f0, $e0, $c0, $80, $0
               S01:000000AE:  FE
               S01:000000AF:  FC
               S01:000000B0:  F8
               S01:000000B1:  F0
               S01:000000B2:  E0
               S01:000000B3:  C0
               S01:000000B4:  80
               S01:000000B5:  00
F00:0085       c2p1x1_5_c5_030_tempbuf	blk.b	 40960
F00:0086       curBuf	dc.w	$00
               S01:0000A0B6:  00 00
F00:0087       isDone	dc.w	$00
               S01:0000A0B8:  00 00
F00:0088       colorcycled	dc.w	$00
               S01:0000A0BA:  00 00
F00:0089       curcopperpos	dc.l	$00
               S01:0000A0BC:  00 00 00 00
F00:0090       lightypos	dc.w	$3001
               S01:0000A0C0:  30 01
F00:0091       screenOffset	dc.l	$2800
               S01:0000A0C2:  00 00 28 00
F00:0092       foamCounter	dc.w	$00
               S01:0000A0C6:  00 00
F00:0093       eff0Counter	dc.w	$00
               S01:0000A0C8:  00 00
F00:0094       yOffset	dc.w	$8b
               S01:0000A0CA:  00 8B
F00:0095       	 	CNOP 0,4
F00:0096       imagechunky
F00:0097       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/cupempty.CHK"
               S01:0000A0CC:  1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B
               S01:0000A0DC:  1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B
F00:0098       	 	CNOP 0,4
F00:0099       	 	CNOP 0,4
F00:0100       image1
F00:0101       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/cupempty.BPL"
               S01:000320CC:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
               S01:000320DC:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
F00:0102       	 	CNOP 0,4
F00:0103       	 	CNOP 0,4
F00:0104       image2
F00:0105       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/cupempty.BPL"
               S01:0004D7DC:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
               S01:0004D7EC:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
F00:0106       	 	CNOP 0,4
F00:0107       	 	CNOP 0,4
F00:0108       image_palette
F00:0109       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/cupempty.COP"
               S01:00068EEC:  01 80 00 00 01 82 08 52 01 84 0C 73 01 86 0E B8
               S01:00068EFC:  01 88 0F DA 01 8A 0E DC 01 8C 0B A8 01 8E 0C 63
F00:0110       	 	CNOP 0,4
F00:0111       	 	CNOP 0,4
F00:0112       image_palette_cycled
F00:0113       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/cupemptycycle.COP"
               S01:00068F6C:  01 80 00 00 01 82 0C 94 01 84 0F B5 01 86 0F EA
               S01:00068F7C:  01 88 0F FC 01 8A 0F FE 01 8C 0F EA 01 8E 0C 63
F00:0114       	 	CNOP 0,4
F00:0115       screen	dc.l	0
               S01:00068FEC:  00 00 00 00
F00:0116       offscreen	dc.l	0
               S01:00068FF0:  00 00 00 00
F00:0117       i	dc.w	$00
               S01:00068FF4:  00 00
F00:0118       bltsize	dc.w	$00
               S01:00068FF6:  00 00
F00:0119       musicPos	dc.w	$00
               S01:00068FF8:  00 00
F00:0120       current	dc.w	$00
               S01:00068FFA:  00 00
F00:0121       beerinput	dc.w	$00
               S01:00068FFC:  00 00
F00:0122       curbplmod	dc.w	$ffd8
               S01:00068FFE:  FF D8
F00:0123       istart	dc.w	$82
               S01:00069000:  00 82
F00:0124       effectNumber	dc.w	$01
               S01:00069002:  00 01
F00:0125       imagemask	dc.l	0
               S01:00069004:  00 00 00 00
F00:0126       srcimage	dc.l	0
               S01:00069008:  00 00 00 00
F00:0127       sine4Copper	dc.w $182, $188, $18e, $195, $19b, $1a1, $1a7, $1ad
               S01:0006900C:  01 82
               S01:0006900E:  01 88
               S01:00069010:  01 8E
               S01:00069012:  01 95
               S01:00069014:  01 9B
               S01:00069016:  01 A1
               S01:00069018:  01 A7
               S01:0006901A:  01 AD
F00:0128       	dc.w $1b3, $1b9, $1bf, $1c5, $1ca, $1cf, $1d4, $1d9
               S01:0006901C:  01 B3
               S01:0006901E:  01 B9
               S01:00069020:  01 BF
               S01:00069022:  01 C5
               S01:00069024:  01 CA
               S01:00069026:  01 CF
               S01:00069028:  01 D4
               S01:0006902A:  01 D9
F00:0129       	dc.w $1de, $1e2, $1e6, $1ea, $1ee, $1f1, $1f5, $1f7
               S01:0006902C:  01 DE
               S01:0006902E:  01 E2
               S01:00069030:  01 E6
               S01:00069032:  01 EA
               S01:00069034:  01 EE
               S01:00069036:  01 F1
               S01:00069038:  01 F5
               S01:0006903A:  01 F7
F00:0130       	dc.w $1fa, $1fc, $1fe, $200, $202, $203, $203, $204
               S01:0006903C:  01 FA
               S01:0006903E:  01 FC
               S01:00069040:  01 FE
               S01:00069042:  02 00
               S01:00069044:  02 02
               S01:00069046:  02 03
               S01:00069048:  02 03
               S01:0006904A:  02 04
F00:0131       	dc.w $204, $204, $203, $203, $202, $200, $1fe, $1fc
               S01:0006904C:  02 04
               S01:0006904E:  02 04
               S01:00069050:  02 03
               S01:00069052:  02 03
               S01:00069054:  02 02
               S01:00069056:  02 00
               S01:00069058:  01 FE
               S01:0006905A:  01 FC
F00:0132       	dc.w $1fa, $1f8, $1f5, $1f2, $1ee, $1ea, $1e7, $1e2
               S01:0006905C:  01 FA
               S01:0006905E:  01 F8
               S01:00069060:  01 F5
               S01:00069062:  01 F2
               S01:00069064:  01 EE
               S01:00069066:  01 EA
               S01:00069068:  01 E7
               S01:0006906A:  01 E2
F00:0133       	dc.w $1de, $1d9, $1d4, $1cf, $1ca, $1c5, $1bf, $1b9
               S01:0006906C:  01 DE
               S01:0006906E:  01 D9
               S01:00069070:  01 D4
               S01:00069072:  01 CF
               S01:00069074:  01 CA
               S01:00069076:  01 C5
               S01:00069078:  01 BF
               S01:0006907A:  01 B9
F00:0134       	dc.w $1b4, $1ae, $1a8, $1a1, $19b, $195, $18e, $188
               S01:0006907C:  01 B4
               S01:0006907E:  01 AE
               S01:00069080:  01 A8
               S01:00069082:  01 A1
               S01:00069084:  01 9B
               S01:00069086:  01 95
               S01:00069088:  01 8E
               S01:0006908A:  01 88
F00:0135       	dc.w $182, $17b, $175, $16f, $168, $162, $15c, $156
               S01:0006908C:  01 82
               S01:0006908E:  01 7B
               S01:00069090:  01 75
               S01:00069092:  01 6F
               S01:00069094:  01 68
               S01:00069096:  01 62
               S01:00069098:  01 5C
               S01:0006909A:  01 56
F00:0136       	dc.w $150, $14a, $144, $13f, $139, $134, $12f, $12a
               S01:0006909C:  01 50
               S01:0006909E:  01 4A
               S01:000690A0:  01 44
               S01:000690A2:  01 3F
               S01:000690A4:  01 39
               S01:000690A6:  01 34
               S01:000690A8:  01 2F
               S01:000690AA:  01 2A
F00:0137       	dc.w $125, $121, $11d, $119, $115, $112, $10e, $10c
               S01:000690AC:  01 25
               S01:000690AE:  01 21
               S01:000690B0:  01 1D
               S01:000690B2:  01 19
               S01:000690B4:  01 15
               S01:000690B6:  01 12
               S01:000690B8:  01 0E
               S01:000690BA:  01 0C
F00:0138       	dc.w $109, $107, $105, $103, $102, $100, $100, $ff
               S01:000690BC:  01 09
               S01:000690BE:  01 07
               S01:000690C0:  01 05
               S01:000690C2:  01 03
               S01:000690C4:  01 02
               S01:000690C6:  01 00
               S01:000690C8:  01 00
               S01:000690CA:  00 FF
F00:0139       	dc.w $ff, $ff, $100, $100, $101, $103, $104, $106
               S01:000690CC:  00 FF
               S01:000690CE:  00 FF
               S01:000690D0:  01 00
               S01:000690D2:  01 00
               S01:000690D4:  01 01
               S01:000690D6:  01 03
               S01:000690D8:  01 04
               S01:000690DA:  01 06
F00:0140       	dc.w $109, $10b, $10e, $111, $115, $118, $11c, $121
               S01:000690DC:  01 09
               S01:000690DE:  01 0B
               S01:000690E0:  01 0E
               S01:000690E2:  01 11
               S01:000690E4:  01 15
               S01:000690E6:  01 18
               S01:000690E8:  01 1C
               S01:000690EA:  01 21
F00:0141       	dc.w $125, $12a, $12e, $133, $139, $13e, $144, $149
               S01:000690EC:  01 25
               S01:000690EE:  01 2A
               S01:000690F0:  01 2E
               S01:000690F2:  01 33
               S01:000690F4:  01 39
               S01:000690F6:  01 3E
               S01:000690F8:  01 44
               S01:000690FA:  01 49
F00:0142       	dc.w $14f, $155, $15b, $161, $168, $16e, $174, $17b
               S01:000690FC:  01 4F
               S01:000690FE:  01 55
               S01:00069100:  01 5B
               S01:00069102:  01 61
               S01:00069104:  01 68
               S01:00069106:  01 6E
               S01:00069108:  01 74
               S01:0006910A:  01 7B
F00:0143       	dc.w $181, $187, $18e, $194, $19b, $1a1, $1a7, $1ad
               S01:0006910C:  01 81
               S01:0006910E:  01 87
               S01:00069110:  01 8E
               S01:00069112:  01 94
               S01:00069114:  01 9B
               S01:00069116:  01 A1
               S01:00069118:  01 A7
               S01:0006911A:  01 AD
F00:0144       	dc.w $1b3, $1b9, $1bf, $1c4, $1ca, $1cf, $1d4, $1d9
               S01:0006911C:  01 B3
               S01:0006911E:  01 B9
               S01:00069120:  01 BF
               S01:00069122:  01 C4
               S01:00069124:  01 CA
               S01:00069126:  01 CF
               S01:00069128:  01 D4
               S01:0006912A:  01 D9
F00:0145       	dc.w $1dd, $1e2, $1e6, $1ea, $1ee, $1f1, $1f4, $1f7
               S01:0006912C:  01 DD
               S01:0006912E:  01 E2
               S01:00069130:  01 E6
               S01:00069132:  01 EA
               S01:00069134:  01 EE
               S01:00069136:  01 F1
               S01:00069138:  01 F4
               S01:0006913A:  01 F7
F00:0146       	dc.w $1fa, $1fc, $1fe, $200, $201, $203, $203, $204
               S01:0006913C:  01 FA
               S01:0006913E:  01 FC
               S01:00069140:  01 FE
               S01:00069142:  02 00
               S01:00069144:  02 01
               S01:00069146:  02 03
               S01:00069148:  02 03
               S01:0006914A:  02 04
F00:0147       	dc.w $204, $204, $203, $203, $202, $200, $1ff, $1fd
               S01:0006914C:  02 04
               S01:0006914E:  02 04
               S01:00069150:  02 03
               S01:00069152:  02 03
               S01:00069154:  02 02
               S01:00069156:  02 00
               S01:00069158:  01 FF
               S01:0006915A:  01 FD
F00:0148       	dc.w $1fa, $1f8, $1f5, $1f2, $1ee, $1eb, $1e7, $1e3
               S01:0006915C:  01 FA
               S01:0006915E:  01 F8
               S01:00069160:  01 F5
               S01:00069162:  01 F2
               S01:00069164:  01 EE
               S01:00069166:  01 EB
               S01:00069168:  01 E7
               S01:0006916A:  01 E3
F00:0149       	dc.w $1de, $1da, $1d5, $1d0, $1cb, $1c5, $1c0, $1ba
               S01:0006916C:  01 DE
               S01:0006916E:  01 DA
               S01:00069170:  01 D5
               S01:00069172:  01 D0
               S01:00069174:  01 CB
               S01:00069176:  01 C5
               S01:00069178:  01 C0
               S01:0006917A:  01 BA
F00:0150       	dc.w $1b4, $1ae, $1a8, $1a2, $19c, $195, $18f, $189
               S01:0006917C:  01 B4
               S01:0006917E:  01 AE
               S01:00069180:  01 A8
               S01:00069182:  01 A2
               S01:00069184:  01 9C
               S01:00069186:  01 95
               S01:00069188:  01 8F
               S01:0006918A:  01 89
F00:0151       	dc.w $182, $17c, $175, $16f, $169, $162, $15c, $156
               S01:0006918C:  01 82
               S01:0006918E:  01 7C
               S01:00069190:  01 75
               S01:00069192:  01 6F
               S01:00069194:  01 69
               S01:00069196:  01 62
               S01:00069198:  01 5C
               S01:0006919A:  01 56
F00:0152       	dc.w $150, $14a, $145, $13f, $13a, $134, $12f, $12a
               S01:0006919C:  01 50
               S01:0006919E:  01 4A
               S01:000691A0:  01 45
               S01:000691A2:  01 3F
               S01:000691A4:  01 3A
               S01:000691A6:  01 34
               S01:000691A8:  01 2F
               S01:000691AA:  01 2A
F00:0153       	dc.w $126, $121, $11d, $119, $115, $112, $10f, $10c
               S01:000691AC:  01 26
               S01:000691AE:  01 21
               S01:000691B0:  01 1D
               S01:000691B2:  01 19
               S01:000691B4:  01 15
               S01:000691B6:  01 12
               S01:000691B8:  01 0F
               S01:000691BA:  01 0C
F00:0154       	dc.w $109, $107, $105, $103, $102, $100, $100, $ff
               S01:000691BC:  01 09
               S01:000691BE:  01 07
               S01:000691C0:  01 05
               S01:000691C2:  01 03
               S01:000691C4:  01 02
               S01:000691C6:  01 00
               S01:000691C8:  01 00
               S01:000691CA:  00 FF
F00:0155       	dc.w $ff, $ff, $ff, $100, $101, $103, $104, $106
               S01:000691CC:  00 FF
               S01:000691CE:  00 FF
               S01:000691D0:  00 FF
               S01:000691D2:  01 00
               S01:000691D4:  01 01
               S01:000691D6:  01 03
               S01:000691D8:  01 04
               S01:000691DA:  01 06
F00:0156       	dc.w $109, $10b, $10e, $111, $115, $118, $11c, $120
               S01:000691DC:  01 09
               S01:000691DE:  01 0B
               S01:000691E0:  01 0E
               S01:000691E2:  01 11
               S01:000691E4:  01 15
               S01:000691E6:  01 18
               S01:000691E8:  01 1C
               S01:000691EA:  01 20
F00:0157       	dc.w $125, $129, $12e, $133, $138, $13e, $143, $149
               S01:000691EC:  01 25
               S01:000691EE:  01 29
               S01:000691F0:  01 2E
               S01:000691F2:  01 33
               S01:000691F4:  01 38
               S01:000691F6:  01 3E
               S01:000691F8:  01 43
               S01:000691FA:  01 49
F00:0158       	dc.w $14f, $155, $15b, $161, $167, $16e, $174, $17a
               S01:000691FC:  01 4F
               S01:000691FE:  01 55
               S01:00069200:  01 5B
               S01:00069202:  01 61
               S01:00069204:  01 67
               S01:00069206:  01 6E
               S01:00069208:  01 74
               S01:0006920A:  01 7A
F00:0159       sine4CopperAdd	dc.w $0, $0, $1, $1, $2, $3, $3, $4
               S01:0006920C:  00 00
               S01:0006920E:  00 00
               S01:00069210:  00 01
               S01:00069212:  00 01
               S01:00069214:  00 02
               S01:00069216:  00 03
               S01:00069218:  00 03
               S01:0006921A:  00 04
F00:0160       	dc.w $4, $5, $6, $6, $7, $7, $8, $8
               S01:0006921C:  00 04
               S01:0006921E:  00 05
               S01:00069220:  00 06
               S01:00069222:  00 06
               S01:00069224:  00 07
               S01:00069226:  00 07
               S01:00069228:  00 08
               S01:0006922A:  00 08
F00:0161       	dc.w $9, $9, $a, $a, $a, $b, $b, $b
               S01:0006922C:  00 09
               S01:0006922E:  00 09
               S01:00069230:  00 0A
               S01:00069232:  00 0A
               S01:00069234:  00 0A
               S01:00069236:  00 0B
               S01:00069238:  00 0B
               S01:0006923A:  00 0B
F00:0162       	dc.w $c, $c, $c, $c, $c, $c, $c, $d
               S01:0006923C:  00 0C
               S01:0006923E:  00 0C
               S01:00069240:  00 0C
               S01:00069242:  00 0C
               S01:00069244:  00 0C
               S01:00069246:  00 0C
               S01:00069248:  00 0C
               S01:0006924A:  00 0D
F00:0163       	dc.w $d, $d, $c, $c, $c, $c, $c, $c
               S01:0006924C:  00 0D
               S01:0006924E:  00 0D
               S01:00069250:  00 0C
               S01:00069252:  00 0C
               S01:00069254:  00 0C
               S01:00069256:  00 0C
               S01:00069258:  00 0C
               S01:0006925A:  00 0C
F00:0164       	dc.w $c, $b, $b, $b, $a, $a, $a, $9
               S01:0006925C:  00 0C
               S01:0006925E:  00 0B
               S01:00069260:  00 0B
               S01:00069262:  00 0B
               S01:00069264:  00 0A
               S01:00069266:  00 0A
               S01:00069268:  00 0A
               S01:0006926A:  00 09
F00:0165       	dc.w $9, $8, $8, $7, $7, $6, $6, $5
               S01:0006926C:  00 09
               S01:0006926E:  00 08
               S01:00069270:  00 08
               S01:00069272:  00 07
               S01:00069274:  00 07
               S01:00069276:  00 06
               S01:00069278:  00 06
               S01:0006927A:  00 05
F00:0166       	dc.w $5, $4, $3, $3, $2, $1, $1, $0
               S01:0006927C:  00 05
               S01:0006927E:  00 04
               S01:00069280:  00 03
               S01:00069282:  00 03
               S01:00069284:  00 02
               S01:00069286:  00 01
               S01:00069288:  00 01
               S01:0006928A:  00 00
F00:0167       	dc.w $0, $0, $ffff, $ffff, $fffe, $fffd, $fffd, $fffc
               S01:0006928C:  00 00
               S01:0006928E:  00 00
               S01:00069290:  FF FF
               S01:00069292:  FF FF
               S01:00069294:  FF FE
               S01:00069296:  FF FD
               S01:00069298:  FF FD
               S01:0006929A:  FF FC
F00:0168       	dc.w $fffc, $fffb, $fffa, $fffa, $fff9, $fff9, $fff8, $fff8
               S01:0006929C:  FF FC
               S01:0006929E:  FF FB
               S01:000692A0:  FF FA
               S01:000692A2:  FF FA
               S01:000692A4:  FF F9
               S01:000692A6:  FF F9
               S01:000692A8:  FF F8
               S01:000692AA:  FF F8
F00:0169       	dc.w $fff7, $fff7, $fff6, $fff6, $fff6, $fff5, $fff5, $fff5
               S01:000692AC:  FF F7
               S01:000692AE:  FF F7
               S01:000692B0:  FF F6
               S01:000692B2:  FF F6
               S01:000692B4:  FF F6
               S01:000692B6:  FF F5
               S01:000692B8:  FF F5
               S01:000692BA:  FF F5
F00:0170       	dc.w $fff4, $fff4, $fff4, $fff4, $fff4, $fff4, $fff4, $fff3
               S01:000692BC:  FF F4
               S01:000692BE:  FF F4
               S01:000692C0:  FF F4
               S01:000692C2:  FF F4
               S01:000692C4:  FF F4
               S01:000692C6:  FF F4
               S01:000692C8:  FF F4
               S01:000692CA:  FF F3
F00:0171       	dc.w $fff3, $fff3, $fff4, $fff4, $fff4, $fff4, $fff4, $fff4
               S01:000692CC:  FF F3
               S01:000692CE:  FF F3
               S01:000692D0:  FF F4
               S01:000692D2:  FF F4
               S01:000692D4:  FF F4
               S01:000692D6:  FF F4
               S01:000692D8:  FF F4
               S01:000692DA:  FF F4
F00:0172       	dc.w $fff4, $fff5, $fff5, $fff5, $fff6, $fff6, $fff6, $fff7
               S01:000692DC:  FF F4
               S01:000692DE:  FF F5
               S01:000692E0:  FF F5
               S01:000692E2:  FF F5
               S01:000692E4:  FF F6
               S01:000692E6:  FF F6
               S01:000692E8:  FF F6
               S01:000692EA:  FF F7
F00:0173       	dc.w $fff7, $fff8, $fff8, $fff9, $fff9, $fffa, $fffa, $fffb
               S01:000692EC:  FF F7
               S01:000692EE:  FF F8
               S01:000692F0:  FF F8
               S01:000692F2:  FF F9
               S01:000692F4:  FF F9
               S01:000692F6:  FF FA
               S01:000692F8:  FF FA
               S01:000692FA:  FF FB
F00:0174       	dc.w $fffb, $fffc, $fffd, $fffd, $fffe, $ffff, $ffff, $0
               S01:000692FC:  FF FB
               S01:000692FE:  FF FC
               S01:00069300:  FF FD
               S01:00069302:  FF FD
               S01:00069304:  FF FE
               S01:00069306:  FF FF
               S01:00069308:  FF FF
               S01:0006930A:  00 00
F00:0175       	dc.w $0, $0, $1, $1, $2, $3, $3, $4
               S01:0006930C:  00 00
               S01:0006930E:  00 00
               S01:00069310:  00 01
               S01:00069312:  00 01
               S01:00069314:  00 02
               S01:00069316:  00 03
               S01:00069318:  00 03
               S01:0006931A:  00 04
F00:0176       	dc.w $4, $5, $6, $6, $7, $7, $8, $8
               S01:0006931C:  00 04
               S01:0006931E:  00 05
               S01:00069320:  00 06
               S01:00069322:  00 06
               S01:00069324:  00 07
               S01:00069326:  00 07
               S01:00069328:  00 08
               S01:0006932A:  00 08
F00:0177       	dc.w $9, $9, $a, $a, $a, $b, $b, $b
               S01:0006932C:  00 09
               S01:0006932E:  00 09
               S01:00069330:  00 0A
               S01:00069332:  00 0A
               S01:00069334:  00 0A
               S01:00069336:  00 0B
               S01:00069338:  00 0B
               S01:0006933A:  00 0B
F00:0178       	dc.w $c, $c, $c, $c, $c, $c, $c, $d
               S01:0006933C:  00 0C
               S01:0006933E:  00 0C
               S01:00069340:  00 0C
               S01:00069342:  00 0C
               S01:00069344:  00 0C
               S01:00069346:  00 0C
               S01:00069348:  00 0C
               S01:0006934A:  00 0D
F00:0179       	dc.w $d, $d, $c, $c, $c, $c, $c, $c
               S01:0006934C:  00 0D
               S01:0006934E:  00 0D
               S01:00069350:  00 0C
               S01:00069352:  00 0C
               S01:00069354:  00 0C
               S01:00069356:  00 0C
               S01:00069358:  00 0C
               S01:0006935A:  00 0C
F00:0180       	dc.w $c, $b, $b, $b, $a, $a, $a, $9
               S01:0006935C:  00 0C
               S01:0006935E:  00 0B
               S01:00069360:  00 0B
               S01:00069362:  00 0B
               S01:00069364:  00 0A
               S01:00069366:  00 0A
               S01:00069368:  00 0A
               S01:0006936A:  00 09
F00:0181       	dc.w $9, $8, $8, $7, $7, $6, $6, $5
               S01:0006936C:  00 09
               S01:0006936E:  00 08
               S01:00069370:  00 08
               S01:00069372:  00 07
               S01:00069374:  00 07
               S01:00069376:  00 06
               S01:00069378:  00 06
               S01:0006937A:  00 05
F00:0182       	dc.w $5, $4, $3, $3, $2, $1, $1, $0
               S01:0006937C:  00 05
               S01:0006937E:  00 04
               S01:00069380:  00 03
               S01:00069382:  00 03
               S01:00069384:  00 02
               S01:00069386:  00 01
               S01:00069388:  00 01
               S01:0006938A:  00 00
F00:0183       	dc.w $0, $0, $ffff, $ffff, $fffe, $fffd, $fffd, $fffc
               S01:0006938C:  00 00
               S01:0006938E:  00 00
               S01:00069390:  FF FF
               S01:00069392:  FF FF
               S01:00069394:  FF FE
               S01:00069396:  FF FD
               S01:00069398:  FF FD
               S01:0006939A:  FF FC
F00:0184       	dc.w $fffc, $fffb, $fffa, $fffa, $fff9, $fff9, $fff8, $fff8
               S01:0006939C:  FF FC
               S01:0006939E:  FF FB
               S01:000693A0:  FF FA
               S01:000693A2:  FF FA
               S01:000693A4:  FF F9
               S01:000693A6:  FF F9
               S01:000693A8:  FF F8
               S01:000693AA:  FF F8
F00:0185       	dc.w $fff7, $fff7, $fff6, $fff6, $fff6, $fff5, $fff5, $fff5
               S01:000693AC:  FF F7
               S01:000693AE:  FF F7
               S01:000693B0:  FF F6
               S01:000693B2:  FF F6
               S01:000693B4:  FF F6
               S01:000693B6:  FF F5
               S01:000693B8:  FF F5
               S01:000693BA:  FF F5
F00:0186       	dc.w $fff4, $fff4, $fff4, $fff4, $fff4, $fff4, $fff4, $fff3
               S01:000693BC:  FF F4
               S01:000693BE:  FF F4
               S01:000693C0:  FF F4
               S01:000693C2:  FF F4
               S01:000693C4:  FF F4
               S01:000693C6:  FF F4
               S01:000693C8:  FF F4
               S01:000693CA:  FF F3
F00:0187       	dc.w $fff3, $fff3, $fff3, $fff4, $fff4, $fff4, $fff4, $fff4
               S01:000693CC:  FF F3
               S01:000693CE:  FF F3
               S01:000693D0:  FF F3
               S01:000693D2:  FF F4
               S01:000693D4:  FF F4
               S01:000693D6:  FF F4
               S01:000693D8:  FF F4
               S01:000693DA:  FF F4
F00:0188       	dc.w $fff4, $fff5, $fff5, $fff5, $fff6, $fff6, $fff6, $fff7
               S01:000693DC:  FF F4
               S01:000693DE:  FF F5
               S01:000693E0:  FF F5
               S01:000693E2:  FF F5
               S01:000693E4:  FF F6
               S01:000693E6:  FF F6
               S01:000693E8:  FF F6
               S01:000693EA:  FF F7
F00:0189       	dc.w $fff7, $fff8, $fff8, $fff9, $fff9, $fffa, $fffa, $fffb
               S01:000693EC:  FF F7
               S01:000693EE:  FF F8
               S01:000693F0:  FF F8
               S01:000693F2:  FF F9
               S01:000693F4:  FF F9
               S01:000693F6:  FF FA
               S01:000693F8:  FF FA
               S01:000693FA:  FF FB
F00:0190       	dc.w $fffb, $fffc, $fffd, $fffd, $fffe, $ffff, $ffff, $0
               S01:000693FC:  FF FB
               S01:000693FE:  FF FC
               S01:00069400:  FF FD
               S01:00069402:  FF FD
               S01:00069404:  FF FE
               S01:00069406:  FF FF
               S01:00069408:  FF FF
               S01:0006940A:  00 00
F00:0191       row	dc.w	$01
               S01:0006940C:  00 01
F00:0192       tmp	dc.w	$01
               S01:0006940E:  00 01
F00:0193       tmp2	dc.l	$00
               S01:00069410:  00 00 00 00
F00:0194       planeoffset	dc.l	$00
               S01:00069414:  00 00 00 00
F00:0195       	;*
F00:0196       ; //	Sets up the copper list to point to a 320x256 buffer. Note that the screen will be set up 
F00:0197       ; //	non-interlaced, with 40*256 bytes per bitplane. <p>
F00:0198       ; //	
F00:0199       ; //	Usage: 
F00:0200       ; //		SetupNonInterlacedScreen( [ data buffer ], [ number of bitplanes ] )
F00:0201       ; //		
F00:0202       ; //	Note that the data buffer must reside in chipmem
F00:0203       ; //	
F00:0204       ; //	Example:
F00:0205       ; //	
F00:0206       ; //	<code>
F00:0207       ; //var
F00:0208       ; //	const noBitPlanes = 4; 
F00:0209       ; // 4 bitplanes = 16 colors
F00:0210       ; //	buf : array[40*256*noBitPlanes] chipmem; 
F00:0211       ; // data buffer stored in chipmem  
F00:0212       ; //...
F00:0213       ; //begin
F00:0214       ; //	Graphics::SetupNonInterlacedScreen(#buf, noBitPlanes);
F00:0215       ; //	</code>
F00:0216       ; //	
F00:0217       ; 
F00:0218       
F00:0219       	; ***********  Defining procedure : Graphics_SetupNonInterlacedScreen
F00:0220       	;    Procedure type : User-defined procedure
F00:0221       	jmp block2
               S01:00069418:  60 02
F00:0222        ; Temp vars section
F00:0223        ; Temp vars section ends
F00:0224       	 	CNOP 0,4
F00:0225       block2
F00:0226       Graphics_SetupNonInterlacedScreen
F00:0227       	moveq #0,d0
               S01:0006941C:  70 00
F00:0228       	moveq #0,d1
               S01:0006941E:  72 00
F00:0229       	move.w #$1000,d1     ; BOP move
               S01:00069420:  32 3C 10 00
F00:0230       	mulu.w Graphics_bpl,d1 ; simple bop
               S01:00069424:  C2 F9 00 00 00 98 [R]
F00:0231       	move.w d1,d0     ; BOP move
               S01:0006942A:  30 01
F00:0232       	or.w #$200,d0 ; simple bop
               S01:0006942C:  80 7C 02 00
F00:0233       	; Store variable : Graphics_j
F00:0234       	move.w d0,Graphics_j
               S01:00069430:  33 C0 00 00 00 9A [R]
F00:0235       	; Poke command
F00:0236       	move.l #copper_resolution,a0
               S01:00069436:  41 F9 00 00 01 1A [R]
F00:0237       	move.w Graphics_j,(a0)
               S01:0006943C:  30 B9 00 00 00 9A [R]
F00:0238       	
F00:0239       ; // $4000  = bitplanes, $200 = colours
F00:0240       	; Poke command
F00:0241       	move.l #copper_mod_even,a0
               S01:00069442:  41 F9 00 00 00 12 [R]
F00:0242       	move.w #$0,(a0)
               S01:00069448:  30 BC 00 00
F00:0243       	; Poke command
F00:0244       	move.l #copper_mod_odd,a0
               S01:0006944C:  41 F9 00 00 00 16 [R]
F00:0245       	move.w #$0,(a0)
               S01:00069452:  30 BC 00 00
F00:0246       	cmp.w #$5,Graphics_bpl
               S01:00069456:  0C 79 00 05 00 00 00 98 [R]
F00:0247       	bne edblock6
               S01:0006945E:  66 00 00 A2
F00:0248       ctb4: ;Main true block ;keep 
F00:0249       	
F00:0250       ; // Set palette at copper palette location, 16 colors
F00:0251       ; // Setup image copper list (4 bitplanes, 40*40 modulo 120
F00:0252       	; setcopperlist32
F00:0253       	move.l Graphics_pa,a1
               S01:00069462:  22 79 00 00 00 94 [R]
F00:0254       	move.l a1,d0
               S01:00069468:  20 09
F00:0255       	move.l #copper_bitplane0,a0
               S01:0006946A:  41 F9 00 00 00 E8 [R]
F00:0256       	move.w d0,6(a0)
               S01:00069470:  31 40 00 06
F00:0257       	swap d0
               S01:00069474:  48 40
F00:0258       	move.w d0,2(a0)
               S01:00069476:  31 40 00 02
F00:0259       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006947A:  06 B9 00 00 28 00 00 00 00 94 [R]
F00:0260       	; setcopperlist32
F00:0261       	move.l Graphics_pa,a1
               S01:00069484:  22 79 00 00 00 94 [R]
F00:0262       	move.l a1,d0
               S01:0006948A:  20 09
F00:0263       	move.l #copper_bitplane1,a0
               S01:0006948C:  41 F9 00 00 00 F0 [R]
F00:0264       	move.w d0,6(a0)
               S01:00069492:  31 40 00 06
F00:0265       	swap d0
               S01:00069496:  48 40
F00:0266       	move.w d0,2(a0)
               S01:00069498:  31 40 00 02
F00:0267       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006949C:  06 B9 00 00 28 00 00 00 00 94 [R]
F00:0268       	; setcopperlist32
F00:0269       	move.l Graphics_pa,a1
               S01:000694A6:  22 79 00 00 00 94 [R]
F00:0270       	move.l a1,d0
               S01:000694AC:  20 09
F00:0271       	move.l #copper_bitplane2,a0
               S01:000694AE:  41 F9 00 00 00 F8 [R]
F00:0272       	move.w d0,6(a0)
               S01:000694B4:  31 40 00 06
F00:0273       	swap d0
               S01:000694B8:  48 40
F00:0274       	move.w d0,2(a0)
               S01:000694BA:  31 40 00 02
F00:0275       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000694BE:  06 B9 00 00 28 00 00 00 00 94 [R]
F00:0276       	; setcopperlist32
F00:0277       	move.l Graphics_pa,a1
               S01:000694C8:  22 79 00 00 00 94 [R]
F00:0278       	move.l a1,d0
               S01:000694CE:  20 09
F00:0279       	move.l #copper_bitplane3,a0
               S01:000694D0:  41 F9 00 00 01 00 [R]
F00:0280       	move.w d0,6(a0)
               S01:000694D6:  31 40 00 06
F00:0281       	swap d0
               S01:000694DA:  48 40
F00:0282       	move.w d0,2(a0)
               S01:000694DC:  31 40 00 02
F00:0283       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000694E0:  06 B9 00 00 28 00 00 00 00 94 [R]
F00:0284       	; setcopperlist32
F00:0285       	move.l Graphics_pa,a1
               S01:000694EA:  22 79 00 00 00 94 [R]
F00:0286       	move.l a1,d0
               S01:000694F0:  20 09
F00:0287       	move.l #copper_bitplane4,a0
               S01:000694F2:  41 F9 00 00 01 08 [R]
F00:0288       	move.w d0,6(a0)
               S01:000694F8:  31 40 00 06
F00:0289       	swap d0
               S01:000694FC:  48 40
F00:0290       	move.w d0,2(a0)
               S01:000694FE:  31 40 00 02
F00:0291       edblock6
F00:0292       	cmp.w #$4,Graphics_bpl
               S01:00069502:  0C 79 00 04 00 00 00 98 [R]
F00:0293       	bne edblock12
               S01:0006950A:  66 7E
F00:0294       ctb10: ;Main true block ;keep 
F00:0295       	; setcopperlist32
F00:0296       	move.l Graphics_pa,a1
               S01:0006950C:  22 79 00 00 00 94 [R]
F00:0297       	move.l a1,d0
               S01:00069512:  20 09
F00:0298       	move.l #copper_bitplane0,a0
               S01:00069514:  41 F9 00 00 00 E8 [R]
F00:0299       	move.w d0,6(a0)
               S01:0006951A:  31 40 00 06
F00:0300       	swap d0
               S01:0006951E:  48 40
F00:0301       	move.w d0,2(a0)
               S01:00069520:  31 40 00 02
F00:0302       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00069524:  06 B9 00 00 28 00 00 00 00 94 [R]
F00:0303       	; setcopperlist32
F00:0304       	move.l Graphics_pa,a1
               S01:0006952E:  22 79 00 00 00 94 [R]
F00:0305       	move.l a1,d0
               S01:00069534:  20 09
F00:0306       	move.l #copper_bitplane1,a0
               S01:00069536:  41 F9 00 00 00 F0 [R]
F00:0307       	move.w d0,6(a0)
               S01:0006953C:  31 40 00 06
F00:0308       	swap d0
               S01:00069540:  48 40
F00:0309       	move.w d0,2(a0)
               S01:00069542:  31 40 00 02
F00:0310       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00069546:  06 B9 00 00 28 00 00 00 00 94 [R]
F00:0311       	; setcopperlist32
F00:0312       	move.l Graphics_pa,a1
               S01:00069550:  22 79 00 00 00 94 [R]
F00:0313       	move.l a1,d0
               S01:00069556:  20 09
F00:0314       	move.l #copper_bitplane2,a0
               S01:00069558:  41 F9 00 00 00 F8 [R]
F00:0315       	move.w d0,6(a0)
               S01:0006955E:  31 40 00 06
F00:0316       	swap d0
               S01:00069562:  48 40
F00:0317       	move.w d0,2(a0)
               S01:00069564:  31 40 00 02
F00:0318       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00069568:  06 B9 00 00 28 00 00 00 00 94 [R]
F00:0319       	; setcopperlist32
F00:0320       	move.l Graphics_pa,a1
               S01:00069572:  22 79 00 00 00 94 [R]
F00:0321       	move.l a1,d0
               S01:00069578:  20 09
F00:0322       	move.l #copper_bitplane3,a0
               S01:0006957A:  41 F9 00 00 01 00 [R]
F00:0323       	move.w d0,6(a0)
               S01:00069580:  31 40 00 06
F00:0324       	swap d0
               S01:00069584:  48 40
F00:0325       	move.w d0,2(a0)
               S01:00069586:  31 40 00 02
F00:0326       edblock12
F00:0327       	cmp.w #$3,Graphics_bpl
               S01:0006958A:  0C 79 00 03 00 00 00 98 [R]
F00:0328       	bne edblock18
               S01:00069592:  66 5C
F00:0329       ctb16: ;Main true block ;keep 
F00:0330       	; setcopperlist32
F00:0331       	move.l Graphics_pa,a1
               S01:00069594:  22 79 00 00 00 94 [R]
F00:0332       	move.l a1,d0
               S01:0006959A:  20 09
F00:0333       	move.l #copper_bitplane0,a0
               S01:0006959C:  41 F9 00 00 00 E8 [R]
F00:0334       	move.w d0,6(a0)
               S01:000695A2:  31 40 00 06
F00:0335       	swap d0
               S01:000695A6:  48 40
F00:0336       	move.w d0,2(a0)
               S01:000695A8:  31 40 00 02
F00:0337       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000695AC:  06 B9 00 00 28 00 00 00 00 94 [R]
F00:0338       	; setcopperlist32
F00:0339       	move.l Graphics_pa,a1
               S01:000695B6:  22 79 00 00 00 94 [R]
F00:0340       	move.l a1,d0
               S01:000695BC:  20 09
F00:0341       	move.l #copper_bitplane1,a0
               S01:000695BE:  41 F9 00 00 00 F0 [R]
F00:0342       	move.w d0,6(a0)
               S01:000695C4:  31 40 00 06
F00:0343       	swap d0
               S01:000695C8:  48 40
F00:0344       	move.w d0,2(a0)
               S01:000695CA:  31 40 00 02
F00:0345       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000695CE:  06 B9 00 00 28 00 00 00 00 94 [R]
F00:0346       	; setcopperlist32
F00:0347       	move.l Graphics_pa,a1
               S01:000695D8:  22 79 00 00 00 94 [R]
F00:0348       	move.l a1,d0
               S01:000695DE:  20 09
F00:0349       	move.l #copper_bitplane2,a0
               S01:000695E0:  41 F9 00 00 00 F8 [R]
F00:0350       	move.w d0,6(a0)
               S01:000695E6:  31 40 00 06
F00:0351       	swap d0
               S01:000695EA:  48 40
F00:0352       	move.w d0,2(a0)
               S01:000695EC:  31 40 00 02
F00:0353       edblock18
F00:0354       	cmp.w #$2,Graphics_bpl
               S01:000695F0:  0C 79 00 02 00 00 00 98 [R]
F00:0355       	bne edblock24
               S01:000695F8:  66 3A
F00:0356       ctb22: ;Main true block ;keep 
F00:0357       	; setcopperlist32
F00:0358       	move.l Graphics_pa,a1
               S01:000695FA:  22 79 00 00 00 94 [R]
F00:0359       	move.l a1,d0
               S01:00069600:  20 09
F00:0360       	move.l #copper_bitplane0,a0
               S01:00069602:  41 F9 00 00 00 E8 [R]
F00:0361       	move.w d0,6(a0)
               S01:00069608:  31 40 00 06
F00:0362       	swap d0
               S01:0006960C:  48 40
F00:0363       	move.w d0,2(a0)
               S01:0006960E:  31 40 00 02
F00:0364       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00069612:  06 B9 00 00 28 00 00 00 00 94 [R]
F00:0365       	; setcopperlist32
F00:0366       	move.l Graphics_pa,a1
               S01:0006961C:  22 79 00 00 00 94 [R]
F00:0367       	move.l a1,d0
               S01:00069622:  20 09
F00:0368       	move.l #copper_bitplane1,a0
               S01:00069624:  41 F9 00 00 00 F0 [R]
F00:0369       	move.w d0,6(a0)
               S01:0006962A:  31 40 00 06
F00:0370       	swap d0
               S01:0006962E:  48 40
F00:0371       	move.w d0,2(a0)
               S01:00069630:  31 40 00 02
F00:0372       edblock24
F00:0373       	cmp.w #$1,Graphics_bpl
               S01:00069634:  0C 79 00 01 00 00 00 98 [R]
F00:0374       	bne edblock30
               S01:0006963C:  66 18
F00:0375       ctb28: ;Main true block ;keep 
F00:0376       	; setcopperlist32
F00:0377       	move.l Graphics_pa,a1
               S01:0006963E:  22 79 00 00 00 94 [R]
F00:0378       	move.l a1,d0
               S01:00069644:  20 09
F00:0379       	move.l #copper_bitplane0,a0
               S01:00069646:  41 F9 00 00 00 E8 [R]
F00:0380       	move.w d0,6(a0)
               S01:0006964C:  31 40 00 06
F00:0381       	swap d0
               S01:00069650:  48 40
F00:0382       	move.w d0,2(a0)
               S01:00069652:  31 40 00 02
F00:0383       edblock30
F00:0384       	rts
               S01:00069656:  4E 75
F00:0385       	; ***********  Defining procedure : LSP_CIAStart
F00:0386       	;    Procedure type : User-defined procedure
F00:0387       	jmp block33
               S01:00069658:  60 0E
F00:0388       cs_music	dc.l	0
               S01:0006965A:  00 00 00 00
F00:0389       cs_bank	dc.l	0
               S01:0006965E:  00 00 00 00
F00:0390       cs_vbr	dc.w	0
               S01:00069662:  00 00
F00:0391       cs_palntsc	dc.w	0
               S01:00069664:  00 00
F00:0392       	 	CNOP 0,4
F00:0393       block33
F00:0394       LSP_CIAStart
F00:0395       		; Init LSP and start replay using easy CIA toolbox
F00:0396       			move.l	cs_music,a0
               S01:00069668:  20 7A FF F0
F00:0397       			move.l	cs_bank,a1
               S01:0006966C:  22 7A FF F0
F00:0398       			suba.l	a2,a2			
               S01:00069670:  95 CA
F00:0399       			move.w	cs_vbr,a2			; VBR
               S01:00069672:  34 7A FF EE
F00:0400       			moveq	#0,d0			
               S01:00069676:  70 00
F00:0401       			move.w  cs_palntsc,d0		; PALNTSC
               S01:00069678:  30 3A FF EA
F00:0402       			bsr		LSP_MusicDriver_CIA_Start
               S01:0006967C:  61 0C
F00:0403       			move.w	#$e000,$dff09a
               S01:0006967E:  33 FC E0 00 00 DF F0 9A
F00:0404       			bra.w   lspend
               S01:00069686:  60 00 03 7E
F00:0405       			
F00:0406       LSP_MusicDriver_CIA_Start:
F00:0407       			move.w	d0,-(a7)
               S01:0006968A:  3F 00
F00:0408       			lea		.irqVector(pc),a3
               S01:0006968C:  47 FA 00 28
F00:0409       			lea		$78(a2),a2
               S01:00069690:  45 EA 00 78
F00:0410       			move.l	a2,(a3)
               S01:00069694:  26 8A
F00:0411       			lea		.LSPDmaCon+1(pc),a2		; DMACON byte patch address
               S01:00069696:  45 FA 00 1D
F00:0412       			bsr		LSP_MusicInit			; init the LSP player ( whatever fast or insane version )
               S01:0006969A:  61 00 01 4A
F00:0413       			lea		.pMusicBPM(pc),a2
               S01:0006969E:  45 FA 00 20
F00:0414       			move.l	a0,(a2)					; store music BPM pointer
               S01:000696A2:  24 88
F00:0415       			move.w	(a0),d0					; start BPM
               S01:000696A4:  30 10
F00:0416       			lea		.curBpm(pc),a2
               S01:000696A6:  45 FA 00 16
F00:0417       			move.w	d0,(a2)
               S01:000696AA:  34 80
F00:0418       			moveq	#1,d1
               S01:000696AC:  72 01
F00:0419       			and.w	(a7)+,d1
               S01:000696AE:  C2 5F
F00:0420       			bsr.s	.LSP_IrqInstall
               S01:000696B0:  61 12
F00:0421       			rts
               S01:000696B2:  4E 75
F00:0422       .LSPDmaCon:	dc.w	$8000
               S01:000696B4:  80 00
F00:0423       .irqVector:	dc.l	0
               S01:000696B6:  00 00 00 00
F00:0424       .ciaClock:	dc.l	0
               S01:000696BA:  00 00 00 00
F00:0425       .curBpm:	dc.w	0
               S01:000696BE:  00 00
F00:0426       .pMusicBPM:	dc.l	0
               S01:000696C0:  00 00 00 00
F00:0427       ; d0: music BPM
F00:0428       ; d1: PAL(0) or NTSC(1)
F00:0429       .LSP_IrqInstall:
F00:0430       			move.w 	#(1<<13),$dff09a		; disable CIA interrupt
               S01:000696C4:  33 FC 20 00 00 DF F0 9A
F00:0431       			lea		.LSP_MainIrq(pc),a0
               S01:000696CC:  41 FA 00 6A
F00:0432       			move.l	.irqVector(pc),a5
               S01:000696D0:  2A 7A FF E4
F00:0433       			move.l	a0,(a5)
               S01:000696D4:  2A 88
F00:0434       			lea		$bfd000,a0
               S01:000696D6:  41 F9 00 BF D0 00
F00:0435       			move.b 	#$7f,$d00(a0)
               S01:000696DC:  11 7C 00 7F 0D 00
F00:0436       			move.b 	#$10,$e00(a0)
               S01:000696E2:  11 7C 00 10 0E 00
F00:0437       			move.b 	#$10,$f00(a0)
               S01:000696E8:  11 7C 00 10 0F 00
F00:0438       			lsl.w	#2,d1
               S01:000696EE:  E5 49
F00:0439       			move.l	.palClocks(pc,d1.w),d1				; PAL or NTSC clock
               S01:000696F0:  22 3B 10 3E
F00:0440       			lea		.ciaClock(pc),a5
               S01:000696F4:  4B FA FF C4
F00:0441       			move.l	d1,(a5)
               S01:000696F8:  2A 81
F00:0442       			divu.w	d0,d1
               S01:000696FA:  82 C0
F00:0443       			move.b	d1,$400(a0)
               S01:000696FC:  11 41 04 00
F00:0444       			lsr.w 	#8,d1
               S01:00069700:  E0 49
F00:0445       			move.b	d1,$500(a0)
               S01:00069702:  11 41 05 00
F00:0446       			move.b	#$83,$d00(a0)
               S01:00069706:  11 7C 00 83 0D 00
F00:0447       			move.b	#$11,$e00(a0)
               S01:0006970C:  11 7C 00 11 0E 00
F00:0448       			
F00:0449       			move.b	#496&255,$600(a0)		; set timer b to 496 ( to set DMACON )
               S01:00069712:  11 7C 00 F0 06 00
F00:0450       			move.b	#496>>8,$700(a0)
               S01:00069718:  11 7C 00 01 07 00
F00:0451       			move.w 	#(1<<13),$dff09c		; clear any req CIA
               S01:0006971E:  33 FC 20 00 00 DF F0 9C
F00:0452       			move.w 	#$a000,$dff09a			; CIA interrupt enabled
               S01:00069726:  33 FC A0 00 00 DF F0 9A
F00:0453       			rts
               S01:0006972E:  4E 75
F00:0454       		
F00:0455       .palClocks:	dc.l	1773447,1789773
               S01:00069730:  00 1B 0F 87
               S01:00069734:  00 1B 4F 4D
F00:0456       .LSP_MainIrq:
F00:0457       			btst.b	#0,$bfdd00
               S01:00069738:  08 39 00 00 00 BF DD 00
F00:0458       			beq.s	.skipa
               S01:00069740:  67 4A
F00:0459       			
F00:0460       			movem.l	d0-a6,-(a7)
               S01:00069742:  48 E7 FF FE
F00:0461       		; call player tick
F00:0462       			lea		$dff0a0,a6
               S01:00069746:  4D F9 00 DF F0 A0
F00:0463       			bsr		LSP_MusicPlayTick		; LSP main music driver tick
               S01:0006974C:  61 00 01 60
F00:0464       		; check if BMP changed in the middle of the music
F00:0465       			move.l	.pMusicBPM(pc),a0
               S01:00069750:  20 7A FF 6E
F00:0466       			move.w	(a0),d0					; current music BPM
               S01:00069754:  30 10
F00:0467       			cmp.w	.curBpm(pc),d0
               S01:00069756:  B0 7A FF 66
F00:0468       			beq.s	.noChg
               S01:0006975A:  67 1A
F00:0469       			lea		.curBpm(pc),a2			
               S01:0006975C:  45 FA FF 60
F00:0470       			move.w	d0,(a2)					; current BPM
               S01:00069760:  34 80
F00:0471       			move.l	.ciaClock(pc),d1
               S01:00069762:  22 3A FF 56
F00:0472       			divu.w	d0,d1
               S01:00069766:  82 C0
F00:0473       			move.b	d1,$bfd400
               S01:00069768:  13 C1 00 BF D4 00
F00:0474       			lsr.w 	#8,d1
               S01:0006976E:  E0 49
F00:0475       			move.b	d1,$bfd500			
               S01:00069770:  13 C1 00 BF D5 00
F00:0476       .noChg:		lea		.LSP_DmaconIrq(pc),a0
               S01:00069776:  41 FA 00 20
F00:0477       			move.l	.irqVector(pc),a1
               S01:0006977A:  22 7A FF 3A
F00:0478       			move.l	a0,(a1)
               S01:0006977E:  22 88
F00:0479       			move.b	#$19,$bfdf00			; start timerB, one shot
               S01:00069780:  13 FC 00 19 00 BF DF 00
F00:0480       			movem.l	(a7)+,d0-a6
               S01:00069788:  4C DF 7F FF
F00:0481       .skipa:		move.w	#$2000,$dff09c
               S01:0006978C:  33 FC 20 00 00 DF F0 9C
F00:0482       			nop
               S01:00069794:  4E 71
F00:0483       			rte
               S01:00069796:  4E 73
F00:0484       .LSP_DmaconIrq:
F00:0485       			btst.b	#1,$bfdd00
               S01:00069798:  08 39 00 01 00 BF DD 00
F00:0486       			beq.s	.skipb
               S01:000697A0:  67 16
F00:0487       			move.w	.LSPDmaCon(pc),$dff096
               S01:000697A2:  33 FA FF 10 00 DF F0 96
F00:0488       			pea		(a0)
               S01:000697AA:  48 50
F00:0489       			move.l	.irqVector(pc),a0
               S01:000697AC:  20 7A FF 08
F00:0490       			pea		.LSP_MainIrq(pc)
               S01:000697B0:  48 7A FF 86
F00:0491       			move.l	(a7)+,(a0)
               S01:000697B4:  20 9F
F00:0492       			move.l	(a7)+,a0
               S01:000697B6:  20 5F
F00:0493       .skipb:		move.w	#$2000,$dff09c
               S01:000697B8:  33 FC 20 00 00 DF F0 9C
F00:0494       			nop
               S01:000697C0:  4E 71
F00:0495       			rte
               S01:000697C2:  4E 73
F00:0496       LSP_MusicDriver_CIA_Stop:
F00:0497       			move.b	#$7f,$bfdd00
               S01:000697C4:  13 FC 00 7F 00 BF DD 00
F00:0498       			move.w	#$2000,$dff09a
               S01:000697CC:  33 FC 20 00 00 DF F0 9A
F00:0499       			move.w	#$2000,$dff09c
               S01:000697D4:  33 FC 20 00 00 DF F0 9C
F00:0500       			move.w	#$000f,$dff096
               S01:000697DC:  33 FC 00 0F 00 DF F0 96
F00:0501       			rts
               S01:000697E4:  4E 75
F00:0502       			
F00:0503       LSP_MusicInit:
F00:0504       			cmpi.l	#'LSP1',(a0)+
               S01:000697E6:  0C 98 4C 53 50 31
F00:0505       			bne		.dataError
               S01:000697EC:  66 00 00 BE
F00:0506       			move.l	(a0)+,d0		; unique id
               S01:000697F0:  20 18
F00:0507       			cmp.l	(a1),d0			; check sample bank matches the lsmusic file
               S01:000697F2:  B0 91
F00:0508       			bne		.dataError
               S01:000697F4:  66 00 00 B6
F00:0509       			lea		LSP_State(pc),a3
               S01:000697F8:  47 FA 01 DE
F00:0510       			move.l	a2,m_dmaconPatch(a3)
               S01:000697FC:  27 4A 00 08
F00:0511       			move.w	#$8000,-1(a2)			; Be sure DMACon word is $8000 (note: a2 should be ODD address)
               S01:00069800:  35 7C 80 00 FF FF
F00:0512       			cmpi.w	#$010b,(a0)+			; this play routine supports v1.11 as minimal version of LPConvert.exe
               S01:00069806:  0C 58 01 0B
F00:0513       			blt		.dataError
               S01:0006980A:  6D 00 00 A0
F00:0514       			movea.l	a0,a4					; relocation flag ad
               S01:0006980E:  28 48
F00:0515       			addq.w	#2,a0					; skip relocation flag
               S01:00069810:  54 48
F00:0516       			move.w	(a0)+,m_currentBpm(a3)	; default BPM
               S01:00069812:  37 58 00 1A
F00:0517       			move.w	(a0)+,m_escCodeRewind(a3)
               S01:00069816:  37 58 00 10
F00:0518       			move.w	(a0)+,m_escCodeSetBpm(a3)
               S01:0006981A:  37 58 00 12
F00:0519       			move.w	(a0)+,m_escCodeGetPos(a3)
               S01:0006981E:  37 58 00 2C
F00:0520       			move.l	(a0)+,-(a7)				; music len in frame ticks
               S01:00069822:  2F 18
F00:0521       			move.w	(a0)+,d0				; instrument count
               S01:00069824:  30 18
F00:0522       			lea		-12(a0),a2				; LSP data has -12 offset on instrument tab ( to win 2 cycles in insane player :) )
               S01:00069826:  45 E8 FF F4
F00:0523       			move.l	a2,m_lspInstruments(a3)	; instrument tab addr ( minus 4 )
               S01:0006982A:  27 4A 00 14
F00:0524       			subq.w	#1,d0
               S01:0006982E:  53 40
F00:0525       			move.l	a1,d1
               S01:00069830:  22 09
F00:0526       			movea.l	a0,a1					; keep relocated flag
               S01:00069832:  22 48
F00:0527       .relocLoop:	tst.b	(a4)					; relocation guard
               S01:00069834:  4A 14
F00:0528       			bne.s	.relocated
               S01:00069836:  66 06
F00:0529       			add.l	d1,(a0)
               S01:00069838:  D3 90
F00:0530       			add.l	d1,6(a0)
               S01:0006983A:  D3 A8 00 06
F00:0531       .relocated:	lea		12(a0),a0
               S01:0006983E:  41 E8 00 0C
F00:0532       			dbf		d0,.relocLoop
               S01:00069842:  51 C8 FF F0
F00:0533       			move.w	(a0)+,d0				; codes table size
               S01:00069846:  30 18
F00:0534       			move.l	a0,m_codeTableAddr(a3)	; code table
               S01:00069848:  27 48 00 0C
F00:0535       			add.w	d0,d0
               S01:0006984C:  D0 40
F00:0536       			add.w	d0,a0
               S01:0006984E:  D0 C0
F00:0537       		; read sequence timing infos (if any)
F00:0538       			move.w	(a0)+,m_seqCount(a3)
               S01:00069850:  37 58 00 24
F00:0539       			beq.s	.noSeq
               S01:00069854:  67 2A
F00:0540       			move.l	a0,m_seqTable(a3)
               S01:00069856:  27 48 00 26
F00:0541       			clr.w	m_currentSeq(a3)
               S01:0006985A:  42 6B 00 2A
F00:0542       			move.w	m_seqCount(a3),d0
               S01:0006985E:  30 2B 00 24
F00:0543       			moveq	#0,d1
               S01:00069862:  72 00
F00:0544       			move.w	d0,d1
               S01:00069864:  32 00
F00:0545       			lsl.w	#3,d1			; 8 bytes per entry
               S01:00069866:  E7 49
F00:0546       			add.w	#12,d1			; add 3 last 32bits (word stream size, byte stream loop, word stream loop)
               S01:00069868:  D2 7C 00 0C
F00:0547       			add.l	a0,d1			; word stream data address
               S01:0006986C:  D2 88
F00:0548       			subq.w	#1,d0
               S01:0006986E:  53 40
F00:0549       .seqRel:	tst.b	(a4)
               S01:00069870:  4A 14
F00:0550       			bne.s	.skipRel
               S01:00069872:  66 06
F00:0551       			add.l	d1,(a0)
               S01:00069874:  D3 90
F00:0552       			add.l	d1,4(a0)
               S01:00069876:  D3 A8 00 04
F00:0553       .skipRel:	addq.w	#8,a0
               S01:0006987A:  50 48
F00:0554       			dbf		d0,.seqRel
               S01:0006987C:  51 C8 FF F2
F00:0555       .noSeq:		movem.l	(a0)+,d0-d2				; word stream size, byte stream loop point, word stream loop point
               S01:00069880:  4C D8 00 07
F00:0556       			st		(a4)					
               S01:00069884:  50 D4
F00:0557       			move.l	a0,m_wordStream(a3)
               S01:00069886:  27 48 00 04
F00:0558       			lea		0(a0,d0.l),a1			; byte stream
               S01:0006988A:  43 F0 08 00
F00:0559       			move.l	a1,m_byteStream(a3)
               S01:0006988E:  26 89
F00:0560       			add.l	d2,a0
               S01:00069890:  D1 C2
F00:0561       			add.l	d1,a1
               S01:00069892:  D3 C1
F00:0562       			move.l	a0,m_wordStreamLoop(a3)
               S01:00069894:  27 48 00 20
F00:0563       			move.l	a1,m_byteStreamLoop(a3)
               S01:00069898:  27 49 00 1C
F00:0564       			bset.b	#1,$bfe001				; disabling this fucking Low pass filter!!
               S01:0006989C:  08 F9 00 01 00 BF E0 01
F00:0565       			lea		m_currentBpm(a3),a0
               S01:000698A4:  41 EB 00 1A
F00:0566       			move.l	(a7)+,d0				; music len in frame ticks
               S01:000698A8:  20 1F
F00:0567       			rts
               S01:000698AA:  4E 75
F00:0568       .dataError:	illegal
               S01:000698AC:  4A FC
F00:0569       ;------------------------------------------------------------------
F00:0570       ;
F00:0571       ;	LSP_MusicPlayTick
F00:0572       ;
F00:0573       ;		In:	a6: should be $dff0a0
F00:0574       ;			Scratched regs: d0/d1/d2/a0/a1/a2/a3/a4/a5
F00:0575       ;		Out:None
F00:0576       ;
F00:0577       ;------------------------------------------------------------------
F00:0578       LSP_MusicPlayTick:
F00:0579       			lea		LSP_State(pc),a1
               S01:000698AE:  43 FA 01 28
F00:0580       			move.l	(a1),a0					; byte stream
               S01:000698B2:  20 51
F00:0581       			move.l	m_codeTableAddr(a1),a2	; code table
               S01:000698B4:  24 69 00 0C
F00:0582       .process:	moveq	#0,d0
               S01:000698B8:  70 00
F00:0583       .cloop:		move.b	(a0)+,d0
               S01:000698BA:  10 18
F00:0584       			beq		.cextended
               S01:000698BC:  67 00 00 A2
F00:0585       			add.w	d0,d0
               S01:000698C0:  D0 40
F00:0586       			move.w	0(a2,d0.w),d0			; code
               S01:000698C2:  30 32 00 00
F00:0587       			beq		.noInst
               S01:000698C6:  67 00 00 94
F00:0588       .cmdExec:	add.b	d0,d0
               S01:000698CA:  D0 00
F00:0589       			bcc.s	.noVd
               S01:000698CC:  64 04
F00:0590       			move.b	(a0)+,$d9-$a0(a6)
               S01:000698CE:  1D 58 00 39
F00:0591       .noVd:		add.b	d0,d0
               S01:000698D2:  D0 00
F00:0592       			bcc.s	.noVc
               S01:000698D4:  64 04
F00:0593       			move.b	(a0)+,$c9-$a0(a6)
               S01:000698D6:  1D 58 00 29
F00:0594       .noVc:		add.b	d0,d0
               S01:000698DA:  D0 00
F00:0595       			bcc.s	.noVb
               S01:000698DC:  64 04
F00:0596       			move.b	(a0)+,$b9-$a0(a6)
               S01:000698DE:  1D 58 00 19
F00:0597       .noVb:		add.b	d0,d0
               S01:000698E2:  D0 00
F00:0598       			bcc.s	.noVa
               S01:000698E4:  64 04
F00:0599       			move.b	(a0)+,$a9-$a0(a6)
               S01:000698E6:  1D 58 00 09
F00:0600       .noVa:		
F00:0601       			move.l	a0,(a1)+	; store byte stream ptr
               S01:000698EA:  22 C8
F00:0602       			move.l	(a1),a0		; word stream
               S01:000698EC:  20 51
F00:0603       			tst.b	d0
               S01:000698EE:  4A 00
F00:0604       			beq.s	.noPa
               S01:000698F0:  67 20
F00:0605       			add.b	d0,d0
               S01:000698F2:  D0 00
F00:0606       			bcc.s	.noPd
               S01:000698F4:  64 04
F00:0607       			move.w	(a0)+,$d6-$a0(a6)
               S01:000698F6:  3D 58 00 36
F00:0608       .noPd:		add.b	d0,d0
               S01:000698FA:  D0 00
F00:0609       			bcc.s	.noPc
               S01:000698FC:  64 04
F00:0610       			move.w	(a0)+,$c6-$a0(a6)
               S01:000698FE:  3D 58 00 26
F00:0611       .noPc:		add.b	d0,d0
               S01:00069902:  D0 00
F00:0612       			bcc.s	.noPb
               S01:00069904:  64 04
F00:0613       			move.w	(a0)+,$b6-$a0(a6)
               S01:00069906:  3D 58 00 16
F00:0614       .noPb:		add.b	d0,d0
               S01:0006990A:  D0 00
F00:0615       			bcc.s	.noPa
               S01:0006990C:  64 04
F00:0616       			move.w	(a0)+,$a6-$a0(a6)
               S01:0006990E:  3D 58 00 06
F00:0617       .noPa:		
F00:0618       			tst.w	d0
               S01:00069912:  4A 40
F00:0619       			beq.s	.noInst
               S01:00069914:  67 46
F00:0620       			moveq	#0,d1
               S01:00069916:  72 00
F00:0621       			move.l	m_lspInstruments-4(a1),a2	; instrument table
               S01:00069918:  24 69 00 10
F00:0622       			lea		.resetv+12(pc),a4
               S01:0006991C:  49 FA 00 8E
F00:0623       			lea		3*16(a6),a5
               S01:00069920:  4B EE 00 30
F00:0624       			moveq	#4-1,d2
               S01:00069924:  74 03
F00:0625       .vloop:		add.w	d0,d0
               S01:00069926:  D0 40
F00:0626       			bcs.s	.setIns
               S01:00069928:  65 0E
F00:0627       			add.w	d0,d0
               S01:0006992A:  D0 40
F00:0628       			bcc.s	.skip
               S01:0006992C:  64 1E
F00:0629       			move.l	(a4),a3
               S01:0006992E:  26 54
F00:0630       			move.l	(a3)+,(a5)
               S01:00069930:  2A 9B
F00:0631       			move.w	(a3)+,4(a5)
               S01:00069932:  3B 5B 00 04
F00:0632       			bra.s	.skip
               S01:00069936:  60 14
F00:0633       .setIns:	add.w	(a0)+,a2
               S01:00069938:  D4 D8
F00:0634       			add.w	d0,d0
               S01:0006993A:  D0 40
F00:0635       			bcc.s	.noReset
               S01:0006993C:  64 06
F00:0636       			bset	d2,d1
               S01:0006993E:  05 C1
F00:0637       			move.w	d1,$96-$a0(a6)
               S01:00069940:  3D 41 FF F6
F00:0638       .noReset:	move.l	(a2)+,(a5)
               S01:00069944:  2A 9A
F00:0639       			move.w	(a2)+,4(a5)
               S01:00069946:  3B 5A 00 04
F00:0640       			move.l	a2,(a4)
               S01:0006994A:  28 8A
F00:0641       .skip:		subq.w	#4,a4
               S01:0006994C:  59 4C
F00:0642       			lea		-16(a5),a5
               S01:0006994E:  4B ED FF F0
F00:0643       			dbf		d2,.vloop
               S01:00069952:  51 CA FF D2
F00:0644       			move.l	m_dmaconPatch-4(a1),a3		; dmacon patch
               S01:00069956:  26 69 00 04
F00:0645       			move.b	d1,(a3)						; dmacon			
               S01:0006995A:  16 81
F00:0646       .noInst:	move.l	a0,(a1)			; store word stream (or byte stream if coming from early out)
               S01:0006995C:  22 88
F00:0647       			rts
               S01:0006995E:  4E 75
F00:0648       .cextended:	addi.w	#$100,d0
               S01:00069960:  06 40 01 00
F00:0649       			move.b	(a0)+,d0
               S01:00069964:  10 18
F00:0650       			beq.s	.cextended
               S01:00069966:  67 F8
F00:0651       			add.w	d0,d0
               S01:00069968:  D0 40
F00:0652       			move.w	0(a2,d0.w),d0			; code
               S01:0006996A:  30 32 00 00
F00:0653       			cmp.w	m_escCodeRewind(a1),d0
               S01:0006996E:  B0 69 00 10
F00:0654       			beq.s	.r_rewind
               S01:00069972:  67 16
F00:0655       			cmp.w	m_escCodeSetBpm(a1),d0
               S01:00069974:  B0 69 00 12
F00:0656       			beq.s	.r_chgbpm
               S01:00069978:  67 1E
F00:0657       			cmp.w	m_escCodeGetPos(a1),d0
               S01:0006997A:  B0 69 00 2C
F00:0658       			bne		.cmdExec
               S01:0006997E:  66 00 FF 4A
F00:0659       .r_setPos:	move.b	(a0)+,(m_currentSeq+1)(a1)
               S01:00069982:  13 58 00 2B
F00:0660       			bra		.process
               S01:00069986:  60 00 FF 30
F00:0661       .r_rewind:	
F00:0662       			move.l	m_byteStreamLoop(a1),a0
               S01:0006998A:  20 69 00 1C
F00:0663       			move.l	m_wordStreamLoop(a1),m_wordStream(a1)
               S01:0006998E:  23 69 00 20 00 04
F00:0664       			bra		.process
               S01:00069994:  60 00 FF 22
F00:0665       .r_chgbpm:	move.b	(a0)+,(m_currentBpm+1)(a1)	; BPM
               S01:00069998:  13 58 00 1B
F00:0666       			bra		.process
               S01:0006999C:  60 00 FF 1A
F00:0667       .resetv:	dc.l	0,0,0,0
               S01:000699A0:  00 00 00 00
               S01:000699A4:  00 00 00 00
               S01:000699A8:  00 00 00 00
               S01:000699AC:  00 00 00 00
F00:0668       ;------------------------------------------------------------------
F00:0669       ;
F00:0670       ;	LSP_MusicSetPos
F00:0671       ;
F00:0672       ;		In: d0: seq position (from 0 to last seq of the song)
F00:0673       ;		Out:None
F00:0674       ;
F00:0675       ;	Force the replay pointer to a seq position. If music wasn't converted
F00:0676       ;	using -setpos option, this func does nothing
F00:0677       ;
F00:0678       ;------------------------------------------------------------------
F00:0679       LSP_MusicSetPos:
F00:0680       			lea		LSP_State(pc),a3
               S01:000699B0:  47 FA 00 26
F00:0681       			move.w	m_seqCount(a3),d1
               S01:000699B4:  32 2B 00 24
F00:0682       			beq.s	.noTimingInfo
               S01:000699B8:  67 16
F00:0683       			cmp.w	d1,d0
               S01:000699BA:  B0 41
F00:0684       			bge.s	.noTimingInfo
               S01:000699BC:  6C 12
F00:0685       			move.w	d0,m_currentSeq(a3)
               S01:000699BE:  37 40 00 2A
F00:0686       			move.l	m_seqTable(a3),a0
               S01:000699C2:  20 6B 00 26
F00:0687       			lsl.w	#3,d0
               S01:000699C6:  E7 48
F00:0688       			add.w	d0,a0
               S01:000699C8:  D0 C0
F00:0689       			move.l	(a0)+,m_wordStream(a3)
               S01:000699CA:  27 58 00 04
F00:0690       			move.l	(a0)+,m_byteStream(a3)
               S01:000699CE:  26 98
F00:0691       .noTimingInfo:
F00:0692       			rts
               S01:000699D0:  4E 75
F00:0693       ;------------------------------------------------------------------
F00:0694       ;
F00:0695       ;	LSP_MusicGetPos
F00:0696       ;
F00:0697       ;		In: None
F00:0698       ;		Out: d0:  seq position (from 0 to last seq of the song)
F00:0699       ;
F00:0700       ;	Get the current seq position. If music wasn't converted with
F00:0701       ;	-getpos option, this func just returns 0
F00:0702       ;
F00:0703       ;------------------------------------------------------------------
F00:0704       LSP_MusicGetPos:			
F00:0705       			move.w	(LSP_State+m_currentSeq)(pc),d0
               S01:000699D2:  30 3A 00 2E
F00:0706       			rts
               S01:000699D6:  4E 75
F00:0707       	rsreset
F00:0708       	
F00:0709       m_byteStream:		rs.l	1	;  0 byte stream
F00:0710       m_wordStream:		rs.l	1	;  4 word stream
F00:0711       m_dmaconPatch:		rs.l	1	;  8 m_lfmDmaConPatch
F00:0712       m_codeTableAddr:	rs.l	1	; 12 code table addr
F00:0713       m_escCodeRewind:	rs.w	1	; 16 rewind special escape code
F00:0714       m_escCodeSetBpm:	rs.w	1	; 18 set BPM escape code
F00:0715       m_lspInstruments:	rs.l	1	; 20 LSP instruments table addr
F00:0716       m_relocDone:		rs.w	1	; 24 reloc done flag
F00:0717       m_currentBpm:		rs.w	1	; 26 current BPM
F00:0718       m_byteStreamLoop:	rs.l	1	; 28 byte stream loop point
F00:0719       m_wordStreamLoop:	rs.l	1	; 32 word stream loop point
F00:0720       m_seqCount:			rs.w	1
F00:0721       m_seqTable:			rs.l	1
F00:0722       m_currentSeq:		rs.w	1
F00:0723       m_escCodeGetPos:	rs.w	1
F00:0724       sizeof_LSPVars:		rs.w	0
F00:0725       LSP_State:			ds.b	sizeof_LSPVars		
F00:0726       lspend:	
F00:0727       	
F00:0728       	rts
               S01:00069A06:  4E 75
F00:0729       	; ***********  Defining procedure : Load_c2p
F00:0730       	;    Procedure type : User-defined procedure
F00:0731       Load_c2p
F00:0732       BPLX	EQU	320
F00:0733       BPLY	EQU	512
F00:0734       BPLSIZE	EQU	BPLX*BPLY/8
F00:0735       MINUBPLSIZEMINUS4 EQU -BPLSIZE-4
F00:0736       BPLSIZEX2 EQU BPLSIZE*2
F00:0737       BPLSIZEX3 EQU -BPLSIZE*3
F00:0738       CHUNKYXMAX EQU	BPLX
F00:0739       CHUNKYYMAX EQU	BPLY
F00:0740       ;				modulo	max res	fscreen	compu
F00:0741       ; c2p1x1_5_c5_030		no	320x256?  no	030
F00:0742       ; d0.w	chunkyx [chunky-pixels]
F00:0743       ; d1.w	chunkyy [chunky-pixels]
F00:0744       ; d2.w	(scroffsx) [screen-pixels]
F00:0745       ; d3.w	scroffsy [screen-pixels]
F00:0746       ; d4.w	(rowlen) [bytes] -- offset between one row and the next in a bpl
F00:0747       ; d5.l	(bplsize) [bytes] -- offset between one row in one bpl and the next bpl
F00:0748       	XDEF	_c2p1x1_5_c5_030_init
F00:0749       	XDEF	c2p1x1_5_c5_030_init
F00:0750       _c2p1x1_5_c5_030_init
F00:0751       c2p1x1_5_c5_030_init
F00:0752       	movem.l	d2-d3,-(sp)
               S01:00069A08:  48 E7 30 00
F00:0753       	andi.l	#$ffff,d0
               S01:00069A0C:  02 80 00 00 FF FF
F00:0754       	mulu.w	d0,d3
               S01:00069A12:  C6 C0
F00:0755       	lsr.l	#3,d3
               S01:00069A14:  E6 8B
F00:0756       	move.l	d3,c2p1x1_5_c5_030_scroffs
               S01:00069A16:  23 C3 00 06 9C 16 [R]
F00:0757       	mulu.w	d0,d1
               S01:00069A1C:  C2 C0
F00:0758       	move.l	d1,c2p1x1_5_c5_030_pixels
               S01:00069A1E:  23 C1 00 06 9C 1A [R]
F00:0759       	movem.l	(sp)+,d2-d3
               S01:00069A24:  4C DF 00 0C
F00:0760       	rts
               S01:00069A28:  4E 75
F00:0761       ; a0	c2pscreen
F00:0762       ; a1	bitplanes
F00:0763       	XDEF	_c2p1x1_5_c5_030
F00:0764       	XDEF	c2p1x1_5_c5_030
F00:0765       _c2p1x1_5_c5_030
F00:0766       c2p1x1_5_c5_030
F00:0767       	movem.l	d2-d7/a2-a6,-(sp)
               S01:00069A2A:  48 E7 3F 3E
F00:0768       	move.l	#$33333333,a6
               S01:00069A2E:  2C 7C 33 33 33 33
F00:0769       	add.l	#BPLSIZE,a1
               S01:00069A34:  43 E9 50 00
F00:0770       	add.l	c2p1x1_5_c5_030_scroffs,a1
               S01:00069A38:  D3 FA 01 DC
F00:0771       	lea	c2p1x1_5_c5_030_tempbuf,a3
               S01:00069A3C:  47 F9 00 00 00 B6 [R]
F00:0772       	move.l	c2p1x1_5_c5_030_pixels,a2
               S01:00069A42:  24 7A 01 D6
F00:0773       	add.l	a0,a2
               S01:00069A46:  D5 C8
F00:0774       	cmp.l	a0,a2
               S01:00069A48:  B5 C8
F00:0775       	beq	.none
               S01:00069A4A:  67 00 01 C4
F00:0776       	move.l	a1,-(sp)
               S01:00069A4E:  2F 09
F00:0777       	move.l	(a0)+,d1
               S01:00069A50:  22 18
F00:0778       	move.l	(a0)+,d5
               S01:00069A52:  2A 18
F00:0779       	move.l	(a0)+,d0
               S01:00069A54:  20 18
F00:0780       	move.l	(a0)+,d6
               S01:00069A56:  2C 18
F00:0781       	move.l	#$0f0f0f0f,d4		; Swap 4x1, part 1
               S01:00069A58:  28 3C 0F 0F 0F 0F
F00:0782       	move.l	d5,d7
               S01:00069A5E:  2E 05
F00:0783       	lsr.l	#4,d7
               S01:00069A60:  E8 8F
F00:0784       	eor.l	d1,d7
               S01:00069A62:  B3 87
F00:0785       	and.l	d4,d7
               S01:00069A64:  CE 84
F00:0786       	eor.l	d7,d1
               S01:00069A66:  BF 81
F00:0787       	lsl.l	#4,d7
               S01:00069A68:  E9 8F
F00:0788       	eor.l	d7,d5
               S01:00069A6A:  BF 85
F00:0789       	move.l	d6,d7
               S01:00069A6C:  2E 06
F00:0790       	lsr.l	#4,d7
               S01:00069A6E:  E8 8F
F00:0791       	eor.l	d0,d7
               S01:00069A70:  B1 87
F00:0792       	and.l	d4,d7
               S01:00069A72:  CE 84
F00:0793       	eor.l	d7,d0
               S01:00069A74:  BF 80
F00:0794       	lsl.l	#4,d7
               S01:00069A76:  E9 8F
F00:0795       	eor.l	d7,d6
               S01:00069A78:  BF 86
F00:0796       	move.l	(a0)+,d3
               S01:00069A7A:  26 18
F00:0797       	move.l	(a0)+,d2
               S01:00069A7C:  24 18
F00:0798       	move.l	d2,d7			; Swap 4x1, part 2
               S01:00069A7E:  2E 02
F00:0799       	lsr.l	#4,d7
               S01:00069A80:  E8 8F
F00:0800       	eor.l	d3,d7
               S01:00069A82:  B7 87
F00:0801       	and.l	d4,d7
               S01:00069A84:  CE 84
F00:0802       	eor.l	d7,d3
               S01:00069A86:  BF 83
F00:0803       	lsl.l	#4,d7
               S01:00069A88:  E9 8F
F00:0804       	eor.l	d7,d2
               S01:00069A8A:  BF 82
F00:0805       	move.w	d3,d7			; Swap 16x4, part 1
               S01:00069A8C:  3E 03
F00:0806       	move.w	d1,d3
               S01:00069A8E:  36 01
F00:0807       	swap	d3
               S01:00069A90:  48 43
F00:0808       	move.w	d3,d1
               S01:00069A92:  32 03
F00:0809       	move.w	d7,d3
               S01:00069A94:  36 07
F00:0810       	lsl.l	#2,d1			; Swap/Merge 2x4, part 1
               S01:00069A96:  E5 89
F00:0811       	or.l	d1,d3
               S01:00069A98:  86 81
F00:0812       	move.l	d3,(a3)+
               S01:00069A9A:  26 C3
F00:0813       	move.l	(a0)+,d1
               S01:00069A9C:  22 18
F00:0814       	move.l	(a0)+,d3
               S01:00069A9E:  26 18
F00:0815       	move.l	d3,d7
               S01:00069AA0:  2E 03
F00:0816       	lsr.l	#4,d7
               S01:00069AA2:  E8 8F
F00:0817       	eor.l	d1,d7
               S01:00069AA4:  B3 87
F00:0818       	and.l	d4,d7
               S01:00069AA6:  CE 84
F00:0819       	eor.l	d7,d1
               S01:00069AA8:  BF 81
F00:0820       	lsl.l	#4,d7
               S01:00069AAA:  E9 8F
F00:0821       	eor.l	d7,d3
               S01:00069AAC:  BF 83
F00:0822       	move.w	d1,d7			; Swap 16x4, part 2
               S01:00069AAE:  3E 01
F00:0823       	move.w	d0,d1
               S01:00069AB0:  32 00
F00:0824       	swap	d1
               S01:00069AB2:  48 41
F00:0825       	move.w	d1,d0
               S01:00069AB4:  30 01
F00:0826       	move.w	d7,d1
               S01:00069AB6:  32 07
F00:0827       	lsl.l	#2,d0			; Swap/Merge 2x4, part 2
               S01:00069AB8:  E5 88
F00:0828       	or.l	d0,d1
               S01:00069ABA:  82 80
F00:0829       	move.l	d1,(a3)+
               S01:00069ABC:  26 C1
F00:0830       	bra.s	.start1
               S01:00069ABE:  60 78
F00:0831       .x1
F00:0832       	move.l	(a0)+,d1
               S01:00069AC0:  22 18
F00:0833       	move.l	(a0)+,d5
               S01:00069AC2:  2A 18
F00:0834       	move.l	(a0)+,d0
               S01:00069AC4:  20 18
F00:0835       	move.l	(a0)+,d6
               S01:00069AC6:  2C 18
F00:0836       	move.l	d7,BPLSIZE(a1)
               S01:00069AC8:  23 47 50 00
F00:0837       	move.l	#$0f0f0f0f,d4		; Swap 4x1, part 1
               S01:00069ACC:  28 3C 0F 0F 0F 0F
F00:0838       	move.l	d5,d7
               S01:00069AD2:  2E 05
F00:0839       	lsr.l	#4,d7
               S01:00069AD4:  E8 8F
F00:0840       	eor.l	d1,d7
               S01:00069AD6:  B3 87
F00:0841       	and.l	d4,d7
               S01:00069AD8:  CE 84
F00:0842       	eor.l	d7,d1
               S01:00069ADA:  BF 81
F00:0843       	lsl.l	#4,d7
               S01:00069ADC:  E9 8F
F00:0844       	eor.l	d7,d5
               S01:00069ADE:  BF 85
F00:0845       	move.l	d6,d7
               S01:00069AE0:  2E 06
F00:0846       	lsr.l	#4,d7
               S01:00069AE2:  E8 8F
F00:0847       	eor.l	d0,d7
               S01:00069AE4:  B1 87
F00:0848       	and.l	d4,d7
               S01:00069AE6:  CE 84
F00:0849       	eor.l	d7,d0
               S01:00069AE8:  BF 80
F00:0850       	lsl.l	#4,d7
               S01:00069AEA:  E9 8F
F00:0851       	eor.l	d7,d6
               S01:00069AEC:  BF 86
F00:0852       	move.l	(a0)+,d3
               S01:00069AEE:  26 18
F00:0853       	move.l	(a0)+,d2
               S01:00069AF0:  24 18
F00:0854       	move.l	a4,(a1)+
               S01:00069AF2:  22 CC
F00:0855       	move.l	d2,d7			; Swap 4x1, part 2
               S01:00069AF4:  2E 02
F00:0856       	lsr.l	#4,d7
               S01:00069AF6:  E8 8F
F00:0857       	eor.l	d3,d7
               S01:00069AF8:  B7 87
F00:0858       	and.l	d4,d7
               S01:00069AFA:  CE 84
F00:0859       	eor.l	d7,d3
               S01:00069AFC:  BF 83
F00:0860       	lsl.l	#4,d7
               S01:00069AFE:  E9 8F
F00:0861       	eor.l	d7,d2
               S01:00069B00:  BF 82
F00:0862       	move.w	d3,d7			; Swap 16x4, part 1
               S01:00069B02:  3E 03
F00:0863       	move.w	d1,d3
               S01:00069B04:  36 01
F00:0864       	swap	d3
               S01:00069B06:  48 43
F00:0865       	move.w	d3,d1
               S01:00069B08:  32 03
F00:0866       	move.w	d7,d3
               S01:00069B0A:  36 07
F00:0867       	lsl.l 	#2,d1 			; Swap/Merge 2x4, part 1
               S01:00069B0C:  E5 89
F00:0868       	or.l 	d1,d3
               S01:00069B0E:  86 81
F00:0869       	move.l 	d3,(a3)+
               S01:00069B10:  26 C3
F00:0870       	move.l	(a0)+,d1
               S01:00069B12:  22 18
F00:0871       	move.l	(a0)+,d3
               S01:00069B14:  26 18
F00:0872       	move.l	a5,MINUBPLSIZEMINUS4(a1)
               S01:00069B16:  23 4D AF FC
F00:0873       	move.l	d3,d7
               S01:00069B1A:  2E 03
F00:0874       	lsr.l	#4,d7
               S01:00069B1C:  E8 8F
F00:0875       	eor.l	d1,d7
               S01:00069B1E:  B3 87
F00:0876       	and.l	d4,d7
               S01:00069B20:  CE 84
F00:0877       	eor.l	d7,d1
               S01:00069B22:  BF 81
F00:0878       	lsl.l	#4,d7
               S01:00069B24:  E9 8F
F00:0879       	eor.l	d7,d3
               S01:00069B26:  BF 83
F00:0880       	move.w	d1,d7			; Swap 16x4, part 2
               S01:00069B28:  3E 01
F00:0881       	move.w	d0,d1
               S01:00069B2A:  32 00
F00:0882       	swap	d1
               S01:00069B2C:  48 41
F00:0883       	move.w	d1,d0
               S01:00069B2E:  30 01
F00:0884       	move.w	d7,d1
               S01:00069B30:  32 07
F00:0885       	lsl.l	#2,d0			; Swap/Merge 2x4, part 2
               S01:00069B32:  E5 88
F00:0886       	or.l	d0,d1
               S01:00069B34:  82 80
F00:0887       	move.l	d1,(a3)+
               S01:00069B36:  26 C1
F00:0888       .start1
F00:0889       	move.w	d2,d7			; Swap 16x4, part 3 & 4
               S01:00069B38:  3E 02
F00:0890       	move.w	d5,d2
               S01:00069B3A:  34 05
F00:0891       	swap	d2
               S01:00069B3C:  48 42
F00:0892       	move.w	d2,d5
               S01:00069B3E:  3A 02
F00:0893       	move.w	d7,d2
               S01:00069B40:  34 07
F00:0894       	move.w	d3,d7
               S01:00069B42:  3E 03
F00:0895       	move.w	d6,d3
               S01:00069B44:  36 06
F00:0896       	swap	d3
               S01:00069B46:  48 43
F00:0897       	move.w	d3,d6
               S01:00069B48:  3C 03
F00:0898       	move.w	d7,d3
               S01:00069B4A:  36 07
F00:0899       	move.l	a6,d0
               S01:00069B4C:  20 0E
F00:0900       	move.l	d2,d7			; Swap/Merge 2x4, part 3 & 4
               S01:00069B4E:  2E 02
F00:0901       	lsr.l	#2,d7
               S01:00069B50:  E4 8F
F00:0902       	eor.l	d5,d7
               S01:00069B52:  BB 87
F00:0903       	and.l	d0,d7
               S01:00069B54:  CE 80
F00:0904       	eor.l	d7,d5
               S01:00069B56:  BF 85
F00:0905       	lsl.l	#2,d7
               S01:00069B58:  E5 8F
F00:0906       	eor.l	d7,d2
               S01:00069B5A:  BF 82
F00:0907       	move.l	d3,d7
               S01:00069B5C:  2E 03
F00:0908       	lsr.l	#2,d7
               S01:00069B5E:  E4 8F
F00:0909       	eor.l	d6,d7
               S01:00069B60:  BD 87
F00:0910       	and.l	d0,d7
               S01:00069B62:  CE 80
F00:0911       	eor.l	d7,d6
               S01:00069B64:  BF 86
F00:0912       	lsl.l	#2,d7
               S01:00069B66:  E5 8F
F00:0913       	eor.l	d7,d3
               S01:00069B68:  BF 83
F00:0914       	move.l	#$00ff00ff,d4
               S01:00069B6A:  28 3C 00 FF 00 FF
F00:0915       	move.l	d6,d7			; Swap 8x2, part 1
               S01:00069B70:  2E 06
F00:0916       	lsr.l	#8,d7
               S01:00069B72:  E0 8F
F00:0917       	eor.l	d5,d7
               S01:00069B74:  BB 87
F00:0918       	and.l	d4,d7
               S01:00069B76:  CE 84
F00:0919       	eor.l	d7,d5
               S01:00069B78:  BF 85
F00:0920       	lsl.l	#8,d7
               S01:00069B7A:  E1 8F
F00:0921       	eor.l	d7,d6
               S01:00069B7C:  BF 86
F00:0922       	move.l	#$55555555,d1
               S01:00069B7E:  22 3C 55 55 55 55
F00:0923       	move.l	d6,d7			; Swap 1x2, part 1
               S01:00069B84:  2E 06
F00:0924       	lsr.l	d7
               S01:00069B86:  E2 8F
F00:0925       	eor.l	d5,d7
               S01:00069B88:  BB 87
F00:0926       	and.l	d1,d7
               S01:00069B8A:  CE 81
F00:0927       	eor.l	d7,d5
               S01:00069B8C:  BF 85
F00:0928       	move.l  a1,d0
               S01:00069B8E:  20 09
F00:0929       	add.l   #BPLSIZEX2, a1
               S01:00069B90:  D3 FC 00 00 A0 00
F00:0930       	move.l	d5,(a1)
               S01:00069B96:  22 85
F00:0931       	move.l  d0,a1
               S01:00069B98:  22 40
F00:0932       	add.l	d7,d7
               S01:00069B9A:  DE 87
F00:0933       	eor.l	d6,d7
               S01:00069B9C:  BD 87
F00:0934       	
F00:0935       	move.l	d3,d5			; Swap 8x2, part 2
               S01:00069B9E:  2A 03
F00:0936       	lsr.l	#8,d5
               S01:00069BA0:  E0 8D
F00:0937       	eor.l	d2,d5
               S01:00069BA2:  B5 85
F00:0938       	and.l	d4,d5
               S01:00069BA4:  CA 84
F00:0939       	eor.l	d5,d2
               S01:00069BA6:  BB 82
F00:0940       	lsl.l	#8,d5
               S01:00069BA8:  E1 8D
F00:0941       	eor.l	d5,d3
               S01:00069BAA:  BB 83
F00:0942       	move.l	d3,d5			; Swap 1x2, part 2
               S01:00069BAC:  2A 03
F00:0943       	lsr.l	d5
               S01:00069BAE:  E2 8D
F00:0944       	eor.l	d2,d5
               S01:00069BB0:  B5 85
F00:0945       	and.l	d1,d5
               S01:00069BB2:  CA 81
F00:0946       	eor.l	d5,d2
               S01:00069BB4:  BB 82
F00:0947       	add.l	d5,d5
               S01:00069BB6:  DA 85
F00:0948       	eor.l	d5,d3
               S01:00069BB8:  BB 83
F00:0949       	move.l	d2,a4
               S01:00069BBA:  28 42
F00:0950       	move.l	d3,a5
               S01:00069BBC:  2A 43
F00:0951       	cmpa.l	a0,a2
               S01:00069BBE:  B5 C8
F00:0952       	bne	.x1
               S01:00069BC0:  66 00 FE FE
F00:0953       .x1end
F00:0954       	move.l	d7,BPLSIZE(a1)
               S01:00069BC4:  23 47 50 00
F00:0955       	move.l	a4,(a1)+
               S01:00069BC8:  22 CC
F00:0956       	move.l	a5,MINUBPLSIZEMINUS4(a1)
               S01:00069BCA:  23 4D AF FC
F00:0957       	move.l	(sp)+,a1
               S01:00069BCE:  22 5F
F00:0958       	add.l	#BPLSIZEX3,a1
               S01:00069BD0:  D3 FC FF FF 10 00
F00:0959       	move.l	#$00ff00ff,d3
               S01:00069BD6:  26 3C 00 FF 00 FF
F00:0960       	lea	c2p1x1_5_c5_030_tempbuf,a0
               S01:00069BDC:  41 F9 00 00 00 B6 [R]
F00:0961       	move.l	c2p1x1_5_c5_030_pixels,d0
               S01:00069BE2:  20 3A 00 36
F00:0962       	lsr.l	#2,d0
               S01:00069BE6:  E4 88
F00:0963       	lea	(a0,d0.l),a2
               S01:00069BE8:  45 F0 08 00
F00:0964       	move.l	(a0)+,d0
               S01:00069BEC:  20 18
F00:0965       	move.l	(a0)+,d1
               S01:00069BEE:  22 18
F00:0966       	bra.s	.start2
               S01:00069BF0:  60 06
F00:0967       .x2
F00:0968       	move.l	(a0)+,d0
               S01:00069BF2:  20 18
F00:0969       	move.l	(a0)+,d1
               S01:00069BF4:  22 18
F00:0970       	move.l	d2,(a1)+
               S01:00069BF6:  22 C2
F00:0971       .start2
F00:0972       	move.l	d1,d2			; Swap 8x2
               S01:00069BF8:  24 01
F00:0973       	lsr.l	#8,d2
               S01:00069BFA:  E0 8A
F00:0974       	eor.l	d0,d2
               S01:00069BFC:  B1 82
F00:0975       	and.l	d3,d2
               S01:00069BFE:  C4 83
F00:0976       	eor.l	d2,d0
               S01:00069C00:  B5 80
F00:0977       	lsl.l	#8,d2
               S01:00069C02:  E1 8A
F00:0978       	eor.l	d1,d2
               S01:00069C04:  B3 82
F00:0979       	add.l	d0,d0			; Merge 1x2
               S01:00069C06:  D0 80
F00:0980       	add.l	d0,d2
               S01:00069C08:  D4 80
F00:0981       	cmpa.l	a0,a2
               S01:00069C0A:  B5 C8
F00:0982       	bne.s	.x2
               S01:00069C0C:  66 E4
F00:0983       .x2end
F00:0984       	move.l	d2,(a1)+
               S01:00069C0E:  22 C2
F00:0985       .none
F00:0986       	movem.l	(sp)+,d2-d7/a2-a6
               S01:00069C10:  4C DF 7C FC
F00:0987       	rts
               S01:00069C14:  4E 75
F00:0988       c2p1x1_5_c5_030_scroffs ds.l 1
F00:0989       c2p1x1_5_c5_030_pixels ds.l 1
F00:0990       	rts
               S01:00069C1E:  4E 75
F00:0991       	; ***********  Defining procedure : CookieCut
F00:0992       	;    Procedure type : User-defined procedure
F00:0993       	jmp block35
               S01:00069C20:  60 0E
F00:0994       cc_src	dc.l	0
               S01:00069C22:  00 00 00 00
F00:0995       cc_dst	dc.l	0
               S01:00069C26:  00 00 00 00
F00:0996       cc_mask	dc.l	0
               S01:00069C2A:  00 00 00 00
F00:0997       cc_size	dc.w	0
               S01:00069C2E:  00 00
F00:0998       	 	CNOP 0,4
F00:0999       block35
F00:1000       CookieCut
F00:1001       waitforblitter36
F00:1002       	btst	#14,DMACONR
               S01:00069C30:  08 39 00 0E 00 DF F0 02
F00:1003       	bne.s	waitforblitter36
               S01:00069C38:  66 F6
F00:1004       	; Poke command
F00:1005       	move.l #$DFF000,a0
               S01:00069C3A:  20 7C 00 DF F0 00
F00:1006       	add.w #$50,a0; cc_mask
               S01:00069C40:  41 E8 00 50
F00:1007       	move.l cc_mask,(a0)
               S01:00069C44:  20 BA FF E4
F00:1008       	
F00:1009       ; //BLTAPT
F00:1010       	; Poke command
F00:1011       	move.l #$DFF000,a0
               S01:00069C48:  20 7C 00 DF F0 00
F00:1012       	add.w #$4c,a0; cc_src
               S01:00069C4E:  41 E8 00 4C
F00:1013       	move.l cc_src,(a0)
               S01:00069C52:  20 BA FF CE
F00:1014       	
F00:1015       ; //BLTBPT
F00:1016       	; Poke command
F00:1017       	move.l #$DFF000,a0
               S01:00069C56:  20 7C 00 DF F0 00
F00:1018       	add.w #$48,a0; cc_dst
               S01:00069C5C:  41 E8 00 48
F00:1019       	move.l cc_dst,(a0)
               S01:00069C60:  20 BA FF C4
F00:1020       	
F00:1021       ; //BLTCPT	
F00:1022       	; Poke command
F00:1023       	move.l #$DFF000,a0
               S01:00069C64:  20 7C 00 DF F0 00
F00:1024       	add.w #$54,a0; cc_dst
               S01:00069C6A:  41 E8 00 54
F00:1025       	move.l cc_dst,(a0)
               S01:00069C6E:  20 BA FF B6
F00:1026       	
F00:1027       ; //BLTDPT		
F00:1028       	; Poke command
F00:1029       	move.l #$DFF000,a0
               S01:00069C72:  20 7C 00 DF F0 00
F00:1030       	add.w #$40,a0; #$FCA
               S01:00069C78:  41 E8 00 40
F00:1031       	move.w #$FCA,(a0)
               S01:00069C7C:  30 BC 0F CA
F00:1032       	
F00:1033       ; //BLTCON0	
F00:1034       	; Poke command
F00:1035       	move.l #$DFF000,a0
               S01:00069C80:  20 7C 00 DF F0 00
F00:1036       	add.w #$58,a0; cc_size
               S01:00069C86:  41 E8 00 58
F00:1037       	move.w cc_size,(a0)
               S01:00069C8A:  30 BA FF A2
F00:1038       	rts
               S01:00069C8E:  4E 75
F00:1039       	
F00:1040       ; //BLTSIZE*
F00:1041       ; ///All Channels / Cookie Cut
F00:1042       	; ***********  Defining procedure : DistortCopperLine
F00:1043       	;    Procedure type : User-defined procedure
F00:1044       DistortCopperLine
F00:1045       	moveq.l #0,d1
               S01:00069C90:  72 00
F00:1046       	move.w i,d1          ; Loadvar regular end
               S01:00069C92:  32 3A F3 60
F00:1047       	moveq.l #0,d2
               S01:00069C96:  74 00
F00:1048       	move.w  row,d2 
               S01:00069C98:  34 3A F7 72
F00:1049       	; Array is integer, so multiply with 2
F00:1050       	add.w d1,d1
               S01:00069C9C:  D2 41
F00:1051       	lea sine4Copper,a0             ; LoadVariable:: is array
               S01:00069C9E:  41 FA F3 6C
F00:1052       	move.w (a0,d1),d0             ; LoadVariable:: is array
               S01:00069CA2:  30 30 10 00
F00:1053       	; Store variable : current
F00:1054       	lsr.w #$8,d0 ; Optimization: simple A := A op Const MUL DIV SHR etc
               S01:00069CA6:  E0 48
F00:1055       	cmp.w #$1,d0
               S01:00069CA8:  B0 7C 00 01
F00:1056       	bls c_eblock39
               S01:00069CAC:  63 20
F00:1057       c_ctb38: ;Main true block ;keep 
F00:1058       	move.l d6,(a5)+
               S01:00069CAE:  2A C6
F00:1059       	move.l d5,(a5)+
               S01:00069CB0:  2A C5
F00:1060       	cmp.w d7,d2
               S01:00069CB2:  B4 47
F00:1061       	bne c_edblock91
               S01:00069CB4:  66 02
F00:1062       c_ctb89: ;Main true block ;keep 
F00:1063       	move.l a3,(a5)+
               S01:00069CB6:  2A CB
F00:1064       c_edblock91
F00:1065       	add.w #$100,d2 ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00069CB8:  D4 7C 01 00
F00:1066       	move.w d2,(a5)+
               S01:00069CBC:  3A C2
F00:1067       	move.w #$fffe,(a5)+
               S01:00069CBE:  3A FC FF FE
F00:1068       	move.l d4,(a5)+
               S01:00069CC2:  2A C4
F00:1069       	move.l d3,(a5)+
               S01:00069CC4:  2A C3
F00:1070       	cmp.w d7,d2
               S01:00069CC6:  B4 47
F00:1071       	bne c_edblock97
               S01:00069CC8:  66 02
F00:1072       c_ctb95: ;Main true block ;keep 
F00:1073       	move.l a3,(a5)+
               S01:00069CCA:  2A CB
F00:1074       c_edblock97
F00:1075       	bra.s c_edblock40
               S01:00069CCC:  60 22
F00:1076       c_eblock39
F00:1077       	cmp.w #$0,d0
               S01:00069CCE:  4A 40
F00:1078       	bls c_eblock103
               S01:00069CD0:  63 14
F00:1079       c_ctb102: ;Main true block ;keep 
F00:1080       	move.l d6,(a5)+
               S01:00069CD2:  2A C6
F00:1081       	move.l d5,(a5)+
               S01:00069CD4:  2A C5
F00:1082       	cmp.w d7,d2
               S01:00069CD6:  B4 47
F00:1083       	bne c_edblock123
               S01:00069CD8:  66 02
F00:1084       c_ctb121: ;Main true block ;keep 
F00:1085       	move.l a3,(a5)+
               S01:00069CDA:  2A CB
F00:1086       c_edblock123
F00:1087       	move.w #$0,curbplmod ; Simple a:=b optimization 
               S01:00069CDC:  33 FC 00 00 00 06 8F FE [R]
F00:1088       	bra.s c_edblock104
               S01:00069CE4:  60 0A
F00:1089       c_eblock103
F00:1090       	move.l a6,(a5)+
               S01:00069CE6:  2A CE
F00:1091       	move.l a4,(a5)+
               S01:00069CE8:  2A CC
F00:1092       	cmp.w d7,d2
               S01:00069CEA:  B4 47
F00:1093       	bne c_edblock130
               S01:00069CEC:  66 02
F00:1094       c_ctb128: ;Main true block ;keep 
F00:1095       	move.l a3,(a5)+
               S01:00069CEE:  2A CB
F00:1096       c_edblock130
F00:1097       c_edblock104
F00:1098       c_edblock40
F00:1099       	cmp.w #$fe,i
               S01:00069CF0:  0C 79 00 FE 00 06 8F F4 [R]
F00:1100       	bhs c_eblock135
               S01:00069CF8:  64 08
F00:1101       c_ctb134: ;Main true block ;keep 
F00:1102       	add.w #$1,i ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00069CFA:  52 79 00 06 8F F4 [R]
F00:1103       	bra.s c_edblock136
               S01:00069D00:  60 08
F00:1104       c_eblock135
F00:1105       	move.w #$0,i ; Simple a:=b optimization 
               S01:00069D02:  33 FC 00 00 00 06 8F F4 [R]
F00:1106       c_edblock136
F00:1107       	move.w d2,row
               S01:00069D0A:  33 C2 00 06 94 0C [R]
F00:1108       	rts
               S01:00069D10:  4E 75
F00:1109       	
F00:1110       	rts
               S01:00069D12:  4E 75
F00:1111       	; ***********  Defining procedure : ColorCycle
F00:1112       	;    Procedure type : User-defined procedure
F00:1113       ColorCycle
F00:1114       	move.w #$1,colorcycled ; Simple a:=b optimization 
               S01:00069D14:  33 FC 00 01 00 00 A0 BA [R]
F00:1115       	move.w  #1,$100
               S01:00069D1C:  31 FC 00 01 01 00
F00:1116       	move.l	a5,curcopperpos
               S01:00069D22:  23 CD 00 00 A0 BC [R]
F00:1117       	
F00:1118       	move.w #$1f,d0
               S01:00069D28:  30 3C 00 1F
F00:1119       	move.l #image_palette_cycled,a0
               S01:00069D2C:  41 FA F2 3E
F00:1120       	move.l curcopperpos,a1
               S01:00069D30:  22 79 00 00 A0 BC [R]
F00:1121       memcpy39
F00:1122       	move.l (a0)+,(a1)+
               S01:00069D36:  22 D8
F00:1123       	dbf d0,memcpy39
               S01:00069D38:  51 C8 FF FC
F00:1124       	add.l #128,a5
               S01:00069D3C:  4B ED 00 80
F00:1125       	
F00:1126       	rts
               S01:00069D40:  4E 75
F00:1127       	; ***********  Defining procedure : ColorCycleRestore
F00:1128       	;    Procedure type : User-defined procedure
F00:1129       ColorCycleRestore
F00:1130       	move.w #$2,colorcycled ; Simple a:=b optimization 
               S01:00069D42:  33 FC 00 02 00 00 A0 BA [R]
F00:1131       	move.l	a5,curcopperpos
               S01:00069D4A:  23 CD 00 00 A0 BC [R]
F00:1132       	
F00:1133       	move.w #$1f,d0
               S01:00069D50:  30 3C 00 1F
F00:1134       	move.l #image_palette,a1
               S01:00069D54:  43 FA F1 96
F00:1135       	move.l curcopperpos,a0
               S01:00069D58:  20 79 00 00 A0 BC [R]
F00:1136       memcpy41
F00:1137       	move.l (a1)+,(a0)+
               S01:00069D5E:  20 D9
F00:1138       	dbf d0,memcpy41
               S01:00069D60:  51 C8 FF FC
F00:1139       	add.l #128,a5
               S01:00069D64:  4B ED 00 80
F00:1140       	
F00:1141       	rts
               S01:00069D68:  4E 75
F00:1142       	; ***********  Defining procedure : CopperEffects
F00:1143       	;    Procedure type : User-defined procedure
F00:1144       CopperEffects
F00:1145       	move.w istart,i ; Simple a:=b optimization 
               S01:00069D6A:  33 FA F2 94 00 06 8F F4 [R]
F00:1146       	move.w #$2c01,row ; Simple a:=b optimization 
               S01:00069D72:  33 FC 2C 01 00 06 94 0C [R]
F00:1147       		moveq.l #0,d7
               S01:00069D7A:  7E 00
F00:1148       		move.w #$ff01,d7	
               S01:00069D7C:  3E 3C FF 01
F00:1149       		move.l #$1080000,d6
               S01:00069D80:  2C 3C 01 08 00 00
F00:1150       		move.l #$10a0000,d5
               S01:00069D86:  2A 3C 01 0A 00 00
F00:1151       		move.l #$108ffd8,d4
               S01:00069D8C:  28 3C 01 08 FF D8
F00:1152       		move.l #$10affd8,d3
               S01:00069D92:  26 3C 01 0A FF D8
F00:1153       		move.l #$1080028,a6
               S01:00069D98:  2C 7C 01 08 00 28
F00:1154       		move.l #$10a0028,a4
               S01:00069D9E:  28 7C 01 0A 00 28
F00:1155       		move.l #$ffdffffe,a3
               S01:00069DA4:  26 7C FF DF FF FE
F00:1156       	
F00:1157       	lea copper_custom,a5
               S01:00069DAA:  4B F9 00 00 01 1C [R]
F00:1158       while43
F00:1159       loopstart47
F00:1160       	move.w lightypos,d1          ; Loadvar regular end
               S01:00069DB0:  32 39 00 00 A0 C0 [R]
F00:1161       	move.w row,d0
               S01:00069DB6:  30 3A F6 54
F00:1162       	cmp.w d1,d0
               S01:00069DBA:  B0 41
F00:1163       	bhi edblock46
               S01:00069DBC:  62 1E
F00:1164       ctb44: ;Main true block ;keep 
F00:1165       	move.w row,(a5)+
               S01:00069DBE:  3A FA F6 4C
F00:1166       	move.w #$fffe,(a5)+
               S01:00069DC2:  3A FC FF FE
F00:1167       	cmp.w #$0,beerinput
               S01:00069DC6:  4A 79 00 06 8F FC [R]
F00:1168       	bls edblock60
               S01:00069DCC:  63 04
F00:1169       ctb58: ;Main true block ;keep 
F00:1170       	jsr DistortCopperLine
               S01:00069DCE:  61 00 FE C0
F00:1171       edblock60
F00:1172       	add.w #$100,row ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00069DD2:  06 79 01 00 00 06 94 0C [R]
F00:1173       	jmp while43
               S01:00069DDA:  60 D4
F00:1174       edblock46
F00:1175       loopend48
F00:1176       	cmp.w #$6,effectNumber
               S01:00069DDC:  0C 79 00 06 00 06 90 02 [R]
F00:1177       	bne edblock66
               S01:00069DE4:  66 20
F00:1178       ctb64: ;Main true block ;keep 
F00:1179       	move.w row,(a5)+
               S01:00069DE6:  3A FA F6 24
F00:1180       	move.w #$fffe,(a5)+
               S01:00069DEA:  3A FC FF FE
F00:1181       	cmp.w #$0,beerinput
               S01:00069DEE:  4A 79 00 06 8F FC [R]
F00:1182       	bls edblock78
               S01:00069DF4:  63 04
F00:1183       ctb76: ;Main true block ;keep 
F00:1184       	jsr DistortCopperLine
               S01:00069DF6:  61 00 FE 98
F00:1185       edblock78
F00:1186       	jsr ColorCycle
               S01:00069DFA:  61 00 FF 18
F00:1187       	add.w #$100,row ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00069DFE:  06 79 01 00 00 06 94 0C [R]
F00:1188       edblock66
F00:1189       while81
F00:1190       loopstart85
F00:1191       	; Swapped comparison expressions
F00:1192       	moveq #0,d0
               S01:00069E06:  70 00
F00:1193       	move.w lightypos,d0     ; BOP move
               S01:00069E08:  30 39 00 00 A0 C0 [R]
F00:1194       	add.w #$1000,d0 ; simple bop
               S01:00069E0E:  D0 7C 10 00
F00:1195       	cmp.w row,d0
               S01:00069E12:  B0 7A F5 F8
F00:1196       	blo edblock84
               S01:00069E16:  65 1E
F00:1197       ctb82: ;Main true block ;keep 
F00:1198       	move.w row,(a5)+
               S01:00069E18:  3A FA F5 F2
F00:1199       	move.w #$fffe,(a5)+
               S01:00069E1C:  3A FC FF FE
F00:1200       	cmp.w #$0,beerinput
               S01:00069E20:  4A 79 00 06 8F FC [R]
F00:1201       	bls edblock98
               S01:00069E26:  63 04
F00:1202       ctb96: ;Main true block ;keep 
F00:1203       	jsr DistortCopperLine
               S01:00069E28:  61 00 FE 66
F00:1204       edblock98
F00:1205       	add.w #$100,row ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00069E2C:  06 79 01 00 00 06 94 0C [R]
F00:1206       	jmp while81
               S01:00069E34:  60 D0
F00:1207       edblock84
F00:1208       loopend86
F00:1209       	cmp.w #$6,effectNumber
               S01:00069E36:  0C 79 00 06 00 06 90 02 [R]
F00:1210       	bne edblock104
               S01:00069E3E:  66 20
F00:1211       ctb102: ;Main true block ;keep 
F00:1212       	move.w row,(a5)+
               S01:00069E40:  3A FA F5 CA
F00:1213       	move.w #$fffe,(a5)+
               S01:00069E44:  3A FC FF FE
F00:1214       	jsr ColorCycleRestore
               S01:00069E48:  61 00 FE F8
F00:1215       	cmp.w #$0,beerinput
               S01:00069E4C:  4A 79 00 06 8F FC [R]
F00:1216       	bls edblock116
               S01:00069E52:  63 04
F00:1217       ctb114: ;Main true block ;keep 
F00:1218       	jsr DistortCopperLine
               S01:00069E54:  61 00 FE 3A
F00:1219       edblock116
F00:1220       	add.w #$100,row ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00069E58:  06 79 01 00 00 06 94 0C [R]
F00:1221       edblock104
F00:1222       while119
F00:1223       loopstart123
F00:1224       	cmp.w #$2c01,row
               S01:00069E60:  0C 79 2C 01 00 06 94 0C [R]
F00:1225       	blo edblock122
               S01:00069E68:  65 1E
F00:1226       ctb120: ;Main true block ;keep 
F00:1227       	move.w row,(a5)+
               S01:00069E6A:  3A FA F5 A0
F00:1228       	move.w #$fffe,(a5)+
               S01:00069E6E:  3A FC FF FE
F00:1229       	cmp.w #$0,beerinput
               S01:00069E72:  4A 79 00 06 8F FC [R]
F00:1230       	bls edblock136
               S01:00069E78:  63 04
F00:1231       ctb134: ;Main true block ;keep 
F00:1232       	jsr DistortCopperLine
               S01:00069E7A:  61 00 FE 14
F00:1233       edblock136
F00:1234       	add.w #$100,row ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00069E7E:  06 79 01 00 00 06 94 0C [R]
F00:1235       	jmp while119
               S01:00069E86:  60 D8
F00:1236       edblock122
F00:1237       loopend124
F00:1238       while139
F00:1239       loopstart143
F00:1240       	cmp.w #$2c01,row
               S01:00069E88:  0C 79 2C 01 00 06 94 0C [R]
F00:1241       	bhs edblock142
               S01:00069E90:  64 1E
F00:1242       ctb140: ;Main true block ;keep 
F00:1243       	move.w row,(a5)+
               S01:00069E92:  3A FA F5 78
F00:1244       	move.w #$fffe,(a5)+
               S01:00069E96:  3A FC FF FE
F00:1245       	cmp.w #$0,beerinput
               S01:00069E9A:  4A 79 00 06 8F FC [R]
F00:1246       	bls edblock156
               S01:00069EA0:  63 04
F00:1247       ctb154: ;Main true block ;keep 
F00:1248       	jsr DistortCopperLine
               S01:00069EA2:  61 00 FD EC
F00:1249       edblock156
F00:1250       	add.w #$100,row ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00069EA6:  06 79 01 00 00 06 94 0C [R]
F00:1251       	jmp while139
               S01:00069EAE:  60 D8
F00:1252       edblock142
F00:1253       loopend144
F00:1254       	move.w #$ffff,(a5)+
               S01:00069EB0:  3A FC FF FF
F00:1255       	move.w #$fffe,(a5)+
               S01:00069EB4:  3A FC FF FE
F00:1256       	cmp.w #$ff,istart
               S01:00069EB8:  0C 79 00 FF 00 06 90 00 [R]
F00:1257       	bhs eblock161
               S01:00069EC0:  64 08
F00:1258       ctb160: ;Main true block ;keep 
F00:1259       	add.w #$1,istart ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00069EC2:  52 79 00 06 90 00 [R]
F00:1260       	jmp edblock162
               S01:00069EC8:  60 08
F00:1261       eblock161
F00:1262       	move.w #$0,istart ; Simple a:=b optimization 
               S01:00069ECA:  33 FC 00 00 00 06 90 00 [R]
F00:1263       edblock162
F00:1264       	rts
               S01:00069ED2:  4E 75
F00:1265       	
F00:1266       ; //Poke16(#$dff180,0,$000);			
F00:1267       	; ***********  Defining procedure : DistortMore
F00:1268       	;    Procedure type : User-defined procedure
F00:1269       DistortMore
F00:1270       	move.w #$0,i ; Simple a:=b optimization 
               S01:00069ED4:  33 FC 00 00 00 06 8F F4 [R]
F00:1271       forloop168
F00:1272       	moveq #0,d0
               S01:00069EDC:  70 00
F00:1273       	move.l #0,d2
               S01:00069EDE:  74 00
F00:1274       	move.w i,d2          ; Loadvar regular end
               S01:00069EE0:  34 3A F1 12
F00:1275       	; Array is integer, so multiply with 2
F00:1276       	lsl #1,d2
               S01:00069EE4:  E3 4A
F00:1277       	lea sine4Copper,a0             ; LoadVariable:: is array
               S01:00069EE6:  41 FA F1 24
F00:1278       	move.w (a0,d2),d1             ; LoadVariable:: is array
               S01:00069EEA:  32 30 20 00
F00:1279       	move.w d1,d0     ; BOP move
               S01:00069EEE:  30 01
F00:1280       	move.l #0,d2
               S01:00069EF0:  74 00
F00:1281       	move.w i,d2          ; Loadvar regular end
               S01:00069EF2:  34 3A F1 00
F00:1282       	; Array is integer, so multiply with 2
F00:1283       	lsl #1,d2
               S01:00069EF6:  E3 4A
F00:1284       	lea sine4CopperAdd,a0             ; LoadVariable:: is array
               S01:00069EF8:  41 FA F3 12
F00:1285       	move.w (a0,d2),d1             ; LoadVariable:: is array
               S01:00069EFC:  32 30 20 00
F00:1286       	add.w d1,d0 ; simple bop
               S01:00069F00:  D0 41
F00:1287       	; Store variable : sine4Copper
F00:1288       	move.w i,d2          ; Loadvar regular end
               S01:00069F02:  34 3A F0 F0
F00:1289       	lsl #1,d2
               S01:00069F06:  E3 4A
F00:1290       	lea sine4Copper,a0
               S01:00069F08:  41 FA F1 02
F00:1291       	move.w d0,(a0,d2)
               S01:00069F0C:  31 80 20 00
F00:1292       loopstart169
F00:1293       	; Create increasecounter
F00:1294       	add.w #$1,i ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00069F10:  52 79 00 06 8F F4 [R]
F00:1295       	; end increasecounter
F00:1296       	move #$ff,d0
               S01:00069F16:  30 3C 00 FF
F00:1297       	cmp.w i,d0
               S01:00069F1A:  B0 7A F0 D8
F00:1298       	bne forloop168
               S01:00069F1E:  66 BC
F00:1299       loopend170
F00:1300       	rts
               S01:00069F20:  4E 75
F00:1301       	; ***********  Defining procedure : BeerFoam
F00:1302       	;    Procedure type : User-defined procedure
F00:1303       	jmp block173
               S01:00069F22:  60 08
F00:1304       bf_dstimage	dc.l	0
               S01:00069F24:  00 00 00 00
F00:1305       foamsize	dc.w	0
               S01:00069F28:  00 00
F00:1306       foampos	dc.w	0
               S01:00069F2A:  00 00
F00:1307       	 	CNOP 0,4
F00:1308       block173
F00:1309       BeerFoam
F00:1310       	
F00:1311       ; //ablit description:	
F00:1312       ; // - SrcImage 
F00:1313       ; // - DstImage
F00:1314       ; // - SrcShiftBytes: Start Byte to Blit From
F00:1315       ; // - XOffset: X Offset in Bytes (8 Pixel) to Blit To
F00:1316       ; // - YOffset: YOffset to Blit to
F00:1317       ; // - BlitWidth: With in Bytes of the Blit
F00:1318       ; // - BlitSize: Complete Size of the Blit
F00:1319       ; // - BlitAmod
F00:1320       ; // - BlitDmod
F00:1321       ; // - BlitB + BlitCmod
F00:1322       ; // - Channels and Minterm
F00:1323       	move.l #imageFoam,srcimage ; Simple a:=b optimization 
               S01:00069F2C:  23 FC 00 02 83 FC 00 06 90 08 [R]
F00:1324       	move.l #imageMask,imagemask ; Simple a:=b optimization 
               S01:00069F36:  23 FC 00 02 88 70 00 06 90 04 [R]
F00:1325       	moveq #0,d0
               S01:00069F40:  70 00
F00:1326       	move.l imagemask,d0     ; BOP move
               S01:00069F42:  20 3A F0 C0
F00:1327       	moveq #0,d1
               S01:00069F46:  72 00
F00:1328       	move.w #$c,d1     ; BOP move
               S01:00069F48:  32 3C 00 0C
F00:1329       	; LHS is byte, so initiate advanced op
F00:1330       	; is advanced bop
F00:1331       	moveq #0,d3
               S01:00069F4C:  76 00
F00:1332       	move.w foampos,d3     ; BOP move
               S01:00069F4E:  36 3A FF DA
F00:1333       	sub.w #$3e,d3 ; simple bop
               S01:00069F52:  96 7C 00 3E
F00:1334       	; Reset register
F00:1335       	moveq #0,d2
               S01:00069F56:  74 00
F00:1336       	move.w d3,d2     ; Advanced movee
               S01:00069F58:  34 03
F00:1337       	mulu.w d2,d1
               S01:00069F5A:  C2 C2
F00:1338       	add.l d1,d0 ; simple bop
               S01:00069F5C:  D0 81
F00:1339       	; Store variable : imagemask
F00:1340       	move.l d0,imagemask
               S01:00069F5E:  23 C0 00 06 90 04 [R]
F00:1341       	moveq #0,d0
               S01:00069F64:  70 00
F00:1342       	moveq #0,d1
               S01:00069F66:  72 00
F00:1343       	move.l bf_dstimage,d1     ; BOP move
               S01:00069F68:  22 3A FF BA
F00:1344       	add.l #$e,d1 ; simple bop
               S01:00069F6C:  D2 BC 00 00 00 0E
F00:1345       	move.l d1,d0     ; BOP move
               S01:00069F72:  20 01
F00:1346       	moveq #0,d1
               S01:00069F74:  72 00
F00:1347       	move.w foampos,d1     ; BOP move
               S01:00069F76:  32 3A FF B2
F00:1348       	; ORG TYPE of foampos INTEGER
F00:1349       	; LHS is byte, so initiate advanced op
F00:1350       	; is advanced bop
F00:1351       	; Reset register
F00:1352       	moveq #0,d2
               S01:00069F7A:  74 00
F00:1353       	move.w #$28,d2     ; Advanced movee
               S01:00069F7C:  34 3C 00 28
F00:1354       	mulu.w d2,d1
               S01:00069F80:  C2 C2
F00:1355       	add.l d1,d0 ; simple bop
               S01:00069F82:  D0 81
F00:1356       	; Store variable : bf_dstimage
F00:1357       	move.l d0,bf_dstimage
               S01:00069F84:  23 C0 00 06 9F 24 [R]
F00:1358       waitforblitter174
F00:1359       	btst	#14,DMACONR
               S01:00069F8A:  08 39 00 0E 00 DF F0 02
F00:1360       	bne.s	waitforblitter174
               S01:00069F92:  66 F6
F00:1361       	; Poke command
F00:1362       	move.l #$DFF000,a0
               S01:00069F94:  20 7C 00 DF F0 00
F00:1363       	add.w #$44,a0; #$FFFFFFFF
               S01:00069F9A:  41 E8 00 44
F00:1364       	move.l #$FFFFFFFF,(a0)
               S01:00069F9E:  20 BC FF FF FF FF
F00:1365       	
F00:1366       ; //BltAfwm+BltAlwm
F00:1367       	; Poke command
F00:1368       	move.l #$DFF000,a0
               S01:00069FA4:  20 7C 00 DF F0 00
F00:1369       	add.w #$60,a0; #$1c
               S01:00069FAA:  41 E8 00 60
F00:1370       	move.w #$1c,(a0)
               S01:00069FAE:  30 BC 00 1C
F00:1371       	
F00:1372       ; //BLTCMOD
F00:1373       	; Poke command
F00:1374       	move.l #$DFF000,a0
               S01:00069FB2:  20 7C 00 DF F0 00
F00:1375       	add.w #$62,a0; #$0
               S01:00069FB8:  41 E8 00 62
F00:1376       	move.w #$0,(a0)
               S01:00069FBC:  30 BC 00 00
F00:1377       	
F00:1378       ; //BLTBMOD
F00:1379       	; Poke command
F00:1380       	move.l #$DFF000,a0
               S01:00069FC0:  20 7C 00 DF F0 00
F00:1381       	add.w #$64,a0; #$0
               S01:00069FC6:  41 E8 00 64
F00:1382       	move.w #$0,(a0)
               S01:00069FCA:  30 BC 00 00
F00:1383       	
F00:1384       ; //BLTAMOD
F00:1385       	; Poke command
F00:1386       	move.l #$DFF000,a0
               S01:00069FCE:  20 7C 00 DF F0 00
F00:1387       	add.w #$66,a0; #$1c
               S01:00069FD4:  41 E8 00 66
F00:1388       	move.w #$1c,(a0)
               S01:00069FD8:  30 BC 00 1C
F00:1389       	
F00:1390       ; //BLTDMOD		
F00:1391       	; Poke command
F00:1392       	move.l #$DFF000,a0
               S01:00069FDC:  20 7C 00 DF F0 00
F00:1393       	add.w #$42,a0; #$0
               S01:00069FE2:  41 E8 00 42
F00:1394       	move.w #$0,(a0)
               S01:00069FE6:  30 BC 00 00
F00:1395       	
F00:1396       ; //BLTCON1		
F00:1397       	moveq #0,d0
               S01:00069FEA:  70 00
F00:1398       	moveq #0,d1
               S01:00069FEC:  72 00
F00:1399       	move.w foamsize,d1     ; BOP move
               S01:00069FEE:  32 3A FF 38
F00:1400       	lsl.w #$6,d1 ; simple bop
               S01:00069FF2:  ED 49
F00:1401       	move.w d1,d0     ; BOP move
               S01:00069FF4:  30 01
F00:1402       	add.w #$6,d0 ; simple bop
               S01:00069FF6:  5C 40
F00:1403       	; Store variable : bltsize
F00:1404       	move.w d0,bltsize
               S01:00069FF8:  33 C0 00 06 8F F6 [R]
F00:1405       	move.l srcimage,cc_src ; Simple a:=b optimization 
               S01:00069FFE:  23 FA F0 08 00 06 9C 22 [R]
F00:1406       	move.l bf_dstimage,cc_dst ; Simple a:=b optimization 
               S01:0006A006:  23 FA FF 1C 00 06 9C 26 [R]
F00:1407       	move.l imagemask,cc_mask ; Simple a:=b optimization 
               S01:0006A00E:  23 FA EF F4 00 06 9C 2A [R]
F00:1408       	move.w bltsize,cc_size ; Simple a:=b optimization 
               S01:0006A016:  33 FA EF DE 00 06 9C 2E [R]
F00:1409       	jsr CookieCut
               S01:0006A01E:  61 00 FC 10
F00:1410       	add.l #$e4,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A022:  06 B9 00 00 00 E4 00 06 90 08 [R]
F00:1411       	add.l #$57d0,bf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A02C:  06 B9 00 00 57 D0 00 06 9F 24 [R]
F00:1412       	move.l srcimage,cc_src ; Simple a:=b optimization 
               S01:0006A036:  23 FA EF D0 00 06 9C 22 [R]
F00:1413       	move.l bf_dstimage,cc_dst ; Simple a:=b optimization 
               S01:0006A03E:  23 FA FE E4 00 06 9C 26 [R]
F00:1414       	move.l imagemask,cc_mask ; Simple a:=b optimization 
               S01:0006A046:  23 FA EF BC 00 06 9C 2A [R]
F00:1415       	move.w bltsize,cc_size ; Simple a:=b optimization 
               S01:0006A04E:  33 FA EF A6 00 06 9C 2E [R]
F00:1416       	jsr CookieCut
               S01:0006A056:  61 00 FB D8
F00:1417       	add.l #$e4,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A05A:  06 B9 00 00 00 E4 00 06 90 08 [R]
F00:1418       	add.l #$57d0,bf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A064:  06 B9 00 00 57 D0 00 06 9F 24 [R]
F00:1419       	move.l srcimage,cc_src ; Simple a:=b optimization 
               S01:0006A06E:  23 FA EF 98 00 06 9C 22 [R]
F00:1420       	move.l bf_dstimage,cc_dst ; Simple a:=b optimization 
               S01:0006A076:  23 FA FE AC 00 06 9C 26 [R]
F00:1421       	move.l imagemask,cc_mask ; Simple a:=b optimization 
               S01:0006A07E:  23 FA EF 84 00 06 9C 2A [R]
F00:1422       	move.w bltsize,cc_size ; Simple a:=b optimization 
               S01:0006A086:  33 FA EF 6E 00 06 9C 2E [R]
F00:1423       	jsr CookieCut
               S01:0006A08E:  61 00 FB A0
F00:1424       	add.l #$e4,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A092:  06 B9 00 00 00 E4 00 06 90 08 [R]
F00:1425       	add.l #$57d0,bf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A09C:  06 B9 00 00 57 D0 00 06 9F 24 [R]
F00:1426       	move.l srcimage,cc_src ; Simple a:=b optimization 
               S01:0006A0A6:  23 FA EF 60 00 06 9C 22 [R]
F00:1427       	move.l bf_dstimage,cc_dst ; Simple a:=b optimization 
               S01:0006A0AE:  23 FA FE 74 00 06 9C 26 [R]
F00:1428       	move.l imagemask,cc_mask ; Simple a:=b optimization 
               S01:0006A0B6:  23 FA EF 4C 00 06 9C 2A [R]
F00:1429       	move.w bltsize,cc_size ; Simple a:=b optimization 
               S01:0006A0BE:  33 FA EF 36 00 06 9C 2E [R]
F00:1430       	jsr CookieCut
               S01:0006A0C6:  61 00 FB 68
F00:1431       	add.l #$e4,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A0CA:  06 B9 00 00 00 E4 00 06 90 08 [R]
F00:1432       	add.l #$57d0,bf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A0D4:  06 B9 00 00 57 D0 00 06 9F 24 [R]
F00:1433       	move.l srcimage,cc_src ; Simple a:=b optimization 
               S01:0006A0DE:  23 FA EF 28 00 06 9C 22 [R]
F00:1434       	move.l bf_dstimage,cc_dst ; Simple a:=b optimization 
               S01:0006A0E6:  23 FA FE 3C 00 06 9C 26 [R]
F00:1435       	move.l imagemask,cc_mask ; Simple a:=b optimization 
               S01:0006A0EE:  23 FA EF 14 00 06 9C 2A [R]
F00:1436       	move.w bltsize,cc_size ; Simple a:=b optimization 
               S01:0006A0F6:  33 FA EE FE 00 06 9C 2E [R]
F00:1437       	jsr CookieCut
               S01:0006A0FE:  61 00 FB 30
F00:1438       	rts
               S01:0006A102:  4E 75
F00:1439       	; ***********  Defining procedure : FillDrinkBeer
F00:1440       	;    Procedure type : User-defined procedure
F00:1441       	jmp block175
               S01:0006A104:  60 0E
F00:1442       dstimage dc.l 0
               S01:0006A106:  00 00 00 00
F00:1443       yoffset	dc.w	0
               S01:0006A10A:  00 00
F00:1444       fd_srcimage	dc.l	0
               S01:0006A10C:  00 00 00 00
F00:1445       fd_srcimageoffset	dc.l	0
               S01:0006A110:  00 00 00 00
F00:1446       	 	CNOP 0,4
F00:1447       block175
F00:1448       FillDrinkBeer
F00:1449       	
F00:1450       ; //ablit description:	
F00:1451       ; // - SrcImage 
F00:1452       ; // - DstImage
F00:1453       ; // - SrcShiftBytes: Start Byte to Blit From
F00:1454       ; // - XOffset: X Offset in Bytes (8 Pixel) to Blit To
F00:1455       ; // - YOffset: YOffset to Blit to
F00:1456       ; // - BlitWidth: With in Bytes of the Blit
F00:1457       ; // - BlitSize: Complete Size of the Blit
F00:1458       ; // - BlitAmod
F00:1459       ; // - BlitDmod
F00:1460       ; // - BlitB + BlitCmod
F00:1461       ; // - Channels and Minterm
F00:1462       ; //	fd_srcimage := #imageCupFull;
F00:1463       waitforblitter176
F00:1464       	btst	#14,DMACONR
               S01:0006A114:  08 39 00 0E 00 DF F0 02
F00:1465       	bne.s	waitforblitter176
               S01:0006A11C:  66 F6
F00:1466       	moveq.l #0,d6
               S01:0006A11E:  7C 00
F00:1467       	lea     $dff000,a6 ; Hardware registers
               S01:0006A120:  4D F9 00 DF F0 00
F00:1468       	move.l fd_srcimage,a0
               S01:0006A126:  20 7A FF E4
F00:1469       	move.l dstimage,a1
               S01:0006A12A:  22 7A FF DA
F00:1470       	moveq #0,d0
               S01:0006A12E:  70 00
F00:1471       	move.w yoffset,d0     ; BOP move
               S01:0006A130:  30 3A FF D8
F00:1472       	; ORG TYPE of yoffset INTEGER
F00:1473       	; LHS is byte, so initiate advanced op
F00:1474       	; is advanced bop
F00:1475       	; Reset register
F00:1476       	moveq #0,d1
               S01:0006A134:  72 00
F00:1477       	move.w #$c,d1     ; Advanced movee
               S01:0006A136:  32 3C 00 0C
F00:1478       	mulu.w d1,d0
               S01:0006A13A:  C0 C1
F00:1479       	move.w d0,d6
               S01:0006A13C:  3C 00
F00:1480       	move.w #$e,d1
               S01:0006A13E:  32 3C 00 0E
F00:1481       	moveq #0,d0
               S01:0006A142:  70 00
F00:1482       	move.w yoffset,d0     ; BOP move
               S01:0006A144:  30 3A FF C4
F00:1483       	add.w #$52,d0 ; simple bop
               S01:0006A148:  D0 7C 00 52
F00:1484       	move.w d0,d2
               S01:0006A14C:  34 00
F00:1485       	move.w #$28,d3
               S01:0006A14E:  36 3C 00 28
F00:1486       	move.w #$86,d4
               S01:0006A152:  38 3C 00 86
F00:1487       	move.w #$0,BLTAMOD(a6)
               S01:0006A156:  3D 7C 00 00 00 64
F00:1488       	move.w #$0,BLTBMOD(a6)
               S01:0006A15C:  3D 7C 00 00 00 62
F00:1489       	move.w #$0,BLTCMOD(a6)
               S01:0006A162:  3D 7C 00 00 00 60
F00:1490       	move.w #$1c,BLTDMOD(a6)
               S01:0006A168:  3D 7C 00 1C 00 66
F00:1491       	move.w #$9f0,d0
               S01:0006A16E:  30 3C 09 F0
F00:1492       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0006A172:  3D 7C 00 00 00 42
F00:1493       	jsr blitter
               S01:0006A178:  61 00 0D 20
F00:1494       	moveq #0,d0
               S01:0006A17C:  70 00
F00:1495       	move.l fd_srcimageoffset,d0     ; BOP move
               S01:0006A17E:  20 3A FF 90
F00:1496       	add.l fd_srcimage,d0 ; simple bop
               S01:0006A182:  D0 BA FF 88
F00:1497       	; Store variable : fd_srcimage
F00:1498       	move.l d0,fd_srcimage
               S01:0006A186:  23 C0 00 06 A1 0C [R]
F00:1499       	add.l #$57d0,dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A18C:  06 B9 00 00 57 D0 00 06 A1 06 [R]
F00:1500       waitforblitter177
F00:1501       	btst	#14,DMACONR
               S01:0006A196:  08 39 00 0E 00 DF F0 02
F00:1502       	bne.s	waitforblitter177
               S01:0006A19E:  66 F6
F00:1503       	moveq.l #0,d6
               S01:0006A1A0:  7C 00
F00:1504       	lea     $dff000,a6 ; Hardware registers
               S01:0006A1A2:  4D F9 00 DF F0 00
F00:1505       	move.l fd_srcimage,a0
               S01:0006A1A8:  20 7A FF 62
F00:1506       	move.l dstimage,a1
               S01:0006A1AC:  22 7A FF 58
F00:1507       	moveq #0,d0
               S01:0006A1B0:  70 00
F00:1508       	move.w yoffset,d0     ; BOP move
               S01:0006A1B2:  30 3A FF 56
F00:1509       	; ORG TYPE of yoffset INTEGER
F00:1510       	; LHS is byte, so initiate advanced op
F00:1511       	; is advanced bop
F00:1512       	; Reset register
F00:1513       	moveq #0,d1
               S01:0006A1B6:  72 00
F00:1514       	move.w #$c,d1     ; Advanced movee
               S01:0006A1B8:  32 3C 00 0C
F00:1515       	mulu.w d1,d0
               S01:0006A1BC:  C0 C1
F00:1516       	move.w d0,d6
               S01:0006A1BE:  3C 00
F00:1517       	move.w #$e,d1
               S01:0006A1C0:  32 3C 00 0E
F00:1518       	moveq #0,d0
               S01:0006A1C4:  70 00
F00:1519       	move.w yoffset,d0     ; BOP move
               S01:0006A1C6:  30 3A FF 42
F00:1520       	add.w #$52,d0 ; simple bop
               S01:0006A1CA:  D0 7C 00 52
F00:1521       	move.w d0,d2
               S01:0006A1CE:  34 00
F00:1522       	move.w #$28,d3
               S01:0006A1D0:  36 3C 00 28
F00:1523       	move.w #$86,d4
               S01:0006A1D4:  38 3C 00 86
F00:1524       	move.w #$0,BLTAMOD(a6)
               S01:0006A1D8:  3D 7C 00 00 00 64
F00:1525       	move.w #$0,BLTBMOD(a6)
               S01:0006A1DE:  3D 7C 00 00 00 62
F00:1526       	move.w #$0,BLTCMOD(a6)
               S01:0006A1E4:  3D 7C 00 00 00 60
F00:1527       	move.w #$1c,BLTDMOD(a6)
               S01:0006A1EA:  3D 7C 00 1C 00 66
F00:1528       	move.w #$9f0,d0
               S01:0006A1F0:  30 3C 09 F0
F00:1529       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0006A1F4:  3D 7C 00 00 00 42
F00:1530       	jsr blitter
               S01:0006A1FA:  61 00 0C 9E
F00:1531       	moveq #0,d0
               S01:0006A1FE:  70 00
F00:1532       	move.l fd_srcimageoffset,d0     ; BOP move
               S01:0006A200:  20 3A FF 0E
F00:1533       	add.l fd_srcimage,d0 ; simple bop
               S01:0006A204:  D0 BA FF 06
F00:1534       	; Store variable : fd_srcimage
F00:1535       	move.l d0,fd_srcimage
               S01:0006A208:  23 C0 00 06 A1 0C [R]
F00:1536       	add.l #$57d0,dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A20E:  06 B9 00 00 57 D0 00 06 A1 06 [R]
F00:1537       waitforblitter178
F00:1538       	btst	#14,DMACONR
               S01:0006A218:  08 39 00 0E 00 DF F0 02
F00:1539       	bne.s	waitforblitter178
               S01:0006A220:  66 F6
F00:1540       	moveq.l #0,d6
               S01:0006A222:  7C 00
F00:1541       	lea     $dff000,a6 ; Hardware registers
               S01:0006A224:  4D F9 00 DF F0 00
F00:1542       	move.l fd_srcimage,a0
               S01:0006A22A:  20 7A FE E0
F00:1543       	move.l dstimage,a1
               S01:0006A22E:  22 7A FE D6
F00:1544       	moveq #0,d0
               S01:0006A232:  70 00
F00:1545       	move.w yoffset,d0     ; BOP move
               S01:0006A234:  30 3A FE D4
F00:1546       	; ORG TYPE of yoffset INTEGER
F00:1547       	; LHS is byte, so initiate advanced op
F00:1548       	; is advanced bop
F00:1549       	; Reset register
F00:1550       	moveq #0,d1
               S01:0006A238:  72 00
F00:1551       	move.w #$c,d1     ; Advanced movee
               S01:0006A23A:  32 3C 00 0C
F00:1552       	mulu.w d1,d0
               S01:0006A23E:  C0 C1
F00:1553       	move.w d0,d6
               S01:0006A240:  3C 00
F00:1554       	move.w #$e,d1
               S01:0006A242:  32 3C 00 0E
F00:1555       	moveq #0,d0
               S01:0006A246:  70 00
F00:1556       	move.w yoffset,d0     ; BOP move
               S01:0006A248:  30 3A FE C0
F00:1557       	add.w #$52,d0 ; simple bop
               S01:0006A24C:  D0 7C 00 52
F00:1558       	move.w d0,d2
               S01:0006A250:  34 00
F00:1559       	move.w #$28,d3
               S01:0006A252:  36 3C 00 28
F00:1560       	move.w #$86,d4
               S01:0006A256:  38 3C 00 86
F00:1561       	move.w #$0,BLTAMOD(a6)
               S01:0006A25A:  3D 7C 00 00 00 64
F00:1562       	move.w #$0,BLTBMOD(a6)
               S01:0006A260:  3D 7C 00 00 00 62
F00:1563       	move.w #$0,BLTCMOD(a6)
               S01:0006A266:  3D 7C 00 00 00 60
F00:1564       	move.w #$1c,BLTDMOD(a6)
               S01:0006A26C:  3D 7C 00 1C 00 66
F00:1565       	move.w #$9f0,d0
               S01:0006A272:  30 3C 09 F0
F00:1566       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0006A276:  3D 7C 00 00 00 42
F00:1567       	jsr blitter
               S01:0006A27C:  61 00 0C 1C
F00:1568       	moveq #0,d0
               S01:0006A280:  70 00
F00:1569       	move.l fd_srcimageoffset,d0     ; BOP move
               S01:0006A282:  20 3A FE 8C
F00:1570       	add.l fd_srcimage,d0 ; simple bop
               S01:0006A286:  D0 BA FE 84
F00:1571       	; Store variable : fd_srcimage
F00:1572       	move.l d0,fd_srcimage
               S01:0006A28A:  23 C0 00 06 A1 0C [R]
F00:1573       	add.l #$57d0,dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A290:  06 B9 00 00 57 D0 00 06 A1 06 [R]
F00:1574       waitforblitter179
F00:1575       	btst	#14,DMACONR
               S01:0006A29A:  08 39 00 0E 00 DF F0 02
F00:1576       	bne.s	waitforblitter179
               S01:0006A2A2:  66 F6
F00:1577       	moveq.l #0,d6
               S01:0006A2A4:  7C 00
F00:1578       	lea     $dff000,a6 ; Hardware registers
               S01:0006A2A6:  4D F9 00 DF F0 00
F00:1579       	move.l fd_srcimage,a0
               S01:0006A2AC:  20 7A FE 5E
F00:1580       	move.l dstimage,a1
               S01:0006A2B0:  22 7A FE 54
F00:1581       	moveq #0,d0
               S01:0006A2B4:  70 00
F00:1582       	move.w yoffset,d0     ; BOP move
               S01:0006A2B6:  30 3A FE 52
F00:1583       	; ORG TYPE of yoffset INTEGER
F00:1584       	; LHS is byte, so initiate advanced op
F00:1585       	; is advanced bop
F00:1586       	; Reset register
F00:1587       	moveq #0,d1
               S01:0006A2BA:  72 00
F00:1588       	move.w #$c,d1     ; Advanced movee
               S01:0006A2BC:  32 3C 00 0C
F00:1589       	mulu.w d1,d0
               S01:0006A2C0:  C0 C1
F00:1590       	move.w d0,d6
               S01:0006A2C2:  3C 00
F00:1591       	move.w #$e,d1
               S01:0006A2C4:  32 3C 00 0E
F00:1592       	moveq #0,d0
               S01:0006A2C8:  70 00
F00:1593       	move.w yoffset,d0     ; BOP move
               S01:0006A2CA:  30 3A FE 3E
F00:1594       	add.w #$52,d0 ; simple bop
               S01:0006A2CE:  D0 7C 00 52
F00:1595       	move.w d0,d2
               S01:0006A2D2:  34 00
F00:1596       	move.w #$28,d3
               S01:0006A2D4:  36 3C 00 28
F00:1597       	move.w #$86,d4
               S01:0006A2D8:  38 3C 00 86
F00:1598       	move.w #$0,BLTAMOD(a6)
               S01:0006A2DC:  3D 7C 00 00 00 64
F00:1599       	move.w #$0,BLTBMOD(a6)
               S01:0006A2E2:  3D 7C 00 00 00 62
F00:1600       	move.w #$0,BLTCMOD(a6)
               S01:0006A2E8:  3D 7C 00 00 00 60
F00:1601       	move.w #$1c,BLTDMOD(a6)
               S01:0006A2EE:  3D 7C 00 1C 00 66
F00:1602       	move.w #$9f0,d0
               S01:0006A2F4:  30 3C 09 F0
F00:1603       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0006A2F8:  3D 7C 00 00 00 42
F00:1604       	jsr blitter
               S01:0006A2FE:  61 00 0B 9A
F00:1605       	moveq #0,d0
               S01:0006A302:  70 00
F00:1606       	move.l fd_srcimageoffset,d0     ; BOP move
               S01:0006A304:  20 3A FE 0A
F00:1607       	add.l fd_srcimage,d0 ; simple bop
               S01:0006A308:  D0 BA FE 02
F00:1608       	; Store variable : fd_srcimage
F00:1609       	move.l d0,fd_srcimage
               S01:0006A30C:  23 C0 00 06 A1 0C [R]
F00:1610       	add.l #$57d0,dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A312:  06 B9 00 00 57 D0 00 06 A1 06 [R]
F00:1611       waitforblitter180
F00:1612       	btst	#14,DMACONR
               S01:0006A31C:  08 39 00 0E 00 DF F0 02
F00:1613       	bne.s	waitforblitter180
               S01:0006A324:  66 F6
F00:1614       	moveq.l #0,d6
               S01:0006A326:  7C 00
F00:1615       	lea     $dff000,a6 ; Hardware registers
               S01:0006A328:  4D F9 00 DF F0 00
F00:1616       	move.l fd_srcimage,a0
               S01:0006A32E:  20 7A FD DC
F00:1617       	move.l dstimage,a1
               S01:0006A332:  22 7A FD D2
F00:1618       	moveq #0,d0
               S01:0006A336:  70 00
F00:1619       	move.w yoffset,d0     ; BOP move
               S01:0006A338:  30 3A FD D0
F00:1620       	; ORG TYPE of yoffset INTEGER
F00:1621       	; LHS is byte, so initiate advanced op
F00:1622       	; is advanced bop
F00:1623       	; Reset register
F00:1624       	moveq #0,d1
               S01:0006A33C:  72 00
F00:1625       	move.w #$c,d1     ; Advanced movee
               S01:0006A33E:  32 3C 00 0C
F00:1626       	mulu.w d1,d0
               S01:0006A342:  C0 C1
F00:1627       	move.w d0,d6
               S01:0006A344:  3C 00
F00:1628       	move.w #$e,d1
               S01:0006A346:  32 3C 00 0E
F00:1629       	moveq #0,d0
               S01:0006A34A:  70 00
F00:1630       	move.w yoffset,d0     ; BOP move
               S01:0006A34C:  30 3A FD BC
F00:1631       	add.w #$52,d0 ; simple bop
               S01:0006A350:  D0 7C 00 52
F00:1632       	move.w d0,d2
               S01:0006A354:  34 00
F00:1633       	move.w #$28,d3
               S01:0006A356:  36 3C 00 28
F00:1634       	move.w #$86,d4
               S01:0006A35A:  38 3C 00 86
F00:1635       	move.w #$0,BLTAMOD(a6)
               S01:0006A35E:  3D 7C 00 00 00 64
F00:1636       	move.w #$0,BLTBMOD(a6)
               S01:0006A364:  3D 7C 00 00 00 62
F00:1637       	move.w #$0,BLTCMOD(a6)
               S01:0006A36A:  3D 7C 00 00 00 60
F00:1638       	move.w #$1c,BLTDMOD(a6)
               S01:0006A370:  3D 7C 00 1C 00 66
F00:1639       	move.w #$9f0,d0
               S01:0006A376:  30 3C 09 F0
F00:1640       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0006A37A:  3D 7C 00 00 00 42
F00:1641       	jsr blitter
               S01:0006A380:  61 00 0B 18
F00:1642       	rts
               S01:0006A384:  4E 75
F00:1643       	
F00:1644       ; //	Flips rendering buffer and updates copper list & pointers
F00:1645       ; //
F00:1646       	; ***********  Defining procedure : FlipBuffers
F00:1647       	;    Procedure type : User-defined procedure
F00:1648       FlipBuffers
F00:1649       	cmp.w #$0,curBuf
               S01:0006A386:  4A 79 00 00 A0 B6 [R]
F00:1650       	bne eblock184
               S01:0006A38C:  66 3A
F00:1651       ctb183: ;Main true block ;keep 
F00:1652       	move.l #image1,screen ; Simple a:=b optimization 
               S01:0006A38E:  23 FC 00 03 20 CC 00 06 8F EC [R]
F00:1653       	moveq #0,d0
               S01:0006A398:  70 00
F00:1654       	move.l screen,d0     ; BOP move
               S01:0006A39A:  20 3A EC 50
F00:1655       	add.l screenOffset,d0 ; simple bop
               S01:0006A39E:  D0 B9 00 00 A0 C2 [R]
F00:1656       	; Store variable : screen
F00:1657       	move.l d0,screen
               S01:0006A3A4:  23 C0 00 06 8F EC [R]
F00:1658       	move.l #image2,offscreen ; Simple a:=b optimization 
               S01:0006A3AA:  23 FC 00 04 D7 DC 00 06 8F F0 [R]
F00:1659       	moveq #0,d0
               S01:0006A3B4:  70 00
F00:1660       	move.l offscreen,d0     ; BOP move
               S01:0006A3B6:  20 3A EC 38
F00:1661       	add.l screenOffset,d0 ; simple bop
               S01:0006A3BA:  D0 B9 00 00 A0 C2 [R]
F00:1662       	; Store variable : offscreen
F00:1663       	move.l d0,offscreen
               S01:0006A3C0:  23 C0 00 06 8F F0 [R]
F00:1664       	jmp edblock185
               S01:0006A3C6:  60 38
F00:1665       eblock184
F00:1666       	move.l #image2,screen ; Simple a:=b optimization 
               S01:0006A3C8:  23 FC 00 04 D7 DC 00 06 8F EC [R]
F00:1667       	moveq #0,d0
               S01:0006A3D2:  70 00
F00:1668       	move.l screen,d0     ; BOP move
               S01:0006A3D4:  20 3A EC 16
F00:1669       	add.l screenOffset,d0 ; simple bop
               S01:0006A3D8:  D0 B9 00 00 A0 C2 [R]
F00:1670       	; Store variable : screen
F00:1671       	move.l d0,screen
               S01:0006A3DE:  23 C0 00 06 8F EC [R]
F00:1672       	move.l #image1,offscreen ; Simple a:=b optimization 
               S01:0006A3E4:  23 FC 00 03 20 CC 00 06 8F F0 [R]
F00:1673       	moveq #0,d0
               S01:0006A3EE:  70 00
F00:1674       	move.l offscreen,d0     ; BOP move
               S01:0006A3F0:  20 3A EB FE
F00:1675       	add.l screenOffset,d0 ; simple bop
               S01:0006A3F4:  D0 B9 00 00 A0 C2 [R]
F00:1676       	; Store variable : offscreen
F00:1677       	move.l d0,offscreen
               S01:0006A3FA:  23 C0 00 06 8F F0 [R]
F00:1678       edblock185
F00:1679       	; setcopperlist32
F00:1680       	move.l offscreen,a1
               S01:0006A400:  22 7A EB EE
F00:1681       	move.l a1,d0
               S01:0006A404:  20 09
F00:1682       	move.l #copper_bitplane0,a0
               S01:0006A406:  41 F9 00 00 00 E8 [R]
F00:1683       	move.w d0,6(a0)
               S01:0006A40C:  31 40 00 06
F00:1684       	swap d0
               S01:0006A410:  48 40
F00:1685       	move.w d0,2(a0)
               S01:0006A412:  31 40 00 02
F00:1686       	; setcopperlist32
F00:1687       	moveq #0,d1
               S01:0006A416:  72 00
F00:1688       	move.l offscreen,d1     ; BOP move
               S01:0006A418:  22 3A EB D6
F00:1689       	add.l #$57d0,d1 ; simple bop
               S01:0006A41C:  D2 BC 00 00 57 D0
F00:1690       	move.l d1,d0
               S01:0006A422:  20 01
F00:1691       	move.l #copper_bitplane1,a0
               S01:0006A424:  41 F9 00 00 00 F0 [R]
F00:1692       	move.w d0,6(a0)
               S01:0006A42A:  31 40 00 06
F00:1693       	swap d0
               S01:0006A42E:  48 40
F00:1694       	move.w d0,2(a0)
               S01:0006A430:  31 40 00 02
F00:1695       	; setcopperlist32
F00:1696       	moveq #0,d1
               S01:0006A434:  72 00
F00:1697       	move.l offscreen,d1     ; BOP move
               S01:0006A436:  22 3A EB B8
F00:1698       	; NodeBinop : both are pure numeric optimization : #$afa0
F00:1699       	add.l #$afa0,d1 ; simple bop
               S01:0006A43A:  D2 BC 00 00 AF A0
F00:1700       	move.l d1,d0
               S01:0006A440:  20 01
F00:1701       	move.l #copper_bitplane2,a0
               S01:0006A442:  41 F9 00 00 00 F8 [R]
F00:1702       	move.w d0,6(a0)
               S01:0006A448:  31 40 00 06
F00:1703       	swap d0
               S01:0006A44C:  48 40
F00:1704       	move.w d0,2(a0)
               S01:0006A44E:  31 40 00 02
F00:1705       	; setcopperlist32
F00:1706       	moveq #0,d1
               S01:0006A452:  72 00
F00:1707       	move.l offscreen,d1     ; BOP move
               S01:0006A454:  22 3A EB 9A
F00:1708       	; NodeBinop : both are pure numeric optimization : #$10770
F00:1709       	add.l #$10770,d1 ; simple bop
               S01:0006A458:  D2 BC 00 01 07 70
F00:1710       	move.l d1,d0
               S01:0006A45E:  20 01
F00:1711       	move.l #copper_bitplane3,a0
               S01:0006A460:  41 F9 00 00 01 00 [R]
F00:1712       	move.w d0,6(a0)
               S01:0006A466:  31 40 00 06
F00:1713       	swap d0
               S01:0006A46A:  48 40
F00:1714       	move.w d0,2(a0)
               S01:0006A46C:  31 40 00 02
F00:1715       	; setcopperlist32
F00:1716       	moveq #0,d1
               S01:0006A470:  72 00
F00:1717       	move.l offscreen,d1     ; BOP move
               S01:0006A472:  22 3A EB 7C
F00:1718       	; NodeBinop : both are pure numeric optimization : #$15f40
F00:1719       	add.l #$15f40,d1 ; simple bop
               S01:0006A476:  D2 BC 00 01 5F 40
F00:1720       	move.l d1,d0
               S01:0006A47C:  20 01
F00:1721       	move.l #copper_bitplane4,a0
               S01:0006A47E:  41 F9 00 00 01 08 [R]
F00:1722       	move.w d0,6(a0)
               S01:0006A484:  31 40 00 06
F00:1723       	swap d0
               S01:0006A488:  48 40
F00:1724       	move.w d0,2(a0)
               S01:0006A48A:  31 40 00 02
F00:1725       	moveq #0,d0
               S01:0006A48E:  70 00
F00:1726       	moveq #0,d1
               S01:0006A490:  72 00
F00:1727       	move.w curBuf,d1     ; BOP move
               S01:0006A492:  32 39 00 00 A0 B6 [R]
F00:1728       	add.w #$1,d1 ; simple bop
               S01:0006A498:  52 41
F00:1729       	move.w d1,d0     ; BOP move
               S01:0006A49A:  30 01
F00:1730       	and.w #$1,d0 ; simple bop
               S01:0006A49C:  C0 7C 00 01
F00:1731       	; Store variable : curBuf
F00:1732       	move.w d0,curBuf
               S01:0006A4A0:  33 C0 00 00 A0 B6 [R]
F00:1733       	rts
               S01:0006A4A6:  4E 75
F00:1734       	; ***********  Defining procedure : RemoveFoam
F00:1735       	;    Procedure type : User-defined procedure
F00:1736       	jmp block190
               S01:0006A4A8:  60 06
F00:1737       rf_dstimage dc.l 0
               S01:0006A4AA:  00 00 00 00
F00:1738       rf_yoffset	dc.w	0
               S01:0006A4AE:  00 00
F00:1739       	 	CNOP 0,4
F00:1740       block190
F00:1741       RemoveFoam
F00:1742       	cmp.w #$94,rf_yoffset
               S01:0006A4B0:  0C 79 00 94 00 06 A4 AE [R]
F00:1743       	bls edblock194
               S01:0006A4B8:  63 08
F00:1744       ctb192: ;Main true block ;keep 
F00:1745       	
F00:1746       ; //ablit description:	
F00:1747       ; // - SrcImage 
F00:1748       ; // - DstImage
F00:1749       ; // - SrcShiftBytes: Start Byte to Blit From
F00:1750       ; // - XOffset: X Offset in Bytes (8 Pixel) to Blit To
F00:1751       ; // - YOffset: YOffset to Blit to
F00:1752       ; // - BlitWidth: With in Bytes of the Blit
F00:1753       ; // - BlitSize: Complete Size of the Blit
F00:1754       ; // - BlitAmod
F00:1755       ; // - BlitDmod
F00:1756       ; // - BlitB + BlitCmod
F00:1757       ; // - Channels and Minterm
F00:1758       	move.w #$94,rf_yoffset ; Simple a:=b optimization 
               S01:0006A4BA:  33 FC 00 94 00 06 A4 AE [R]
F00:1759       edblock194
F00:1760       	move.l #imageRestoreCup,srcimage ; Simple a:=b optimization 
               S01:0006A4C2:  23 FC 00 02 3C F8 00 06 90 08 [R]
F00:1761       waitforblitter197
F00:1762       	btst	#14,DMACONR
               S01:0006A4CC:  08 39 00 0E 00 DF F0 02
F00:1763       	bne.s	waitforblitter197
               S01:0006A4D4:  66 F6
F00:1764       	moveq.l #0,d6
               S01:0006A4D6:  7C 00
F00:1765       	lea     $dff000,a6 ; Hardware registers
               S01:0006A4D8:  4D F9 00 DF F0 00
F00:1766       	move.l srcimage,a0
               S01:0006A4DE:  20 7A EB 28
F00:1767       	move.l rf_dstimage,a1
               S01:0006A4E2:  22 7A FF C6
F00:1768       	moveq #0,d0
               S01:0006A4E6:  70 00
F00:1769       	move.w rf_yoffset,d0     ; BOP move
               S01:0006A4E8:  30 3A FF C4
F00:1770       	; ORG TYPE of rf_yoffset INTEGER
F00:1771       	; LHS is byte, so initiate advanced op
F00:1772       	; is advanced bop
F00:1773       	; Reset register
F00:1774       	moveq #0,d1
               S01:0006A4EC:  72 00
F00:1775       	move.w #$c,d1     ; Advanced movee
               S01:0006A4EE:  32 3C 00 0C
F00:1776       	mulu.w d1,d0
               S01:0006A4F2:  C0 C1
F00:1777       	move.w d0,d6
               S01:0006A4F4:  3C 00
F00:1778       	move.w #$e,d1
               S01:0006A4F6:  32 3C 00 0E
F00:1779       	moveq #0,d0
               S01:0006A4FA:  70 00
F00:1780       	move.w rf_yoffset,d0     ; BOP move
               S01:0006A4FC:  30 3A FF B0
F00:1781       	add.w #$3e,d0 ; simple bop
               S01:0006A500:  D0 7C 00 3E
F00:1782       	move.w d0,d2
               S01:0006A504:  34 00
F00:1783       	move.w #$28,d3
               S01:0006A506:  36 3C 00 28
F00:1784       	move.w #$146,d4
               S01:0006A50A:  38 3C 01 46
F00:1785       	move.w #$0,BLTAMOD(a6)
               S01:0006A50E:  3D 7C 00 00 00 64
F00:1786       	move.w #$0,BLTBMOD(a6)
               S01:0006A514:  3D 7C 00 00 00 62
F00:1787       	move.w #$0,BLTCMOD(a6)
               S01:0006A51A:  3D 7C 00 00 00 60
F00:1788       	move.w #$1c,BLTDMOD(a6)
               S01:0006A520:  3D 7C 00 1C 00 66
F00:1789       	move.w #$9f0,d0
               S01:0006A526:  30 3C 09 F0
F00:1790       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0006A52A:  3D 7C 00 00 00 42
F00:1791       	jsr blitter
               S01:0006A530:  61 00 09 68
F00:1792       	add.l #$798,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A534:  06 B9 00 00 07 98 00 06 90 08 [R]
F00:1793       	add.l #$57d0,rf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A53E:  06 B9 00 00 57 D0 00 06 A4 AA [R]
F00:1794       waitforblitter198
F00:1795       	btst	#14,DMACONR
               S01:0006A548:  08 39 00 0E 00 DF F0 02
F00:1796       	bne.s	waitforblitter198
               S01:0006A550:  66 F6
F00:1797       	moveq.l #0,d6
               S01:0006A552:  7C 00
F00:1798       	lea     $dff000,a6 ; Hardware registers
               S01:0006A554:  4D F9 00 DF F0 00
F00:1799       	move.l srcimage,a0
               S01:0006A55A:  20 7A EA AC
F00:1800       	move.l rf_dstimage,a1
               S01:0006A55E:  22 7A FF 4A
F00:1801       	moveq #0,d0
               S01:0006A562:  70 00
F00:1802       	move.w rf_yoffset,d0     ; BOP move
               S01:0006A564:  30 3A FF 48
F00:1803       	; ORG TYPE of rf_yoffset INTEGER
F00:1804       	; LHS is byte, so initiate advanced op
F00:1805       	; is advanced bop
F00:1806       	; Reset register
F00:1807       	moveq #0,d1
               S01:0006A568:  72 00
F00:1808       	move.w #$c,d1     ; Advanced movee
               S01:0006A56A:  32 3C 00 0C
F00:1809       	mulu.w d1,d0
               S01:0006A56E:  C0 C1
F00:1810       	move.w d0,d6
               S01:0006A570:  3C 00
F00:1811       	move.w #$e,d1
               S01:0006A572:  32 3C 00 0E
F00:1812       	moveq #0,d0
               S01:0006A576:  70 00
F00:1813       	move.w rf_yoffset,d0     ; BOP move
               S01:0006A578:  30 3A FF 34
F00:1814       	add.w #$3e,d0 ; simple bop
               S01:0006A57C:  D0 7C 00 3E
F00:1815       	move.w d0,d2
               S01:0006A580:  34 00
F00:1816       	move.w #$28,d3
               S01:0006A582:  36 3C 00 28
F00:1817       	move.w #$146,d4
               S01:0006A586:  38 3C 01 46
F00:1818       	move.w #$0,BLTAMOD(a6)
               S01:0006A58A:  3D 7C 00 00 00 64
F00:1819       	move.w #$0,BLTBMOD(a6)
               S01:0006A590:  3D 7C 00 00 00 62
F00:1820       	move.w #$0,BLTCMOD(a6)
               S01:0006A596:  3D 7C 00 00 00 60
F00:1821       	move.w #$1c,BLTDMOD(a6)
               S01:0006A59C:  3D 7C 00 1C 00 66
F00:1822       	move.w #$9f0,d0
               S01:0006A5A2:  30 3C 09 F0
F00:1823       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0006A5A6:  3D 7C 00 00 00 42
F00:1824       	jsr blitter
               S01:0006A5AC:  61 00 08 EC
F00:1825       	add.l #$798,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A5B0:  06 B9 00 00 07 98 00 06 90 08 [R]
F00:1826       	add.l #$57d0,rf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A5BA:  06 B9 00 00 57 D0 00 06 A4 AA [R]
F00:1827       waitforblitter199
F00:1828       	btst	#14,DMACONR
               S01:0006A5C4:  08 39 00 0E 00 DF F0 02
F00:1829       	bne.s	waitforblitter199
               S01:0006A5CC:  66 F6
F00:1830       	moveq.l #0,d6
               S01:0006A5CE:  7C 00
F00:1831       	lea     $dff000,a6 ; Hardware registers
               S01:0006A5D0:  4D F9 00 DF F0 00
F00:1832       	move.l srcimage,a0
               S01:0006A5D6:  20 7A EA 30
F00:1833       	move.l rf_dstimage,a1
               S01:0006A5DA:  22 7A FE CE
F00:1834       	moveq #0,d0
               S01:0006A5DE:  70 00
F00:1835       	move.w rf_yoffset,d0     ; BOP move
               S01:0006A5E0:  30 3A FE CC
F00:1836       	; ORG TYPE of rf_yoffset INTEGER
F00:1837       	; LHS is byte, so initiate advanced op
F00:1838       	; is advanced bop
F00:1839       	; Reset register
F00:1840       	moveq #0,d1
               S01:0006A5E4:  72 00
F00:1841       	move.w #$c,d1     ; Advanced movee
               S01:0006A5E6:  32 3C 00 0C
F00:1842       	mulu.w d1,d0
               S01:0006A5EA:  C0 C1
F00:1843       	move.w d0,d6
               S01:0006A5EC:  3C 00
F00:1844       	move.w #$e,d1
               S01:0006A5EE:  32 3C 00 0E
F00:1845       	moveq #0,d0
               S01:0006A5F2:  70 00
F00:1846       	move.w rf_yoffset,d0     ; BOP move
               S01:0006A5F4:  30 3A FE B8
F00:1847       	add.w #$3e,d0 ; simple bop
               S01:0006A5F8:  D0 7C 00 3E
F00:1848       	move.w d0,d2
               S01:0006A5FC:  34 00
F00:1849       	move.w #$28,d3
               S01:0006A5FE:  36 3C 00 28
F00:1850       	move.w #$146,d4
               S01:0006A602:  38 3C 01 46
F00:1851       	move.w #$0,BLTAMOD(a6)
               S01:0006A606:  3D 7C 00 00 00 64
F00:1852       	move.w #$0,BLTBMOD(a6)
               S01:0006A60C:  3D 7C 00 00 00 62
F00:1853       	move.w #$0,BLTCMOD(a6)
               S01:0006A612:  3D 7C 00 00 00 60
F00:1854       	move.w #$1c,BLTDMOD(a6)
               S01:0006A618:  3D 7C 00 1C 00 66
F00:1855       	move.w #$9f0,d0
               S01:0006A61E:  30 3C 09 F0
F00:1856       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0006A622:  3D 7C 00 00 00 42
F00:1857       	jsr blitter
               S01:0006A628:  61 00 08 70
F00:1858       	add.l #$798,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A62C:  06 B9 00 00 07 98 00 06 90 08 [R]
F00:1859       	add.l #$57d0,rf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A636:  06 B9 00 00 57 D0 00 06 A4 AA [R]
F00:1860       waitforblitter200
F00:1861       	btst	#14,DMACONR
               S01:0006A640:  08 39 00 0E 00 DF F0 02
F00:1862       	bne.s	waitforblitter200
               S01:0006A648:  66 F6
F00:1863       	moveq.l #0,d6
               S01:0006A64A:  7C 00
F00:1864       	lea     $dff000,a6 ; Hardware registers
               S01:0006A64C:  4D F9 00 DF F0 00
F00:1865       	move.l srcimage,a0
               S01:0006A652:  20 7A E9 B4
F00:1866       	move.l rf_dstimage,a1
               S01:0006A656:  22 7A FE 52
F00:1867       	moveq #0,d0
               S01:0006A65A:  70 00
F00:1868       	move.w rf_yoffset,d0     ; BOP move
               S01:0006A65C:  30 3A FE 50
F00:1869       	; ORG TYPE of rf_yoffset INTEGER
F00:1870       	; LHS is byte, so initiate advanced op
F00:1871       	; is advanced bop
F00:1872       	; Reset register
F00:1873       	moveq #0,d1
               S01:0006A660:  72 00
F00:1874       	move.w #$c,d1     ; Advanced movee
               S01:0006A662:  32 3C 00 0C
F00:1875       	mulu.w d1,d0
               S01:0006A666:  C0 C1
F00:1876       	move.w d0,d6
               S01:0006A668:  3C 00
F00:1877       	move.w #$e,d1
               S01:0006A66A:  32 3C 00 0E
F00:1878       	moveq #0,d0
               S01:0006A66E:  70 00
F00:1879       	move.w rf_yoffset,d0     ; BOP move
               S01:0006A670:  30 3A FE 3C
F00:1880       	add.w #$3e,d0 ; simple bop
               S01:0006A674:  D0 7C 00 3E
F00:1881       	move.w d0,d2
               S01:0006A678:  34 00
F00:1882       	move.w #$28,d3
               S01:0006A67A:  36 3C 00 28
F00:1883       	move.w #$146,d4
               S01:0006A67E:  38 3C 01 46
F00:1884       	move.w #$0,BLTAMOD(a6)
               S01:0006A682:  3D 7C 00 00 00 64
F00:1885       	move.w #$0,BLTBMOD(a6)
               S01:0006A688:  3D 7C 00 00 00 62
F00:1886       	move.w #$0,BLTCMOD(a6)
               S01:0006A68E:  3D 7C 00 00 00 60
F00:1887       	move.w #$1c,BLTDMOD(a6)
               S01:0006A694:  3D 7C 00 1C 00 66
F00:1888       	move.w #$9f0,d0
               S01:0006A69A:  30 3C 09 F0
F00:1889       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0006A69E:  3D 7C 00 00 00 42
F00:1890       	jsr blitter
               S01:0006A6A4:  61 00 07 F4
F00:1891       	add.l #$798,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A6A8:  06 B9 00 00 07 98 00 06 90 08 [R]
F00:1892       	add.l #$57d0,rf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A6B2:  06 B9 00 00 57 D0 00 06 A4 AA [R]
F00:1893       waitforblitter201
F00:1894       	btst	#14,DMACONR
               S01:0006A6BC:  08 39 00 0E 00 DF F0 02
F00:1895       	bne.s	waitforblitter201
               S01:0006A6C4:  66 F6
F00:1896       	moveq.l #0,d6
               S01:0006A6C6:  7C 00
F00:1897       	lea     $dff000,a6 ; Hardware registers
               S01:0006A6C8:  4D F9 00 DF F0 00
F00:1898       	move.l srcimage,a0
               S01:0006A6CE:  20 7A E9 38
F00:1899       	move.l rf_dstimage,a1
               S01:0006A6D2:  22 7A FD D6
F00:1900       	moveq #0,d0
               S01:0006A6D6:  70 00
F00:1901       	move.w rf_yoffset,d0     ; BOP move
               S01:0006A6D8:  30 3A FD D4
F00:1902       	; ORG TYPE of rf_yoffset INTEGER
F00:1903       	; LHS is byte, so initiate advanced op
F00:1904       	; is advanced bop
F00:1905       	; Reset register
F00:1906       	moveq #0,d1
               S01:0006A6DC:  72 00
F00:1907       	move.w #$c,d1     ; Advanced movee
               S01:0006A6DE:  32 3C 00 0C
F00:1908       	mulu.w d1,d0
               S01:0006A6E2:  C0 C1
F00:1909       	move.w d0,d6
               S01:0006A6E4:  3C 00
F00:1910       	move.w #$e,d1
               S01:0006A6E6:  32 3C 00 0E
F00:1911       	moveq #0,d0
               S01:0006A6EA:  70 00
F00:1912       	move.w rf_yoffset,d0     ; BOP move
               S01:0006A6EC:  30 3A FD C0
F00:1913       	add.w #$3e,d0 ; simple bop
               S01:0006A6F0:  D0 7C 00 3E
F00:1914       	move.w d0,d2
               S01:0006A6F4:  34 00
F00:1915       	move.w #$28,d3
               S01:0006A6F6:  36 3C 00 28
F00:1916       	move.w #$146,d4
               S01:0006A6FA:  38 3C 01 46
F00:1917       	move.w #$0,BLTAMOD(a6)
               S01:0006A6FE:  3D 7C 00 00 00 64
F00:1918       	move.w #$0,BLTBMOD(a6)
               S01:0006A704:  3D 7C 00 00 00 62
F00:1919       	move.w #$0,BLTCMOD(a6)
               S01:0006A70A:  3D 7C 00 00 00 60
F00:1920       	move.w #$1c,BLTDMOD(a6)
               S01:0006A710:  3D 7C 00 1C 00 66
F00:1921       	move.w #$9f0,d0
               S01:0006A716:  30 3C 09 F0
F00:1922       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0006A71A:  3D 7C 00 00 00 42
F00:1923       	jsr blitter
               S01:0006A720:  61 00 07 78
F00:1924       	rts
               S01:0006A724:  4E 75
F00:1925       	; ***********  Defining procedure : EffBeerFoam
F00:1926       	;    Procedure type : User-defined procedure
F00:1927       EffBeerFoam
F00:1928       	add.w #$1,foamCounter ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A726:  52 79 00 00 A0 C6 [R]
F00:1929       	move.l screen,bf_dstimage ; Simple a:=b optimization 
               S01:0006A72C:  23 FA E8 BE 00 06 9F 24 [R]
F00:1930       	move.w foamCounter,foamsize ; Simple a:=b optimization 
               S01:0006A734:  33 F9 00 00 A0 C6 00 06 9F 28 [R]
F00:1931       	moveq #0,d0
               S01:0006A73E:  70 00
F00:1932       	move.w #$d7,d0     ; BOP move
               S01:0006A740:  30 3C 00 D7
F00:1933       	sub.w foamCounter,d0 ; simple bop
               S01:0006A744:  90 79 00 00 A0 C6 [R]
F00:1934       	; Store variable : foampos
F00:1935       	move.w d0,foampos
               S01:0006A74A:  33 C0 00 06 9F 2A [R]
F00:1936       	jsr BeerFoam
               S01:0006A750:  61 00 F7 DA
F00:1937       	rts
               S01:0006A754:  4E 75
F00:1938       	; ***********  Defining procedure : EffBeerFill
F00:1939       	;    Procedure type : User-defined procedure
F00:1940       EffBeerFill
F00:1941       	move.l screen,dstimage ; Simple a:=b optimization 
               S01:0006A756:  23 FA E8 94 00 06 A1 06 [R]
F00:1942       	move.w yOffset,yoffset ; Simple a:=b optimization 
               S01:0006A75E:  33 F9 00 00 A0 CA 00 06 A1 0A [R]
F00:1943       	move.l #imageCupFull,fd_srcimage ; Simple a:=b optimization 
               S01:0006A768:  23 FC 00 02 62 F0 00 06 A1 0C [R]
F00:1944       	moveq #0,d0
               S01:0006A772:  70 00
F00:1945       	move.w #$69c,d0
               S01:0006A774:  30 3C 06 9C
F00:1946       	move.l d0,fd_srcimageoffset
               S01:0006A778:  23 C0 00 06 A1 10 [R]
F00:1947       	jsr FillDrinkBeer
               S01:0006A77E:  61 00 F9 94
F00:1948       	cmp.w #$1,yOffset
               S01:0006A782:  0C 79 00 01 00 00 A0 CA [R]
F00:1949       	blo edblock207
               S01:0006A78A:  65 0C
F00:1950       ctb205: ;Main true block ;keep 
F00:1951       	sub.w #$1,yOffset ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A78C:  53 79 00 00 A0 CA [R]
F00:1952       	add.w #$1,foamCounter ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A792:  52 79 00 00 A0 C6 [R]
F00:1953       edblock207
F00:1954       	cmp.w #$13,foamCounter
               S01:0006A798:  0C 79 00 13 00 00 A0 C6 [R]
F00:1955       	bhi eblock212
               S01:0006A7A0:  62 2A
F00:1956       ctb211: ;Main true block ;keep 
F00:1957       	move.l screen,bf_dstimage ; Simple a:=b optimization 
               S01:0006A7A2:  23 FA E8 48 00 06 9F 24 [R]
F00:1958       	move.w foamCounter,foamsize ; Simple a:=b optimization 
               S01:0006A7AA:  33 F9 00 00 A0 C6 00 06 9F 28 [R]
F00:1959       	moveq #0,d0
               S01:0006A7B4:  70 00
F00:1960       	move.w #$d8,d0     ; BOP move
               S01:0006A7B6:  30 3C 00 D8
F00:1961       	sub.w foamCounter,d0 ; simple bop
               S01:0006A7BA:  90 79 00 00 A0 C6 [R]
F00:1962       	; Store variable : foampos
F00:1963       	move.w d0,foampos
               S01:0006A7C0:  33 C0 00 06 9F 2A [R]
F00:1964       	jsr BeerFoam
               S01:0006A7C6:  61 00 F7 64
F00:1965       	jmp edblock213
               S01:0006A7CA:  60 26
F00:1966       eblock212
F00:1967       	move.l screen,bf_dstimage ; Simple a:=b optimization 
               S01:0006A7CC:  23 FA E8 1E 00 06 9F 24 [R]
F00:1968       	move.w #$13,foamsize ; Simple a:=b optimization 
               S01:0006A7D4:  33 FC 00 13 00 06 9F 28 [R]
F00:1969       	moveq #0,d0
               S01:0006A7DC:  70 00
F00:1970       	move.w #$d8,d0     ; BOP move
               S01:0006A7DE:  30 3C 00 D8
F00:1971       	sub.w foamCounter,d0 ; simple bop
               S01:0006A7E2:  90 79 00 00 A0 C6 [R]
F00:1972       	; Store variable : foampos
F00:1973       	move.w d0,foampos
               S01:0006A7E8:  33 C0 00 06 9F 2A [R]
F00:1974       	jsr BeerFoam
               S01:0006A7EE:  61 00 F7 3C
F00:1975       edblock213
F00:1976       	rts
               S01:0006A7F2:  4E 75
F00:1977       	; ***********  Defining procedure : EffBeerDrink
F00:1978       	;    Procedure type : User-defined procedure
F00:1979       EffBeerDrink
F00:1980       	move.l screen,rf_dstimage ; Simple a:=b optimization 
               S01:0006A7F4:  23 FA E7 F6 00 06 A4 AA [R]
F00:1981       	move.w yOffset,rf_yoffset ; Simple a:=b optimization 
               S01:0006A7FC:  33 F9 00 00 A0 CA 00 06 A4 AE [R]
F00:1982       	jsr RemoveFoam
               S01:0006A806:  61 00 FC A8
F00:1983       	cmp.w #$13,foamCounter
               S01:0006A80A:  0C 79 00 13 00 00 A0 C6 [R]
F00:1984       	bhi eblock221
               S01:0006A812:  62 2A
F00:1985       ctb220: ;Main true block ;keep 
F00:1986       	move.l screen,bf_dstimage ; Simple a:=b optimization 
               S01:0006A814:  23 FA E7 D6 00 06 9F 24 [R]
F00:1987       	move.w foamCounter,foamsize ; Simple a:=b optimization 
               S01:0006A81C:  33 F9 00 00 A0 C6 00 06 9F 28 [R]
F00:1988       	moveq #0,d0
               S01:0006A826:  70 00
F00:1989       	move.w #$d8,d0     ; BOP move
               S01:0006A828:  30 3C 00 D8
F00:1990       	sub.w foamCounter,d0 ; simple bop
               S01:0006A82C:  90 79 00 00 A0 C6 [R]
F00:1991       	; Store variable : foampos
F00:1992       	move.w d0,foampos
               S01:0006A832:  33 C0 00 06 9F 2A [R]
F00:1993       	jsr BeerFoam
               S01:0006A838:  61 00 F6 F2
F00:1994       	jmp edblock222
               S01:0006A83C:  60 26
F00:1995       eblock221
F00:1996       	move.l screen,bf_dstimage ; Simple a:=b optimization 
               S01:0006A83E:  23 FA E7 AC 00 06 9F 24 [R]
F00:1997       	move.w #$13,foamsize ; Simple a:=b optimization 
               S01:0006A846:  33 FC 00 13 00 06 9F 28 [R]
F00:1998       	moveq #0,d0
               S01:0006A84E:  70 00
F00:1999       	move.w #$d8,d0     ; BOP move
               S01:0006A850:  30 3C 00 D8
F00:2000       	sub.w foamCounter,d0 ; simple bop
               S01:0006A854:  90 79 00 00 A0 C6 [R]
F00:2001       	; Store variable : foampos
F00:2002       	move.w d0,foampos
               S01:0006A85A:  33 C0 00 06 9F 2A [R]
F00:2003       	jsr BeerFoam
               S01:0006A860:  61 00 F6 CA
F00:2004       edblock222
F00:2005       	rts
               S01:0006A864:  4E 75
F00:2006       	; ***********  Defining procedure : EffScrollup
F00:2007       	;    Procedure type : User-defined procedure
F00:2008       EffScrollup
F00:2009       	sub.l #$28,screenOffset ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A866:  04 B9 00 00 00 28 00 00 A0 C2 [R]
F00:2010       	rts
               S01:0006A870:  4E 75
F00:2011       	; ***********  Defining procedure : EffScrolldown
F00:2012       	;    Procedure type : User-defined procedure
F00:2013       EffScrolldown
F00:2014       	add.l #$28,screenOffset ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A872:  06 B9 00 00 00 28 00 00 A0 C2 [R]
F00:2015       	rts
               S01:0006A87C:  4E 75
F00:2016       	; ***********  Defining procedure : RestoreCup
F00:2017       	;    Procedure type : User-defined procedure
F00:2018       	jmp block229
               S01:0006A87E:  60 10
F00:2019       rc_srcimage	dc.l	0
               S01:0006A880:  00 00 00 00
F00:2020       rc_dstimage	dc.l	0
               S01:0006A884:  00 00 00 00
F00:2021       rc_yoffset	dc.w	0
               S01:0006A888:  00 00
F00:2022       rc_height	dc.l	0
               S01:0006A88A:  00 00 00 00
F00:2023       	 	CNOP 0,4
F00:2024       block229
F00:2025       RestoreCup
F00:2026       	
F00:2027       ; //ablit description:	
F00:2028       ; // - SrcImage 
F00:2029       ; // - DstImage
F00:2030       ; // - SrcShiftBytes: Start Byte to Blit From
F00:2031       ; // - XOffset: X Offset in Bytes (8 Pixel) to Blit To
F00:2032       ; // - YOffset: YOffset to Blit to
F00:2033       ; // - BlitWidth: With in Bytes of the Blit
F00:2034       ; // - BlitSize: Complete Size of the Blit
F00:2035       ; // - BlitAmod
F00:2036       ; // - BlitDmod
F00:2037       ; // - BlitB + BlitCmod
F00:2038       ; // - Channels and Minterm
F00:2039       	move.l rc_srcimage,srcimage ; Simple a:=b optimization 
               S01:0006A890:  23 FA FF EE 00 06 90 08 [R]
F00:2040       	moveq #0,d0
               S01:0006A898:  70 00
F00:2041       	move.l rc_height,d0     ; BOP move
               S01:0006A89A:  20 3A FF EE
F00:2042       	; ORG TYPE of rc_height LONG
F00:2043       	; LHS is byte, so initiate advanced op
F00:2044       	; is advanced bop
F00:2045       	; Reset register
F00:2046       	moveq #0,d1
               S01:0006A89E:  72 00
F00:2047       	move.w #$c,d1     ; Advanced movee
               S01:0006A8A0:  32 3C 00 0C
F00:2048       	mulu.w d1,d0
               S01:0006A8A4:  C0 C1
F00:2049       	; Store variable : planeoffset
F00:2050       	move.l d0,planeoffset
               S01:0006A8A6:  23 C0 00 06 94 14 [R]
F00:2051       	moveq #0,d0
               S01:0006A8AC:  70 00
F00:2052       	moveq #0,d1
               S01:0006A8AE:  72 00
F00:2053       	move.l rc_height,d1     ; BOP move
               S01:0006A8B0:  22 3A FF D8
F00:2054       	lsl.l #$6,d1 ; simple bop
               S01:0006A8B4:  ED 89
F00:2055       	move.l d1,d0     ; BOP move
               S01:0006A8B6:  20 01
F00:2056       	add.l #$6,d0 ; simple bop
               S01:0006A8B8:  5C 80
F00:2057       	; Store variable : bltsize
F00:2058       	move.w d0,bltsize
               S01:0006A8BA:  33 C0 00 06 8F F6 [R]
F00:2059       waitforblitter230
F00:2060       	btst	#14,DMACONR
               S01:0006A8C0:  08 39 00 0E 00 DF F0 02
F00:2061       	bne.s	waitforblitter230
               S01:0006A8C8:  66 F6
F00:2062       	moveq.l #0,d6
               S01:0006A8CA:  7C 00
F00:2063       	lea     $dff000,a6 ; Hardware registers
               S01:0006A8CC:  4D F9 00 DF F0 00
F00:2064       	move.l srcimage,a0
               S01:0006A8D2:  20 7A E7 34
F00:2065       	move.l rc_dstimage,a1
               S01:0006A8D6:  22 7A FF AC
F00:2066       	move.w #$0,d6
               S01:0006A8DA:  3C 3C 00 00
F00:2067       	move.w #$e,d1
               S01:0006A8DE:  32 3C 00 0E
F00:2068       	move.w rc_yoffset,d2
               S01:0006A8E2:  34 3A FF A4
F00:2069       	move.w #$28,d3
               S01:0006A8E6:  36 3C 00 28
F00:2070       	move.w bltsize,d4
               S01:0006A8EA:  38 3A E7 0A
F00:2071       	move.w #$0,BLTAMOD(a6)
               S01:0006A8EE:  3D 7C 00 00 00 64
F00:2072       	move.w #$0,BLTBMOD(a6)
               S01:0006A8F4:  3D 7C 00 00 00 62
F00:2073       	move.w #$0,BLTCMOD(a6)
               S01:0006A8FA:  3D 7C 00 00 00 60
F00:2074       	move.w #$1c,BLTDMOD(a6)
               S01:0006A900:  3D 7C 00 1C 00 66
F00:2075       	move.w #$9f0,d0
               S01:0006A906:  30 3C 09 F0
F00:2076       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0006A90A:  3D 7C 00 00 00 42
F00:2077       	jsr blitter
               S01:0006A910:  61 00 05 88
F00:2078       	moveq #0,d0
               S01:0006A914:  70 00
F00:2079       	move.l planeoffset,d0     ; BOP move
               S01:0006A916:  20 3A EA FC
F00:2080       	add.l srcimage,d0 ; simple bop
               S01:0006A91A:  D0 BA E6 EC
F00:2081       	; Store variable : srcimage
F00:2082       	move.l d0,srcimage
               S01:0006A91E:  23 C0 00 06 90 08 [R]
F00:2083       	add.l #$57d0,rc_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A924:  06 B9 00 00 57 D0 00 06 A8 84 [R]
F00:2084       waitforblitter231
F00:2085       	btst	#14,DMACONR
               S01:0006A92E:  08 39 00 0E 00 DF F0 02
F00:2086       	bne.s	waitforblitter231
               S01:0006A936:  66 F6
F00:2087       	moveq.l #0,d6
               S01:0006A938:  7C 00
F00:2088       	lea     $dff000,a6 ; Hardware registers
               S01:0006A93A:  4D F9 00 DF F0 00
F00:2089       	move.l srcimage,a0
               S01:0006A940:  20 7A E6 C6
F00:2090       	move.l rc_dstimage,a1
               S01:0006A944:  22 7A FF 3E
F00:2091       	move.w #$0,d6
               S01:0006A948:  3C 3C 00 00
F00:2092       	move.w #$e,d1
               S01:0006A94C:  32 3C 00 0E
F00:2093       	move.w rc_yoffset,d2
               S01:0006A950:  34 3A FF 36
F00:2094       	move.w #$28,d3
               S01:0006A954:  36 3C 00 28
F00:2095       	move.w bltsize,d4
               S01:0006A958:  38 3A E6 9C
F00:2096       	move.w #$0,BLTAMOD(a6)
               S01:0006A95C:  3D 7C 00 00 00 64
F00:2097       	move.w #$0,BLTBMOD(a6)
               S01:0006A962:  3D 7C 00 00 00 62
F00:2098       	move.w #$0,BLTCMOD(a6)
               S01:0006A968:  3D 7C 00 00 00 60
F00:2099       	move.w #$1c,BLTDMOD(a6)
               S01:0006A96E:  3D 7C 00 1C 00 66
F00:2100       	move.w #$9f0,d0
               S01:0006A974:  30 3C 09 F0
F00:2101       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0006A978:  3D 7C 00 00 00 42
F00:2102       	jsr blitter
               S01:0006A97E:  61 00 05 1A
F00:2103       	moveq #0,d0
               S01:0006A982:  70 00
F00:2104       	move.l planeoffset,d0     ; BOP move
               S01:0006A984:  20 3A EA 8E
F00:2105       	add.l srcimage,d0 ; simple bop
               S01:0006A988:  D0 BA E6 7E
F00:2106       	; Store variable : srcimage
F00:2107       	move.l d0,srcimage
               S01:0006A98C:  23 C0 00 06 90 08 [R]
F00:2108       	add.l #$57d0,rc_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006A992:  06 B9 00 00 57 D0 00 06 A8 84 [R]
F00:2109       waitforblitter232
F00:2110       	btst	#14,DMACONR
               S01:0006A99C:  08 39 00 0E 00 DF F0 02
F00:2111       	bne.s	waitforblitter232
               S01:0006A9A4:  66 F6
F00:2112       	moveq.l #0,d6
               S01:0006A9A6:  7C 00
F00:2113       	lea     $dff000,a6 ; Hardware registers
               S01:0006A9A8:  4D F9 00 DF F0 00
F00:2114       	move.l srcimage,a0
               S01:0006A9AE:  20 7A E6 58
F00:2115       	move.l rc_dstimage,a1
               S01:0006A9B2:  22 7A FE D0
F00:2116       	move.w #$0,d6
               S01:0006A9B6:  3C 3C 00 00
F00:2117       	move.w #$e,d1
               S01:0006A9BA:  32 3C 00 0E
F00:2118       	move.w rc_yoffset,d2
               S01:0006A9BE:  34 3A FE C8
F00:2119       	move.w #$28,d3
               S01:0006A9C2:  36 3C 00 28
F00:2120       	move.w bltsize,d4
               S01:0006A9C6:  38 3A E6 2E
F00:2121       	move.w #$0,BLTAMOD(a6)
               S01:0006A9CA:  3D 7C 00 00 00 64
F00:2122       	move.w #$0,BLTBMOD(a6)
               S01:0006A9D0:  3D 7C 00 00 00 62
F00:2123       	move.w #$0,BLTCMOD(a6)
               S01:0006A9D6:  3D 7C 00 00 00 60
F00:2124       	move.w #$1c,BLTDMOD(a6)
               S01:0006A9DC:  3D 7C 00 1C 00 66
F00:2125       	move.w #$9f0,d0
               S01:0006A9E2:  30 3C 09 F0
F00:2126       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0006A9E6:  3D 7C 00 00 00 42
F00:2127       	jsr blitter
               S01:0006A9EC:  61 00 04 AC
F00:2128       	moveq #0,d0
               S01:0006A9F0:  70 00
F00:2129       	move.l planeoffset,d0     ; BOP move
               S01:0006A9F2:  20 3A EA 20
F00:2130       	add.l srcimage,d0 ; simple bop
               S01:0006A9F6:  D0 BA E6 10
F00:2131       	; Store variable : srcimage
F00:2132       	move.l d0,srcimage
               S01:0006A9FA:  23 C0 00 06 90 08 [R]
F00:2133       	add.l #$57d0,rc_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006AA00:  06 B9 00 00 57 D0 00 06 A8 84 [R]
F00:2134       waitforblitter233
F00:2135       	btst	#14,DMACONR
               S01:0006AA0A:  08 39 00 0E 00 DF F0 02
F00:2136       	bne.s	waitforblitter233
               S01:0006AA12:  66 F6
F00:2137       	moveq.l #0,d6
               S01:0006AA14:  7C 00
F00:2138       	lea     $dff000,a6 ; Hardware registers
               S01:0006AA16:  4D F9 00 DF F0 00
F00:2139       	move.l srcimage,a0
               S01:0006AA1C:  20 7A E5 EA
F00:2140       	move.l rc_dstimage,a1
               S01:0006AA20:  22 7A FE 62
F00:2141       	move.w #$0,d6
               S01:0006AA24:  3C 3C 00 00
F00:2142       	move.w #$e,d1
               S01:0006AA28:  32 3C 00 0E
F00:2143       	move.w rc_yoffset,d2
               S01:0006AA2C:  34 3A FE 5A
F00:2144       	move.w #$28,d3
               S01:0006AA30:  36 3C 00 28
F00:2145       	move.w bltsize,d4
               S01:0006AA34:  38 3A E5 C0
F00:2146       	move.w #$0,BLTAMOD(a6)
               S01:0006AA38:  3D 7C 00 00 00 64
F00:2147       	move.w #$0,BLTBMOD(a6)
               S01:0006AA3E:  3D 7C 00 00 00 62
F00:2148       	move.w #$0,BLTCMOD(a6)
               S01:0006AA44:  3D 7C 00 00 00 60
F00:2149       	move.w #$1c,BLTDMOD(a6)
               S01:0006AA4A:  3D 7C 00 1C 00 66
F00:2150       	move.w #$9f0,d0
               S01:0006AA50:  30 3C 09 F0
F00:2151       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0006AA54:  3D 7C 00 00 00 42
F00:2152       	jsr blitter
               S01:0006AA5A:  61 00 04 3E
F00:2153       	moveq #0,d0
               S01:0006AA5E:  70 00
F00:2154       	move.l planeoffset,d0     ; BOP move
               S01:0006AA60:  20 3A E9 B2
F00:2155       	add.l srcimage,d0 ; simple bop
               S01:0006AA64:  D0 BA E5 A2
F00:2156       	; Store variable : srcimage
F00:2157       	move.l d0,srcimage
               S01:0006AA68:  23 C0 00 06 90 08 [R]
F00:2158       	add.l #$57d0,rc_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006AA6E:  06 B9 00 00 57 D0 00 06 A8 84 [R]
F00:2159       waitforblitter234
F00:2160       	btst	#14,DMACONR
               S01:0006AA78:  08 39 00 0E 00 DF F0 02
F00:2161       	bne.s	waitforblitter234
               S01:0006AA80:  66 F6
F00:2162       	moveq.l #0,d6
               S01:0006AA82:  7C 00
F00:2163       	lea     $dff000,a6 ; Hardware registers
               S01:0006AA84:  4D F9 00 DF F0 00
F00:2164       	move.l srcimage,a0
               S01:0006AA8A:  20 7A E5 7C
F00:2165       	move.l rc_dstimage,a1
               S01:0006AA8E:  22 7A FD F4
F00:2166       	move.w #$0,d6
               S01:0006AA92:  3C 3C 00 00
F00:2167       	move.w #$e,d1
               S01:0006AA96:  32 3C 00 0E
F00:2168       	move.w rc_yoffset,d2
               S01:0006AA9A:  34 3A FD EC
F00:2169       	move.w #$28,d3
               S01:0006AA9E:  36 3C 00 28
F00:2170       	move.w bltsize,d4
               S01:0006AAA2:  38 3A E5 52
F00:2171       	move.w #$0,BLTAMOD(a6)
               S01:0006AAA6:  3D 7C 00 00 00 64
F00:2172       	move.w #$0,BLTBMOD(a6)
               S01:0006AAAC:  3D 7C 00 00 00 62
F00:2173       	move.w #$0,BLTCMOD(a6)
               S01:0006AAB2:  3D 7C 00 00 00 60
F00:2174       	move.w #$1c,BLTDMOD(a6)
               S01:0006AAB8:  3D 7C 00 1C 00 66
F00:2175       	move.w #$9f0,d0
               S01:0006AABE:  30 3C 09 F0
F00:2176       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0006AAC2:  3D 7C 00 00 00 42
F00:2177       	jsr blitter
               S01:0006AAC8:  61 00 03 D0
F00:2178       	rts
               S01:0006AACC:  4E 75
F00:2179       	; ***********  Defining procedure : Get_Musicpos
F00:2180       	;    Procedure type : User-defined procedure
F00:2181       Get_Musicpos
F00:2182       		move.w	(LSP_State+m_currentSeq)(pc),musicPos
               S01:0006AACE:  33 FA EF 32 00 06 8F F8 [R]
F00:2183       	
F00:2184       	rts
               S01:0006AAD6:  4E 75
F00:2185       	 	CNOP 0,4
F00:2186       block1
F00:2187       	moveq #0,d0
               S01:0006AAD8:  70 00
F00:2188       	move.w #$0,d0
               S01:0006AADA:  30 3C 00 00
F00:2189       	move.l d0,curcopperpos
               S01:0006AADE:  23 C0 00 00 A0 BC [R]
F00:2190       	move.l #music,cs_music ; Simple a:=b optimization 
               S01:0006AAE4:  23 FC 00 00 00 00 00 06 96 5A [R]
F00:2191       	move.l #bank,cs_bank ; Simple a:=b optimization 
               S01:0006AAEE:  23 FC 00 01 BF B8 00 06 96 5E [R]
F00:2192       	move.w #$0,cs_vbr ; Simple a:=b optimization 
               S01:0006AAF8:  33 FC 00 00 00 06 96 62 [R]
F00:2193       	move.w #$0,cs_palntsc ; Simple a:=b optimization 
               S01:0006AB00:  33 FC 00 00 00 06 96 64 [R]
F00:2194       	jsr LSP_CIAStart
               S01:0006AB08:  61 00 EB 5E
F00:2195       	jsr Load_c2p
               S01:0006AB0C:  61 00 EE FA
F00:2196       	
F00:2197       ; //init_c2p();
F00:2198       	move.l #image1,Graphics_pa ; Simple a:=b optimization 
               S01:0006AB10:  23 FC 00 03 20 CC 00 00 00 94 [R]
F00:2199       	move.w #$5,Graphics_bpl ; Simple a:=b optimization 
               S01:0006AB1A:  33 FC 00 05 00 00 00 98 [R]
F00:2200       	jsr Graphics_SetupNonInterlacedScreen
               S01:0006AB22:  61 00 E8 F8
F00:2201       	jsr FlipBuffers
               S01:0006AB26:  61 00 F8 5E
F00:2202       	move.w #$1f,d0
               S01:0006AB2A:  30 3C 00 1F
F00:2203       	move.l #image_palette,a0
               S01:0006AB2E:  41 FA E3 BC
F00:2204       	move.l #copper_palette,a1
               S01:0006AB32:  43 F9 00 00 00 68 [R]
F00:2205       memcpy236
F00:2206       	move.l (a0)+,(a1)+
               S01:0006AB38:  22 D8
F00:2207       	dbf d0,memcpy236
               S01:0006AB3A:  51 C8 FF FC
F00:2208       while237
F00:2209       loopstart241
F00:2210       	cmp.w #$0,isDone
               S01:0006AB3E:  4A 79 00 00 A0 B8 [R]
F00:2211       	bne edblock240
               S01:0006AB44:  66 00 02 EA
F00:2212       ctb238: ;Main true block ;keep 
F00:2213       waitVB365
F00:2214       	move.l VPOSR,d0
               S01:0006AB48:  20 39 00 DF F0 04
F00:2215       	and.l #$1ff00,d0
               S01:0006AB4E:  C0 BC 00 01 FF 00
F00:2216       	cmp.l #300<<8,d0
               S01:0006AB54:  B0 BC 00 01 2C 00
F00:2217       	bne waitVB365
               S01:0006AB5A:  66 EC
F00:2218       	move.w #$0,colorcycled ; Simple a:=b optimization 
               S01:0006AB5C:  33 FC 00 00 00 00 A0 BA [R]
F00:2219       	jsr FlipBuffers
               S01:0006AB64:  61 00 F8 20
F00:2220       	jsr Get_Musicpos
               S01:0006AB68:  61 00 FF 64
F00:2221       	move #$1,d0
               S01:0006AB6C:  30 3C 00 01
F00:2222       	cmp.w effectNumber,d0
               S01:0006AB70:  B0 7A E4 90
F00:2223       	bne casenext367
               S01:0006AB74:  66 1C
F00:2224       	add.w #$1,eff0Counter ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006AB76:  52 79 00 00 A0 C8 [R]
F00:2225       	cmp.w #$1e,eff0Counter
               S01:0006AB7C:  0C 79 00 1E 00 00 A0 C8 [R]
F00:2226       	blo edblock372
               S01:0006AB84:  65 08
F00:2227       ctb370: ;Main true block ;keep 
F00:2228       	move.w #$2,effectNumber ; Simple a:=b optimization 
               S01:0006AB86:  33 FC 00 02 00 06 90 02 [R]
F00:2229       edblock372
F00:2230       	jmp caseend366
               S01:0006AB8E:  60 00 02 9C
F00:2231       casenext367
F00:2232       	move #$2,d0
               S01:0006AB92:  30 3C 00 02
F00:2233       	cmp.w effectNumber,d0
               S01:0006AB96:  B0 7A E4 6A
F00:2234       	bne casenext375
               S01:0006AB9A:  66 20
F00:2235       	cmp.w #$c,foamCounter
               S01:0006AB9C:  0C 79 00 0C 00 00 A0 C6 [R]
F00:2236       	bhi eblock379
               S01:0006ABA4:  62 06
F00:2237       ctb378: ;Main true block ;keep 
F00:2238       	jsr EffBeerFoam
               S01:0006ABA6:  61 00 FB 7E
F00:2239       	jmp edblock380
               S01:0006ABAA:  60 08
F00:2240       eblock379
F00:2241       	move.w #$3,effectNumber ; Simple a:=b optimization 
               S01:0006ABAC:  33 FC 00 03 00 06 90 02 [R]
F00:2242       edblock380
F00:2243       	jsr CopperEffects
               S01:0006ABB4:  61 00 F1 B4
F00:2244       	jmp caseend366
               S01:0006ABB8:  60 00 02 72
F00:2245       casenext375
F00:2246       	move #$3,d0
               S01:0006ABBC:  30 3C 00 03
F00:2247       	cmp.w effectNumber,d0
               S01:0006ABC0:  B0 7A E4 40
F00:2248       	bne casenext385
               S01:0006ABC4:  66 1E
F00:2249       	jsr EffBeerFill
               S01:0006ABC6:  61 00 FB 8E
F00:2250       	cmp.w #$4,musicPos
               S01:0006ABCA:  0C 79 00 04 00 06 8F F8 [R]
F00:2251       	bne edblock390
               S01:0006ABD2:  66 08
F00:2252       ctb388: ;Main true block ;keep 
F00:2253       	move.w #$4,effectNumber ; Simple a:=b optimization 
               S01:0006ABD4:  33 FC 00 04 00 06 90 02 [R]
F00:2254       edblock390
F00:2255       	jsr CopperEffects
               S01:0006ABDC:  61 00 F1 8C
F00:2256       	jmp caseend366
               S01:0006ABE0:  60 00 02 4A
F00:2257       casenext385
F00:2258       	move #$4,d0
               S01:0006ABE4:  30 3C 00 04
F00:2259       	cmp.w effectNumber,d0
               S01:0006ABE8:  B0 7A E4 18
F00:2260       	bne casenext393
               S01:0006ABEC:  66 26
F00:2261       	cmp.l #$0,screenOffset
               S01:0006ABEE:  4A B9 00 00 A0 C2 [R]
F00:2262       	bls eblock397
               S01:0006ABF4:  63 06
F00:2263       ctb396: ;Main true block ;keep 
F00:2264       	jsr EffScrollup
               S01:0006ABF6:  61 00 FC 6E
F00:2265       	jmp edblock398
               S01:0006ABFA:  60 08
F00:2266       eblock397
F00:2267       	move.w #$5,effectNumber ; Simple a:=b optimization 
               S01:0006ABFC:  33 FC 00 05 00 06 90 02 [R]
F00:2268       edblock398
F00:2269       	jsr CopperEffects
               S01:0006AC04:  61 00 F1 64
F00:2270       	move.w #$0,tmp ; Simple a:=b optimization 
               S01:0006AC08:  33 FC 00 00 00 06 94 0E [R]
F00:2271       	jmp caseend366
               S01:0006AC10:  60 00 02 1A
F00:2272       casenext393
F00:2273       	move #$5,d0
               S01:0006AC14:  30 3C 00 05
F00:2274       	cmp.w effectNumber,d0
               S01:0006AC18:  B0 7A E3 E8
F00:2275       	bne casenext403
               S01:0006AC1C:  66 00 00 9C
F00:2276       	cmp.w #$8,musicPos
               S01:0006AC20:  0C 79 00 08 00 06 8F F8 [R]
F00:2277       	bne localfailed411
               S01:0006AC28:  66 02
F00:2278       	jmp ctb406
               S01:0006AC2A:  60 16
F00:2279       localfailed411: ;keep
F00:2280       	; ; logical OR, second chance
F00:2281       	cmp.w #$20,musicPos
               S01:0006AC2C:  0C 79 00 20 00 06 8F F8 [R]
F00:2282       	bne localfailed410
               S01:0006AC34:  66 02
F00:2283       	jmp ctb406
               S01:0006AC36:  60 0A
F00:2284       localfailed410: ;keep
F00:2285       	; ; logical OR, second chance
F00:2286       	cmp.w #$38,musicPos
               S01:0006AC38:  0C 79 00 38 00 06 8F F8 [R]
F00:2287       	bne edblock408
               S01:0006AC40:  66 08
F00:2288       ctb406: ;Main true block ;keep 
F00:2289       	move.w #$6,effectNumber ; Simple a:=b optimization 
               S01:0006AC42:  33 FC 00 06 00 06 90 02 [R]
F00:2290       edblock408
F00:2291       	cmp.w #$2,tmp
               S01:0006AC4A:  0C 79 00 02 00 06 94 0E [R]
F00:2292       	bhs edblock416
               S01:0006AC52:  64 58
F00:2293       ctb414: ;Main true block ;keep 
F00:2294       	move.l #imageCupFull,rc_srcimage ; Simple a:=b optimization 
               S01:0006AC54:  23 FC 00 02 62 F0 00 06 A8 80 [R]
F00:2295       	move.l screen,rc_dstimage ; Simple a:=b optimization 
               S01:0006AC5E:  23 FA E3 8C 00 06 A8 84 [R]
F00:2296       	move.w #$152,rc_yoffset ; Simple a:=b optimization 
               S01:0006AC66:  33 FC 01 52 00 06 A8 88 [R]
F00:2297       	moveq #0,d0
               S01:0006AC6E:  70 00
F00:2298       	move.w #$8d,d0
               S01:0006AC70:  30 3C 00 8D
F00:2299       	move.l d0,rc_height
               S01:0006AC74:  23 C0 00 06 A8 8A [R]
F00:2300       	jsr RestoreCup
               S01:0006AC7A:  61 00 FC 14
F00:2301       	moveq #0,d0
               S01:0006AC7E:  70 00
F00:2302       	move.l screen,d0     ; BOP move
               S01:0006AC80:  20 3A E3 6A
F00:2303       	add.l #$2800,d0 ; simple bop
               S01:0006AC84:  D0 BC 00 00 28 00
F00:2304       	; Store variable : tmp2
F00:2305       	move.l d0,tmp2
               S01:0006AC8A:  23 C0 00 06 94 10 [R]
F00:2306       	move.l tmp2,bf_dstimage ; Simple a:=b optimization 
               S01:0006AC90:  23 FA E7 7E 00 06 9F 24 [R]
F00:2307       	move.w #$13,foamsize ; Simple a:=b optimization 
               S01:0006AC98:  33 FC 00 13 00 06 9F 28 [R]
F00:2308       	move.w #$40,foampos ; Simple a:=b optimization 
               S01:0006ACA0:  33 FC 00 40 00 06 9F 2A [R]
F00:2309       	jsr BeerFoam
               S01:0006ACA8:  61 00 F2 82
F00:2310       edblock416
F00:2311       	add.w #$1,tmp ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006ACAC:  52 79 00 06 94 0E [R]
F00:2312       	jsr CopperEffects
               S01:0006ACB2:  61 00 F0 B6
F00:2313       	jmp caseend366
               S01:0006ACB6:  60 00 01 74
F00:2314       casenext403
F00:2315       	move #$6,d0
               S01:0006ACBA:  30 3C 00 06
F00:2316       	cmp.w effectNumber,d0
               S01:0006ACBE:  B0 7A E3 42
F00:2317       	bne casenext419
               S01:0006ACC2:  66 4E
F00:2318       	jsr CopperEffects
               S01:0006ACC4:  61 00 F0 A4
F00:2319       	cmp.w #$8901,lightypos
               S01:0006ACC8:  0C 79 89 01 00 00 A0 C0 [R]
F00:2320       	bhi eblock423
               S01:0006ACD0:  62 0A
F00:2321       ctb422: ;Main true block ;keep 
F00:2322       	add.w #$100,lightypos ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006ACD2:  06 79 01 00 00 00 A0 C0 [R]
F00:2323       	jmp edblock424
               S01:0006ACDA:  60 08
F00:2324       eblock423
F00:2325       	move.w #$3001,lightypos ; Simple a:=b optimization 
               S01:0006ACDC:  33 FC 30 01 00 00 A0 C0 [R]
F00:2326       edblock424
F00:2327       	cmp.w #$10,musicPos
               S01:0006ACE4:  0C 79 00 10 00 06 8F F8 [R]
F00:2328       	bne localfailed435
               S01:0006ACEC:  66 02
F00:2329       	jmp ctb430
               S01:0006ACEE:  60 16
F00:2330       localfailed435: ;keep
F00:2331       	; ; logical OR, second chance
F00:2332       	cmp.w #$28,musicPos
               S01:0006ACF0:  0C 79 00 28 00 06 8F F8 [R]
F00:2333       	bne localfailed434
               S01:0006ACF8:  66 02
F00:2334       	jmp ctb430
               S01:0006ACFA:  60 0A
F00:2335       localfailed434: ;keep
F00:2336       	; ; logical OR, second chance
F00:2337       	cmp.w #$40,musicPos
               S01:0006ACFC:  0C 79 00 40 00 06 8F F8 [R]
F00:2338       	bne edblock432
               S01:0006AD04:  66 08
F00:2339       ctb430: ;Main true block ;keep 
F00:2340       	move.w #$7,effectNumber ; Simple a:=b optimization 
               S01:0006AD06:  33 FC 00 07 00 06 90 02 [R]
F00:2341       edblock432
F00:2342       	jmp caseend366
               S01:0006AD0E:  60 00 01 1C
F00:2343       casenext419
F00:2344       	move #$7,d0
               S01:0006AD12:  30 3C 00 07
F00:2345       	cmp.w effectNumber,d0
               S01:0006AD16:  B0 7A E2 EA
F00:2346       	bne casenext437
               S01:0006AD1A:  66 22
F00:2347       	jsr CopperEffects
               S01:0006AD1C:  61 00 F0 4C
F00:2348       	cmp.l #$2800,screenOffset
               S01:0006AD20:  0C B9 00 00 28 00 00 00 A0 C2 [R]
F00:2349       	bhs eblock441
               S01:0006AD2A:  64 06
F00:2350       ctb440: ;Main true block ;keep 
F00:2351       	jsr EffScrolldown
               S01:0006AD2C:  61 00 FB 44
F00:2352       	jmp edblock442
               S01:0006AD30:  60 08
F00:2353       eblock441
F00:2354       	move.w #$8,effectNumber ; Simple a:=b optimization 
               S01:0006AD32:  33 FC 00 08 00 06 90 02 [R]
F00:2355       edblock442
F00:2356       	jmp caseend366
               S01:0006AD3A:  60 00 00 F0
F00:2357       casenext437
F00:2358       	move #$8,d0
               S01:0006AD3E:  30 3C 00 08
F00:2359       	cmp.w effectNumber,d0
               S01:0006AD42:  B0 7A E2 BE
F00:2360       	bne casenext447
               S01:0006AD46:  66 30
F00:2361       	cmp.w #$18,musicPos
               S01:0006AD48:  0C 79 00 18 00 06 8F F8 [R]
F00:2362       	bne localfailed455
               S01:0006AD50:  66 02
F00:2363       	jmp ctb450
               S01:0006AD52:  60 14
F00:2364       localfailed455: ;keep
F00:2365       	; ; logical OR, second chance
F00:2366       	cmp.w #$2c,musicPos
               S01:0006AD54:  0C 79 00 2C 00 06 8F F8 [R]
F00:2367       	bne localfailed454
               S01:0006AD5C:  66 02
F00:2368       	jmp ctb450
               S01:0006AD5E:  60 08
F00:2369       localfailed454: ;keep
F00:2370       	; ; logical OR, second chance
F00:2371       	cmp.w #$0,musicPos
               S01:0006AD60:  4A 79 00 06 8F F8 [R]
F00:2372       	bne edblock452
               S01:0006AD66:  66 08
F00:2373       ctb450: ;Main true block ;keep 
F00:2374       	move.w #$9,effectNumber ; Simple a:=b optimization 
               S01:0006AD68:  33 FC 00 09 00 06 90 02 [R]
F00:2375       edblock452
F00:2376       	jsr CopperEffects
               S01:0006AD70:  61 00 EF F8
F00:2377       	jmp caseend366
               S01:0006AD74:  60 00 00 B6
F00:2378       casenext447
F00:2379       	move #$9,d0
               S01:0006AD78:  30 3C 00 09
F00:2380       	cmp.w effectNumber,d0
               S01:0006AD7C:  B0 7A E2 84
F00:2381       	bne casenext457
               S01:0006AD80:  66 76
F00:2382       	cmp.w #$1,foamCounter
               S01:0006AD82:  0C 79 00 01 00 00 A0 C6 [R]
F00:2383       	bls eblock461
               S01:0006AD8A:  63 12
F00:2384       ctb460: ;Main true block ;keep 
F00:2385       	jsr EffBeerDrink
               S01:0006AD8C:  61 00 FA 66
F00:2386       	sub.w #$1,foamCounter ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006AD90:  53 79 00 00 A0 C6 [R]
F00:2387       	add.w #$1,yOffset ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006AD96:  52 79 00 00 A0 CA [R]
F00:2388       	jmp edblock462
               S01:0006AD9C:  60 54
F00:2389       eblock461
F00:2390       	move.l #imageRestoreCup,rc_srcimage ; Simple a:=b optimization 
               S01:0006AD9E:  23 FC 00 02 3C F8 00 06 A8 80 [R]
F00:2391       	move.l screen,rc_dstimage ; Simple a:=b optimization 
               S01:0006ADA8:  23 FA E2 42 00 06 A8 84 [R]
F00:2392       	move.w #$3d,rc_yoffset ; Simple a:=b optimization 
               S01:0006ADB0:  33 FC 00 3D 00 06 A8 88 [R]
F00:2393       	moveq #0,d0
               S01:0006ADB8:  70 00
F00:2394       	move.w #$a2,d0
               S01:0006ADBA:  30 3C 00 A2
F00:2395       	move.l d0,rc_height
               S01:0006ADBE:  23 C0 00 06 A8 8A [R]
F00:2396       	jsr RestoreCup
               S01:0006ADC4:  61 00 FA CA
F00:2397       	cmp.w #$1c,musicPos
               S01:0006ADC8:  0C 79 00 1C 00 06 8F F8 [R]
F00:2398       	bne localfailed481
               S01:0006ADD0:  66 02
F00:2399       	jmp ctb476
               S01:0006ADD2:  60 16
F00:2400       localfailed481: ;keep
F00:2401       	; ; logical OR, second chance
F00:2402       	cmp.w #$30,musicPos
               S01:0006ADD4:  0C 79 00 30 00 06 8F F8 [R]
F00:2403       	bne localfailed480
               S01:0006ADDC:  66 02
F00:2404       	jmp ctb476
               S01:0006ADDE:  60 0A
F00:2405       localfailed480: ;keep
F00:2406       	; ; logical OR, second chance
F00:2407       	cmp.w #$4,musicPos
               S01:0006ADE0:  0C 79 00 04 00 06 8F F8 [R]
F00:2408       	bne edblock478
               S01:0006ADE8:  66 08
F00:2409       ctb476: ;Main true block ;keep 
F00:2410       	move.w #$a,effectNumber ; Simple a:=b optimization 
               S01:0006ADEA:  33 FC 00 0A 00 06 90 02 [R]
F00:2411       edblock478
F00:2412       edblock462
F00:2413       	jsr CopperEffects
               S01:0006ADF2:  61 00 EF 76
F00:2414       	jmp caseend366
               S01:0006ADF6:  60 34
F00:2415       casenext457
F00:2416       	move #$a,d0
               S01:0006ADF8:  30 3C 00 0A
F00:2417       	cmp.w effectNumber,d0
               S01:0006ADFC:  B0 7A E2 04
F00:2418       	bne casenext483
               S01:0006AE00:  66 2A
F00:2419       	add.w #$1,beerinput ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0006AE02:  52 79 00 06 8F FC [R]
F00:2420       	jsr DistortMore
               S01:0006AE08:  61 00 F0 CA
F00:2421       	move.w #$0,eff0Counter ; Simple a:=b optimization 
               S01:0006AE0C:  33 FC 00 00 00 00 A0 C8 [R]
F00:2422       	move.w #$4,effectNumber ; Simple a:=b optimization 
               S01:0006AE14:  33 FC 00 04 00 06 90 02 [R]
F00:2423       	move.w #$97,foamCounter ; Simple a:=b optimization 
               S01:0006AE1C:  33 FC 00 97 00 00 A0 C6 [R]
F00:2424       	move.w #$1,yOffset ; Simple a:=b optimization 
               S01:0006AE24:  33 FC 00 01 00 00 A0 CA [R]
F00:2425       casenext483
F00:2426       caseend366
F00:2427       	jmp while237
               S01:0006AE2C:  60 00 FD 10
F00:2428       edblock240
F00:2429       loopend242
F00:2430       	 	CNOP 0,4
F00:2431       	 	CNOP 0,4
F00:2432       ; exit gracefully - reverse everything done in init
F00:2433       	move.w #$7fff,DMACON
               S01:0006AE30:  33 FC 7F FF 00 DF F0 96
F00:2434       	move.w	olddmareq,DMACON
               S01:0006AE38:  33 FA 00 A6 00 DF F0 96
F00:2435       	move.w #$7fff,INTENA
               S01:0006AE40:  33 FC 7F FF 00 DF F0 9A
F00:2436       	move.w	oldintena,INTENA
               S01:0006AE48:  33 FA 00 9A 00 DF F0 9A
F00:2437       	move.w #$7fff,INTREQ
               S01:0006AE50:  33 FC 7F FF 00 DF F0 9C
F00:2438       	move.w	oldintreq,INTREQ
               S01:0006AE58:  33 FA 00 88 00 DF F0 9C
F00:2439       	move.w #$7fff,ADKCON
               S01:0006AE60:  33 FC 7F FF 00 DF F0 9E
F00:2440       	move.w	oldadkcon,ADKCON
               S01:0006AE68:  33 FA 00 7C 00 DF F0 9E
F00:2441       
F00:2442       	move.l	oldcopper,COP1LCH
               S01:0006AE70:  23 FA 00 62 00 DF F0 80
F00:2443       	move.l 	gfxbase,a6
               S01:0006AE78:  2C 7A 00 5E
F00:2444       	move.l 	oldview,a1
               S01:0006AE7C:  22 7A 00 52
F00:2445       	jsr -222(a6)	; LoadView
               S01:0006AE80:  4E AE FF 22
F00:2446       	jsr -270(a6)	; WaitTOF
               S01:0006AE84:  4E AE FE F2
F00:2447       	jsr -270(a6)	; WaitTOF
               S01:0006AE88:  4E AE FE F2
F00:2448       	move.l	$4,a6
               S01:0006AE8C:  2C 78 00 04
F00:2449       	jsr -138(a6)	; Permit
               S01:0006AE90:  4E AE FF 76
F00:2450       
F00:2451       	; end program
F00:2452       	movem.l (sp)+,d0-d7/a0-a6
               S01:0006AE94:  4C DF 7F FF
F00:2453       	rts
               S01:0006AE98:  4E 75
F00:2454       
F00:2455       
F00:2456       ;** PROCEDURES
F00:2457       ; d6 = src shift
F00:2458       ; d1 = dst x
F00:2459       ; d2 = dst y
F00:2460       ; d3 = modulo
F00:2461       ; a0 = source
F00:2462       ; a1 = dest
F00:2463       ; d4 = blitter size
F00:2464       ; d5 = bltmod
F00:2465       blitter:
F00:2466           add.l   d6,a0
               S01:0006AE9A:  D1 C6
F00:2467           mulu.w  d3,d2
               S01:0006AE9C:  C4 C3
F00:2468           add.l   d1,d2
               S01:0006AE9E:  D4 81
F00:2469           add.l   d2,a1
               S01:0006AEA0:  D3 C2
F00:2470                               ; Leftshift 1, use channels A and D, copy A -> D
F00:2471       
F00:2472           move.l  #$ffffffff,BLTAFWM(a6) ; Set last word and first word mask BLTAFWM and BLTALWM
               S01:0006AEA2:  2D 7C FF FF FF FF 00 44
F00:2473       .lp:
F00:2474       
F00:2475       .litwait: ; Wait for blitter to be done
F00:2476           btst    #14,DMACONR
               S01:0006AEAA:  08 39 00 0E 00 DF F0 02
F00:2477           bne.s   .litwait
               S01:0006AEB2:  66 F6
F00:2478       
F00:2479           move.w  d0,BLTCON0(a6)  ; Set registers; BLTCON0
               S01:0006AEB4:  3D 40 00 40
F00:2480           move.l  a0,BLTAPTH(a6) ; src 
               S01:0006AEB8:  2D 48 00 50
F00:2481           move.l  a1,BLTBPTH(a6) ; BLT Dest PTR
               S01:0006AEBC:  2D 49 00 4C
F00:2482           move.l  a1,BLTCPTH(a6) ; BLT Dest PTR
               S01:0006AEC0:  2D 49 00 48
F00:2483           move.l  a1,BLTDPTH(a6) ; BLT Dest PTR
               S01:0006AEC4:  2D 49 00 54
F00:2484           move.w  d4,BLTSIZE(a6) ; BLTSIZE & Start blitter
               S01:0006AEC8:  3D 44 00 58
F00:2485           rts
               S01:0006AECC:  4E 75
F00:2486       
F00:2487       ; 1001
F00:2488       
F00:2489       
F00:2490       
F00:2491       
F00:2492       ; storage for 32-bit addresses and data
F00:2493       	CNOP 0,4
F00:2494       oldview:	dc.l 0
               S01:0006AED0:  00 00 00 00
F00:2495       oldcopper:	dc.l 0
               S01:0006AED4:  00 00 00 00
F00:2496       gfxbase:	dc.l 0
               S01:0006AED8:  00 00 00 00
F00:2497       frame:          dc.l 0
               S01:0006AEDC:  00 00 00 00
F00:2498       
F00:2499       ; storage for 16-bit data
F00:2500       	CNOP 0,4
F00:2501       olddmareq:	dc.w 0
               S01:0006AEE0:  00 00
F00:2502       oldintreq:	dc.w 0
               S01:0006AEE2:  00 00
F00:2503       oldintena:	dc.w 0
               S01:0006AEE4:  00 00
F00:2504       oldadkcon:	dc.w 0
               S01:0006AEE6:  00 00
F00:2505       
F00:2506       copper_index    dc.w 0
               S01:0006AEE8:  00 00
F00:2507       	CNOP 0,4
F00:2508       gfxname: dc.b 'graphics.library',0
               S01:0006AEEC:  67 72 61 70 68 69 63 73 2E 6C 69 62 72 61 72 79
               S01:0006AEFC:  00
F00:2509       
F00:2510       
F00:2511       
F00:2512         section datachip,data_c
F00:2513       
F00:2514       Chip:
F00:2515       
F00:2516           even
F00:2517       cop:
F00:2518           dc.w    $008e
               S02:00000000:  00 8E
F00:2519       copper_diwstrt:
F00:2520           dc.w    $2c81,$0090
               S02:00000002:  2C 81
               S02:00000004:  00 90
F00:2521       copper_diwstop:
F00:2522           dc.w    $2cc1
               S02:00000006:  2C C1
F00:2523       
F00:2524           
F00:2525           dc.w    $0092
               S02:00000008:  00 92
F00:2526       ddfstrt:
F00:2527       ; 
F00:2528           dc.w    $0038,$0094
               S02:0000000A:  00 38
               S02:0000000C:  00 94
F00:2529       ddfstop:
F00:2530           dc.w    $00d0
               S02:0000000E:  00 D0
F00:2531           dc.w    $0108
               S02:00000010:  01 08
F00:2532       copper_mod_even:
F00:2533       
F00:2534       ;set bplmodulo here
F00:2535           dc.w    0,$010a
               S02:00000012:  00 00
               S02:00000014:  01 0A
F00:2536       copper_mod_odd:
F00:2537       ;set bplmodulo here
F00:2538           dc.w    0
               S02:00000016:  00 00
F00:2539       
F00:2540       
F00:2541       
F00:2542       
F00:2543           
F00:2544       copper_spritestruct0:
F00:2545           dc.w $120,0, $122,0
               S02:00000018:  01 20
               S02:0000001A:  00 00
               S02:0000001C:  01 22
               S02:0000001E:  00 00
F00:2546       copper_spritestruct1:
F00:2547           dc.w $124,0, $126,0
               S02:00000020:  01 24
               S02:00000022:  00 00
               S02:00000024:  01 26
               S02:00000026:  00 00
F00:2548       copper_spritestruct2:
F00:2549           dc.w $128,0, $12A,0
               S02:00000028:  01 28
               S02:0000002A:  00 00
               S02:0000002C:  01 2A
               S02:0000002E:  00 00
F00:2550       copper_spritestruct3:
F00:2551           dc.w $12C,0, $12E,0
               S02:00000030:  01 2C
               S02:00000032:  00 00
               S02:00000034:  01 2E
               S02:00000036:  00 00
F00:2552       copper_spritestruct4:
F00:2553           dc.w $130,0, $132,0
               S02:00000038:  01 30
               S02:0000003A:  00 00
               S02:0000003C:  01 32
               S02:0000003E:  00 00
F00:2554       copper_spritestruct5:
F00:2555           dc.w $134,0, $136,0
               S02:00000040:  01 34
               S02:00000042:  00 00
               S02:00000044:  01 36
               S02:00000046:  00 00
F00:2556       copper_spritestruct6:
F00:2557           dc.w $138,0, $13A,0
               S02:00000048:  01 38
               S02:0000004A:  00 00
               S02:0000004C:  01 3A
               S02:0000004E:  00 00
F00:2558       copper_spritestruct7:
F00:2559           dc.w $13C,0, $13E,0
               S02:00000050:  01 3C
               S02:00000052:  00 00
               S02:00000054:  01 3E
               S02:00000056:  00 00
F00:2560       
F00:2561       copper_spritedata0:
F00:2562           dc.w $144,0, $146,0
               S02:00000058:  01 44
               S02:0000005A:  00 00
               S02:0000005C:  01 46
               S02:0000005E:  00 00
F00:2563       copper_spritedata1:
F00:2564           dc.w $14C,0, $14E,0
               S02:00000060:  01 4C
               S02:00000062:  00 00
               S02:00000064:  01 4E
               S02:00000066:  00 00
F00:2565       
F00:2566       
F00:2567       copper_palette:
F00:2568           dc.w    $0180, $000
               S02:00000068:  01 80
               S02:0000006A:  00 00
F00:2569           dc.w    $0182, $fff
               S02:0000006C:  01 82
               S02:0000006E:  0F FF
F00:2570           dc.w    $0184, $236
               S02:00000070:  01 84
               S02:00000072:  02 36
F00:2571           dc.w    $0186, $ba7
               S02:00000074:  01 86
               S02:00000076:  0B A7
F00:2572           dc.w    $0188, $836
               S02:00000078:  01 88
               S02:0000007A:  08 36
F00:2573           dc.w    $018a, $485
               S02:0000007C:  01 8A
               S02:0000007E:  04 85
F00:2574           dc.w    $018c, $723
               S02:00000080:  01 8C
               S02:00000082:  07 23
F00:2575           dc.w    $018e, $6cb
               S02:00000084:  01 8E
               S02:00000086:  06 CB
F00:2576           dc.w    $0190, $246
               S02:00000088:  01 90
               S02:0000008A:  02 46
F00:2577           dc.w    $0192, $034
               S02:0000008C:  01 92
               S02:0000008E:  00 34
F00:2578           dc.w    $0194, $569
               S02:00000090:  01 94
               S02:00000092:  05 69
F00:2579           dc.w    $0196, $444
               S02:00000094:  01 96
               S02:00000096:  04 44
F00:2580           dc.w    $0198, $666
               S02:00000098:  01 98
               S02:0000009A:  06 66
F00:2581           dc.w    $019a, $8d9
               S02:0000009C:  01 9A
               S02:0000009E:  08 D9
F00:2582           dc.w    $019c, $b56
               S02:000000A0:  01 9C
               S02:000000A2:  0B 56
F00:2583           dc.w    $019e, $999
               S02:000000A4:  01 9E
               S02:000000A6:  09 99
F00:2584       
F00:2585           dc.w    $01A0, $000
               S02:000000A8:  01 A0
               S02:000000AA:  00 00
F00:2586           dc.w    $01A2, $fff
               S02:000000AC:  01 A2
               S02:000000AE:  0F FF
F00:2587           dc.w    $01A4, $236
               S02:000000B0:  01 A4
               S02:000000B2:  02 36
F00:2588           dc.w    $01A6, $ba7
               S02:000000B4:  01 A6
               S02:000000B6:  0B A7
F00:2589           dc.w    $01A8, $836
               S02:000000B8:  01 A8
               S02:000000BA:  08 36
F00:2590           dc.w    $01Aa, $485
               S02:000000BC:  01 AA
               S02:000000BE:  04 85
F00:2591           dc.w    $01Ac, $723
               S02:000000C0:  01 AC
               S02:000000C2:  07 23
F00:2592           dc.w    $01Ae, $6cb
               S02:000000C4:  01 AE
               S02:000000C6:  06 CB
F00:2593           dc.w    $01B0, $246
               S02:000000C8:  01 B0
               S02:000000CA:  02 46
F00:2594           dc.w    $01B2, $034
               S02:000000CC:  01 B2
               S02:000000CE:  00 34
F00:2595           dc.w    $01B4, $569
               S02:000000D0:  01 B4
               S02:000000D2:  05 69
F00:2596           dc.w    $01B6, $444
               S02:000000D4:  01 B6
               S02:000000D6:  04 44
F00:2597           dc.w    $01B8, $666
               S02:000000D8:  01 B8
               S02:000000DA:  06 66
F00:2598           dc.w    $01Ba, $8d9
               S02:000000DC:  01 BA
               S02:000000DE:  08 D9
F00:2599           dc.w    $01Bc, $b56
               S02:000000E0:  01 BC
               S02:000000E2:  0B 56
F00:2600           dc.w    $01Be, $999
               S02:000000E4:  01 BE
               S02:000000E6:  09 99
F00:2601       
F00:2602       
F00:2603       
F00:2604       
F00:2605       
F00:2606       copper_bitplane0:
F00:2607           dc.w    $e0,0
               S02:000000E8:  00 E0
               S02:000000EA:  00 00
F00:2608           dc.w    $e2,0
               S02:000000EC:  00 E2
               S02:000000EE:  00 00
F00:2609       copper_bitplane1:
F00:2610           dc.w    $e4,0
               S02:000000F0:  00 E4
               S02:000000F2:  00 00
F00:2611           dc.w    $e6,0
               S02:000000F4:  00 E6
               S02:000000F6:  00 00
F00:2612       copper_bitplane2:
F00:2613           dc.w    $e8,0
               S02:000000F8:  00 E8
               S02:000000FA:  00 00
F00:2614           dc.w    $ea,0
               S02:000000FC:  00 EA
               S02:000000FE:  00 00
F00:2615       copper_bitplane3:
F00:2616           dc.w    $ec,0
               S02:00000100:  00 EC
               S02:00000102:  00 00
F00:2617           dc.w    $ee,0
               S02:00000104:  00 EE
               S02:00000106:  00 00
F00:2618       copper_bitplane4:
F00:2619           dc.w    $f0,0
               S02:00000108:  00 F0
               S02:0000010A:  00 00
F00:2620           dc.w    $f2,0
               S02:0000010C:  00 F2
               S02:0000010E:  00 00
F00:2621       
F00:2622       
F00:2623       copbplcon1:
F00:2624           dc.l    $01020000
               S02:00000110:  01 02 00 00
F00:2625           dc.l    $2c01fffe
               S02:00000114:  2C 01 FF FE
F00:2626       copbplcon0
F00:2627       ; Set bitplane  B
F00:2628          dc.w    $0100
               S02:00000118:  01 00
F00:2629       copper_resolution
F00:2630          dc.w     $4200 
               S02:0000011A:  42 00
F00:2631       
F00:2632       copper_custom:
F00:2633           dc.w	$ffdf, $fffe
               S02:0000011C:  FF DF
               S02:0000011E:  FF FE
F00:2634           dc.w	$2401, $fffe
               S02:00000120:  24 01
               S02:00000122:  FF FE
F00:2635           dc.w	$0100, $0200
               S02:00000124:  01 00
               S02:00000126:  02 00
F00:2636           dc.l    $fffffffe
               S02:00000128:  FF FF FF FE
F00:2637       
F00:2638       ;    dc.l    $2d01fffe, $01800000
F00:2639        ;   dc.l    $8001fffe, $01002200
F00:2640         ;  dc.l    $9001fffe, $01001200
F00:2641       ;    dc.l    $ffdffffe
F00:2642        ;   dc.l    $0d01fffe, $01000200
F00:2643        blk.l   1024
F00:2644           dc.l    $fffffffe
               S02:0000112C:  FF FF FF FE
F00:2645       
F00:2646       
F00:2647       spritepointer:
F00:2648           blk.b    256
F00:2649       
F00:2650       
F00:2651       
F00:2652       
F00:2653       
F00:2654       
F00:2655       	Section ChipRAM,Data_c
F00:2656        	CNOP 0,4
F00:2657       	 	CNOP 0,4
F00:2658       music
F00:2659       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/music/terra-mesta4.lsmusic"
               S03:00000000:  4C 53 50 31 6F 05 33 94 01 19 00 00 00 7D 00 2D
               S03:00000010:  00 35 00 3D 00 00 3A 00 00 30 00 00 37 8C 0D 1D
F00:2660       	 	CNOP 0,4
F00:2661       	 	CNOP 0,4
F00:2662       bank
F00:2663       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/music/terra-mesta4.lsbank"
               S03:0001BFB8:  6F 05 33 94 1A 31 44 AC 5E 64 67 68 67 64 60 5B
               S03:0001BFC8:  55 4E 47 3F 36 2E 26 1F 17 10 0A 04 FD F7 F1 EB
F00:2664       	 	CNOP 0,4
F00:2665       	 	CNOP 0,4
F00:2666       imageRestoreCup
F00:2667       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/restorecup.BPL"
               S03:00023CF8:  00 28 00 00 00 00 00 00 00 00 02 80 00 2C 00 00
               S03:00023D08:  00 00 00 00 00 00 03 40 00 38 00 00 00 00 00 00
F00:2668       	 	CNOP 0,4
F00:2669       	 	CNOP 0,4
F00:2670       imageCupFull
F00:2671       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/cupfull.BPL"
               S03:000262F0:  00 5F E1 FC 00 00 00 3F FA 1F FF A0 00 3F F8 7F
               S03:00026300:  FF FF FF FF 00 7E 01 50 00 60 40 00 00 00 01 FF
F00:2672       	 	CNOP 0,4
F00:2673       	 	CNOP 0,4
F00:2674       imageFoam
F00:2675       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/foam.BPL"
               S03:000283FC:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
               S03:0002840C:  00 00 00 00 00 2C 00 00 00 00 00 00 00 00 00 00
F00:2676       	 	CNOP 0,4
F00:2677       	 	CNOP 0,4
F00:2678       imageMask
F00:2679       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/mask.BPL"
               S03:00028870:  00 00 00 00 00 00 00 00 00 74 00 00 00 00 00 00
               S03:00028880:  00 00 00 01 FF FF E0 00 00 00 01 FF 00 00 00 1F
F00:2680       	 	CNOP 0,4
F00:2681       


Sections:
S01  CODE
S02  datachip
S03  ChipRAM


Sources:
F00  C:\Users\uersu\Documents\GitData\compofiller\\main.asm


Symbols:
spritepointer LAB (0x1130) UNUSED sec=datachip 
copbplcon0 LAB (0x118) UNUSED sec=datachip 
copbplcon1 LAB (0x110) UNUSED sec=datachip 
copper_spritedata1 LAB (0x60) UNUSED sec=datachip 
copper_spritedata0 LAB (0x58) UNUSED sec=datachip 
copper_spritestruct7 LAB (0x50) UNUSED sec=datachip 
copper_spritestruct6 LAB (0x48) UNUSED sec=datachip 
copper_spritestruct5 LAB (0x40) UNUSED sec=datachip 
copper_spritestruct4 LAB (0x38) UNUSED sec=datachip 
copper_spritestruct3 LAB (0x30) UNUSED sec=datachip 
copper_spritestruct2 LAB (0x28) UNUSED sec=datachip 
copper_spritestruct1 LAB (0x20) UNUSED sec=datachip 
copper_spritestruct0 LAB (0x18) UNUSED sec=datachip 
ddfstop LAB (0xe) UNUSED sec=datachip 
ddfstrt LAB (0xa) UNUSED sec=datachip 
copper_diwstop LAB (0x6) UNUSED sec=datachip 
copper_diwstrt LAB (0x2) UNUSED sec=datachip 
Chip LAB (0x0) UNUSED sec=datachip 
copper_index LAB (0x6aee8) UNUSED sec=CODE 
frame LAB (0x6aedc) UNUSED sec=CODE 
 blitter .litwait LAB (0x6aeaa) sec=CODE 
 blitter .lp LAB (0x6aeaa) UNUSED sec=CODE 
loopend242 LAB (0x6ae30) UNUSED sec=CODE 
casenext483 LAB (0x6ae2c) sec=CODE 
edblock478 LAB (0x6adf2) sec=CODE 
localfailed480 LAB (0x6ade0) sec=CODE 
ctb476 LAB (0x6adea) sec=CODE 
localfailed481 LAB (0x6add4) sec=CODE 
edblock462 LAB (0x6adf2) sec=CODE 
ctb460 LAB (0x6ad8c) UNUSED sec=CODE 
eblock461 LAB (0x6ad9e) sec=CODE 
casenext457 LAB (0x6adf8) sec=CODE 
edblock452 LAB (0x6ad70) sec=CODE 
localfailed454 LAB (0x6ad60) sec=CODE 
ctb450 LAB (0x6ad68) sec=CODE 
localfailed455 LAB (0x6ad54) sec=CODE 
casenext447 LAB (0x6ad78) sec=CODE 
edblock442 LAB (0x6ad3a) sec=CODE 
ctb440 LAB (0x6ad2c) UNUSED sec=CODE 
eblock441 LAB (0x6ad32) sec=CODE 
casenext437 LAB (0x6ad3e) sec=CODE 
edblock432 LAB (0x6ad0e) sec=CODE 
localfailed434 LAB (0x6acfc) sec=CODE 
ctb430 LAB (0x6ad06) sec=CODE 
localfailed435 LAB (0x6acf0) sec=CODE 
edblock424 LAB (0x6ace4) sec=CODE 
ctb422 LAB (0x6acd2) UNUSED sec=CODE 
eblock423 LAB (0x6acdc) sec=CODE 
casenext419 LAB (0x6ad12) sec=CODE 
ctb414 LAB (0x6ac54) UNUSED sec=CODE 
edblock416 LAB (0x6acac) sec=CODE 
edblock408 LAB (0x6ac4a) sec=CODE 
localfailed410 LAB (0x6ac38) sec=CODE 
ctb406 LAB (0x6ac42) sec=CODE 
localfailed411 LAB (0x6ac2c) sec=CODE 
casenext403 LAB (0x6acba) sec=CODE 
edblock398 LAB (0x6ac04) sec=CODE 
ctb396 LAB (0x6abf6) UNUSED sec=CODE 
eblock397 LAB (0x6abfc) sec=CODE 
casenext393 LAB (0x6ac14) sec=CODE 
ctb388 LAB (0x6abd4) UNUSED sec=CODE 
edblock390 LAB (0x6abdc) sec=CODE 
casenext385 LAB (0x6abe4) sec=CODE 
edblock380 LAB (0x6abb4) sec=CODE 
ctb378 LAB (0x6aba6) UNUSED sec=CODE 
eblock379 LAB (0x6abac) sec=CODE 
casenext375 LAB (0x6abbc) sec=CODE 
caseend366 LAB (0x6ae2c) sec=CODE 
ctb370 LAB (0x6ab86) UNUSED sec=CODE 
edblock372 LAB (0x6ab8e) sec=CODE 
casenext367 LAB (0x6ab92) sec=CODE 
waitVB365 LAB (0x6ab48) sec=CODE 
ctb238 LAB (0x6ab48) UNUSED sec=CODE 
edblock240 LAB (0x6ae30) sec=CODE 
loopstart241 LAB (0x6ab3e) UNUSED sec=CODE 
while237 LAB (0x6ab3e) sec=CODE 
memcpy236 LAB (0x6ab38) sec=CODE 
copper_palette LAB (0x68) REF sec=datachip 
bank LAB (0x1bfb8) REF sec=ChipRAM 
music LAB (0x0) REF sec=ChipRAM 
Get_Musicpos LAB (0x6aace) sec=CODE 
waitforblitter234 LAB (0x6aa78) sec=CODE 
waitforblitter233 LAB (0x6aa0a) sec=CODE 
waitforblitter232 LAB (0x6a99c) sec=CODE 
waitforblitter231 LAB (0x6a92e) sec=CODE 
waitforblitter230 LAB (0x6a8c0) sec=CODE 
RestoreCup LAB (0x6a890) sec=CODE 
rc_height LAB (0x6a88a) REF sec=CODE 
rc_yoffset LAB (0x6a888) REF sec=CODE 
rc_dstimage LAB (0x6a884) REF sec=CODE 
rc_srcimage LAB (0x6a880) REF sec=CODE 
block229 LAB (0x6a890) sec=CODE 
EffScrolldown LAB (0x6a872) sec=CODE 
EffScrollup LAB (0x6a866) sec=CODE 
edblock222 LAB (0x6a864) sec=CODE 
ctb220 LAB (0x6a814) UNUSED sec=CODE 
eblock221 LAB (0x6a83e) sec=CODE 
EffBeerDrink LAB (0x6a7f4) sec=CODE 
edblock213 LAB (0x6a7f2) sec=CODE 
ctb211 LAB (0x6a7a2) UNUSED sec=CODE 
eblock212 LAB (0x6a7cc) sec=CODE 
ctb205 LAB (0x6a78c) UNUSED sec=CODE 
edblock207 LAB (0x6a798) sec=CODE 
imageCupFull LAB (0x262f0) REF sec=ChipRAM 
EffBeerFill LAB (0x6a756) sec=CODE 
EffBeerFoam LAB (0x6a726) sec=CODE 
waitforblitter201 LAB (0x6a6bc) sec=CODE 
waitforblitter200 LAB (0x6a640) sec=CODE 
waitforblitter199 LAB (0x6a5c4) sec=CODE 
waitforblitter198 LAB (0x6a548) sec=CODE 
waitforblitter197 LAB (0x6a4cc) sec=CODE 
imageRestoreCup LAB (0x23cf8) REF sec=ChipRAM 
ctb192 LAB (0x6a4ba) UNUSED sec=CODE 
edblock194 LAB (0x6a4c2) sec=CODE 
RemoveFoam LAB (0x6a4b0) sec=CODE 
rf_yoffset LAB (0x6a4ae) REF sec=CODE 
rf_dstimage LAB (0x6a4aa) REF sec=CODE 
block190 LAB (0x6a4b0) sec=CODE 
edblock185 LAB (0x6a400) sec=CODE 
ctb183 LAB (0x6a38e) UNUSED sec=CODE 
eblock184 LAB (0x6a3c8) sec=CODE 
FlipBuffers LAB (0x6a386) sec=CODE 
waitforblitter180 LAB (0x6a31c) sec=CODE 
waitforblitter179 LAB (0x6a29a) sec=CODE 
waitforblitter178 LAB (0x6a218) sec=CODE 
waitforblitter177 LAB (0x6a196) sec=CODE 
blitter LAB (0x6ae9a) sec=CODE 
waitforblitter176 LAB (0x6a114) sec=CODE 
FillDrinkBeer LAB (0x6a114) sec=CODE 
fd_srcimageoffset LAB (0x6a110) REF sec=CODE 
fd_srcimage LAB (0x6a10c) REF sec=CODE 
yoffset LAB (0x6a10a) REF sec=CODE 
dstimage LAB (0x6a106) REF sec=CODE 
block175 LAB (0x6a114) sec=CODE 
waitforblitter174 LAB (0x69f8a) sec=CODE 
imageMask LAB (0x28870) REF sec=ChipRAM 
imageFoam LAB (0x283fc) REF sec=ChipRAM 
BeerFoam LAB (0x69f2c) sec=CODE 
foampos LAB (0x69f2a) REF sec=CODE 
foamsize LAB (0x69f28) REF sec=CODE 
bf_dstimage LAB (0x69f24) REF sec=CODE 
block173 LAB (0x69f2c) sec=CODE 
loopend170 LAB (0x69f20) UNUSED sec=CODE 
loopstart169 LAB (0x69f10) UNUSED sec=CODE 
forloop168 LAB (0x69edc) sec=CODE 
DistortMore LAB (0x69ed4) sec=CODE 
edblock162 LAB (0x69ed2) sec=CODE 
ctb160 LAB (0x69ec2) UNUSED sec=CODE 
eblock161 LAB (0x69eca) sec=CODE 
loopend144 LAB (0x69eb0) UNUSED sec=CODE 
ctb154 LAB (0x69ea2) UNUSED sec=CODE 
edblock156 LAB (0x69ea6) sec=CODE 
ctb140 LAB (0x69e92) UNUSED sec=CODE 
edblock142 LAB (0x69eb0) sec=CODE 
loopstart143 LAB (0x69e88) UNUSED sec=CODE 
while139 LAB (0x69e88) sec=CODE 
loopend124 LAB (0x69e88) UNUSED sec=CODE 
ctb134 LAB (0x69e7a) UNUSED sec=CODE 
edblock136 LAB (0x69e7e) sec=CODE 
ctb120 LAB (0x69e6a) UNUSED sec=CODE 
edblock122 LAB (0x69e88) sec=CODE 
loopstart123 LAB (0x69e60) UNUSED sec=CODE 
while119 LAB (0x69e60) sec=CODE 
ctb114 LAB (0x69e54) UNUSED sec=CODE 
edblock116 LAB (0x69e58) sec=CODE 
ctb102 LAB (0x69e40) UNUSED sec=CODE 
edblock104 LAB (0x69e60) sec=CODE 
loopend86 LAB (0x69e36) UNUSED sec=CODE 
ctb96 LAB (0x69e28) UNUSED sec=CODE 
edblock98 LAB (0x69e2c) sec=CODE 
ctb82 LAB (0x69e18) UNUSED sec=CODE 
edblock84 LAB (0x69e36) sec=CODE 
loopstart85 LAB (0x69e06) UNUSED sec=CODE 
while81 LAB (0x69e06) sec=CODE 
ctb76 LAB (0x69df6) UNUSED sec=CODE 
edblock78 LAB (0x69dfa) sec=CODE 
ctb64 LAB (0x69de6) UNUSED sec=CODE 
edblock66 LAB (0x69e06) sec=CODE 
loopend48 LAB (0x69ddc) UNUSED sec=CODE 
ctb58 LAB (0x69dce) UNUSED sec=CODE 
edblock60 LAB (0x69dd2) sec=CODE 
ctb44 LAB (0x69dbe) UNUSED sec=CODE 
edblock46 LAB (0x69ddc) sec=CODE 
loopstart47 LAB (0x69db0) UNUSED sec=CODE 
while43 LAB (0x69db0) sec=CODE 
copper_custom LAB (0x11c) REF sec=datachip 
CopperEffects LAB (0x69d6a) sec=CODE 
memcpy41 LAB (0x69d5e) sec=CODE 
ColorCycleRestore LAB (0x69d42) sec=CODE 
memcpy39 LAB (0x69d36) sec=CODE 
ColorCycle LAB (0x69d14) sec=CODE 
c_edblock136 LAB (0x69d0a) sec=CODE 
c_ctb134 LAB (0x69cfa) UNUSED sec=CODE 
c_eblock135 LAB (0x69d02) sec=CODE 
c_ctb128 LAB (0x69cee) UNUSED sec=CODE 
c_edblock130 LAB (0x69cf0) sec=CODE 
c_edblock104 LAB (0x69cf0) sec=CODE 
c_ctb121 LAB (0x69cda) UNUSED sec=CODE 
c_edblock123 LAB (0x69cdc) sec=CODE 
c_ctb102 LAB (0x69cd2) UNUSED sec=CODE 
c_eblock103 LAB (0x69ce6) sec=CODE 
c_edblock40 LAB (0x69cf0) sec=CODE 
c_ctb95 LAB (0x69cca) UNUSED sec=CODE 
c_edblock97 LAB (0x69ccc) sec=CODE 
c_ctb89 LAB (0x69cb6) UNUSED sec=CODE 
c_edblock91 LAB (0x69cb8) sec=CODE 
c_ctb38 LAB (0x69cae) UNUSED sec=CODE 
c_eblock39 LAB (0x69cce) sec=CODE 
DistortCopperLine LAB (0x69c90) sec=CODE 
waitforblitter36 LAB (0x69c30) sec=CODE 
CookieCut LAB (0x69c30) sec=CODE 
cc_size LAB (0x69c2e) REF sec=CODE 
cc_mask LAB (0x69c2a) REF sec=CODE 
cc_dst LAB (0x69c26) REF sec=CODE 
cc_src LAB (0x69c22) REF sec=CODE 
block35 LAB (0x69c30) sec=CODE 
 c2p1x1_5_c5_030 .x2end LAB (0x69c0e) UNUSED sec=CODE 
 c2p1x1_5_c5_030 .x2 LAB (0x69bf2) sec=CODE 
 c2p1x1_5_c5_030 .start2 LAB (0x69bf8) sec=CODE 
 c2p1x1_5_c5_030 .x1end LAB (0x69bc4) UNUSED sec=CODE 
 c2p1x1_5_c5_030 .x1 LAB (0x69ac0) sec=CODE 
 c2p1x1_5_c5_030 .start1 LAB (0x69b38) sec=CODE 
 c2p1x1_5_c5_030 .none LAB (0x69c10) sec=CODE 
c2p1x1_5_c5_030 LAB (0x69a2a) UNUSED EXPORT sec=CODE 
_c2p1x1_5_c5_030 LAB (0x69a2a) UNUSED EXPORT sec=CODE 
c2p1x1_5_c5_030_pixels LAB (0x69c1a) REF sec=CODE 
c2p1x1_5_c5_030_scroffs LAB (0x69c16) REF sec=CODE 
c2p1x1_5_c5_030_init LAB (0x69a08) UNUSED EXPORT sec=CODE 
_c2p1x1_5_c5_030_init LAB (0x69a08) UNUSED EXPORT sec=CODE 
CHUNKYYMAX EXPR(512=0x200) UNUSED EQU 
CHUNKYXMAX EXPR(320=0x140) UNUSED EQU 
BPLSIZEX3 EXPR(-61440=0xffff1000) EQU 
BPLSIZEX2 EXPR(40960=0xa000) EQU 
MINUBPLSIZEMINUS4 EXPR(-20484=0xffffaffc) EQU 
BPLSIZE EXPR(20480=0x5000) EQU 
BPLY EXPR(512=0x200) EQU 
BPLX EXPR(320=0x140) EQU 
Load_c2p LAB (0x69a08) sec=CODE 
sizeof_LSPVars EXPR(46=0x2e) EQU 
m_relocDone EXPR(24=0x18) UNUSED EQU 
LSP_MusicGetPos LAB (0x699d2) UNUSED sec=CODE 
 LSP_MusicSetPos .noTimingInfo LAB (0x699d0) sec=CODE 
LSP_MusicSetPos LAB (0x699b0) UNUSED sec=CODE 
 LSP_MusicPlayTick .r_setPos LAB (0x69982) UNUSED sec=CODE 
 LSP_MusicPlayTick .r_chgbpm LAB (0x69998) sec=CODE 
 LSP_MusicPlayTick .r_rewind LAB (0x6998a) sec=CODE 
 LSP_MusicPlayTick .noReset LAB (0x69944) sec=CODE 
 LSP_MusicPlayTick .skip LAB (0x6994c) sec=CODE 
 LSP_MusicPlayTick .setIns LAB (0x69938) sec=CODE 
 LSP_MusicPlayTick .vloop LAB (0x69926) sec=CODE 
 LSP_MusicPlayTick .resetv LAB (0x699a0) sec=CODE 
 LSP_MusicPlayTick .noPb LAB (0x6990a) sec=CODE 
 LSP_MusicPlayTick .noPc LAB (0x69902) sec=CODE 
 LSP_MusicPlayTick .noPd LAB (0x698fa) sec=CODE 
 LSP_MusicPlayTick .noPa LAB (0x69912) sec=CODE 
 LSP_MusicPlayTick .noVa LAB (0x698ea) sec=CODE 
 LSP_MusicPlayTick .noVb LAB (0x698e2) sec=CODE 
 LSP_MusicPlayTick .noVc LAB (0x698da) sec=CODE 
 LSP_MusicPlayTick .noVd LAB (0x698d2) sec=CODE 
 LSP_MusicPlayTick .cmdExec LAB (0x698ca) sec=CODE 
 LSP_MusicPlayTick .noInst LAB (0x6995c) sec=CODE 
 LSP_MusicPlayTick .cextended LAB (0x69960) sec=CODE 
 LSP_MusicPlayTick .cloop LAB (0x698ba) UNUSED sec=CODE 
 LSP_MusicPlayTick .process LAB (0x698b8) sec=CODE 
m_byteStreamLoop EXPR(28=0x1c) EQU 
m_wordStreamLoop EXPR(32=0x20) EQU 
m_byteStream EXPR(0=0x0) EQU 
m_wordStream EXPR(4=0x4) EQU 
 LSP_MusicInit .skipRel LAB (0x6987a) sec=CODE 
 LSP_MusicInit .seqRel LAB (0x69870) sec=CODE 
m_currentSeq EXPR(42=0x2a) EQU 
m_seqTable EXPR(38=0x26) EQU 
 LSP_MusicInit .noSeq LAB (0x69880) sec=CODE 
m_seqCount EXPR(36=0x24) EQU 
m_codeTableAddr EXPR(12=0xc) EQU 
 LSP_MusicInit .relocated LAB (0x6983e) sec=CODE 
 LSP_MusicInit .relocLoop LAB (0x69834) sec=CODE 
m_lspInstruments EXPR(20=0x14) EQU 
m_escCodeGetPos EXPR(44=0x2c) EQU 
m_escCodeSetBpm EXPR(18=0x12) EQU 
m_escCodeRewind EXPR(16=0x10) EQU 
m_currentBpm EXPR(26=0x1a) EQU 
m_dmaconPatch EXPR(8=0x8) EQU 
LSP_State LAB (0x699d8) sec=CODE 
 LSP_MusicInit .dataError LAB (0x698ac) sec=CODE 
LSP_MusicDriver_CIA_Stop LAB (0x697c4) UNUSED sec=CODE 
 LSP_MusicDriver_CIA_Start .skipb LAB (0x697b8) sec=CODE 
 LSP_MusicDriver_CIA_Start .LSP_DmaconIrq LAB (0x69798) sec=CODE 
 LSP_MusicDriver_CIA_Start .noChg LAB (0x69776) sec=CODE 
LSP_MusicPlayTick LAB (0x698ae) sec=CODE 
 LSP_MusicDriver_CIA_Start .skipa LAB (0x6978c) sec=CODE 
 LSP_MusicDriver_CIA_Start .palClocks LAB (0x69730) sec=CODE 
 LSP_MusicDriver_CIA_Start .LSP_MainIrq LAB (0x69738) sec=CODE 
 LSP_MusicDriver_CIA_Start .ciaClock LAB (0x696ba) sec=CODE 
 LSP_MusicDriver_CIA_Start .LSP_IrqInstall LAB (0x696c4) sec=CODE 
 LSP_MusicDriver_CIA_Start .curBpm LAB (0x696be) sec=CODE 
 LSP_MusicDriver_CIA_Start .pMusicBPM LAB (0x696c0) sec=CODE 
LSP_MusicInit LAB (0x697e6) sec=CODE 
 LSP_MusicDriver_CIA_Start .LSPDmaCon LAB (0x696b4) sec=CODE 
 LSP_MusicDriver_CIA_Start .irqVector LAB (0x696b6) sec=CODE 
lspend LAB (0x69a06) sec=CODE 
LSP_MusicDriver_CIA_Start LAB (0x6968a) sec=CODE 
LSP_CIAStart LAB (0x69668) sec=CODE 
cs_palntsc LAB (0x69664) REF sec=CODE 
cs_vbr LAB (0x69662) REF sec=CODE 
cs_bank LAB (0x6965e) REF sec=CODE 
cs_music LAB (0x6965a) REF sec=CODE 
block33 LAB (0x69668) sec=CODE 
ctb28 LAB (0x6963e) UNUSED sec=CODE 
edblock30 LAB (0x69656) sec=CODE 
ctb22 LAB (0x695fa) UNUSED sec=CODE 
edblock24 LAB (0x69634) sec=CODE 
ctb16 LAB (0x69594) UNUSED sec=CODE 
edblock18 LAB (0x695f0) sec=CODE 
ctb10 LAB (0x6950c) UNUSED sec=CODE 
edblock12 LAB (0x6958a) sec=CODE 
copper_bitplane4 LAB (0x108) REF sec=datachip 
copper_bitplane3 LAB (0x100) REF sec=datachip 
copper_bitplane2 LAB (0xf8) REF sec=datachip 
copper_bitplane1 LAB (0xf0) REF sec=datachip 
copper_bitplane0 LAB (0xe8) REF sec=datachip 
ctb4 LAB (0x69462) UNUSED sec=CODE 
edblock6 LAB (0x69502) sec=CODE 
copper_mod_odd LAB (0x16) REF sec=datachip 
copper_mod_even LAB (0x12) REF sec=datachip 
copper_resolution LAB (0x11a) REF sec=datachip 
Graphics_SetupNonInterlacedScreen LAB (0x6941c) sec=CODE 
block2 LAB (0x6941c) sec=CODE 
planeoffset LAB (0x69414) REF sec=CODE 
tmp2 LAB (0x69410) REF sec=CODE 
tmp LAB (0x6940e) REF sec=CODE 
row LAB (0x6940c) REF sec=CODE 
sine4CopperAdd LAB (0x6920c) sec=CODE 
sine4Copper LAB (0x6900c) sec=CODE 
srcimage LAB (0x69008) REF sec=CODE 
imagemask LAB (0x69004) REF sec=CODE 
effectNumber LAB (0x69002) REF sec=CODE 
istart LAB (0x69000) REF sec=CODE 
curbplmod LAB (0x68ffe) REF sec=CODE 
beerinput LAB (0x68ffc) REF sec=CODE 
current LAB (0x68ffa) UNUSED sec=CODE 
musicPos LAB (0x68ff8) REF sec=CODE 
bltsize LAB (0x68ff6) REF sec=CODE 
i LAB (0x68ff4) REF sec=CODE 
offscreen LAB (0x68ff0) REF sec=CODE 
screen LAB (0x68fec) REF sec=CODE 
image_palette_cycled LAB (0x68f6c) sec=CODE 
image_palette LAB (0x68eec) sec=CODE 
image2 LAB (0x4d7dc) REF sec=CODE 
image1 LAB (0x320cc) REF sec=CODE 
imagechunky LAB (0xa0cc) UNUSED sec=CODE 
yOffset LAB (0xa0ca) REF sec=CODE 
eff0Counter LAB (0xa0c8) REF sec=CODE 
foamCounter LAB (0xa0c6) REF sec=CODE 
screenOffset LAB (0xa0c2) REF sec=CODE 
lightypos LAB (0xa0c0) REF sec=CODE 
curcopperpos LAB (0xa0bc) REF sec=CODE 
colorcycled LAB (0xa0ba) REF sec=CODE 
isDone LAB (0xa0b8) REF sec=CODE 
curBuf LAB (0xa0b6) REF sec=CODE 
c2p1x1_5_c5_030_tempbuf LAB (0xb6) REF sec=CODE 
Graphics_bytefill3 LAB (0xae) UNUSED sec=CODE 
Graphics_bytefill2 LAB (0xa4) UNUSED sec=CODE 
Graphics_bytefill1 LAB (0x9c) UNUSED sec=CODE 
Graphics_j LAB (0x9a) REF sec=CODE 
Graphics_bpl LAB (0x98) REF sec=CODE 
Graphics_pa LAB (0x94) REF sec=CODE 
block1 LAB (0x6aad8) REF sec=CODE 
cop LAB (0x0) REF sec=datachip 
oldcopper LAB (0x6aed4) REF sec=CODE 
oldview LAB (0x6aed0) REF sec=CODE 
gfxbase LAB (0x6aed8) REF sec=CODE 
gfxname LAB (0x6aeec) REF sec=CODE 
oldadkcon LAB (0x6aee6) REF sec=CODE 
oldintreq LAB (0x6aee2) REF sec=CODE 
oldintena LAB (0x6aee4) REF sec=CODE 
olddmareq LAB (0x6aee0) REF sec=CODE 
init LAB (0x0) UNUSED sec=CODE 
INTREQ2 EXPR(156=0x9c) UNUSED EQU 
INTENA2 EXPR(154=0x9a) UNUSED EQU 
ADKCON2 EXPR(158=0x9e) UNUSED EQU 
DMACON2 EXPR(150=0x96) UNUSED EQU 
INTREQ EXPR(14676124=0xdff09c) EQU 
INTENA EXPR(14676122=0xdff09a) EQU 
ADKCON EXPR(14676126=0xdff09e) EQU 
DMACON EXPR(14676118=0xdff096) EQU 
INTREQR2 EXPR(30=0x1e) UNUSED EQU 
INTENAR2 EXPR(28=0x1c) UNUSED EQU 
ADKCONR2 EXPR(16=0x10) UNUSED EQU 
DMACONR2 EXPR(2=0x2) UNUSED EQU 
COP1LCH2 EXPR(128=0x80) UNUSED EQU 
VPOSR2 EXPR(4=0x4) UNUSED EQU 
CIAAPRA2 EXPR(1=0x1) UNUSED EQU 
INTREQR EXPR(14675998=0xdff01e) EQU 
INTENAR EXPR(14675996=0xdff01c) EQU 
ADKCONR EXPR(14675984=0xdff010) EQU 
DMACONR EXPR(14675970=0xdff002) EQU 
COP1LCH EXPR(14676096=0xdff080) EQU 
VPOSR EXPR(14675972=0xdff004) EQU 
CIAAPRA EXPR(12574721=0xbfe001) UNUSED EQU 
BLTBDAT EXPR(114=0x72) UNUSED EQU 
BLTADAT EXPR(116=0x74) UNUSED EQU 
BLTSIZE EXPR(88=0x58) EQU 
BLTDPTH EXPR(84=0x54) EQU 
BLTCPTH EXPR(72=0x48) EQU 
BLTBPTH EXPR(76=0x4c) EQU 
BLTAPTL EXPR(82=0x52) UNUSED EQU 
BLTAPTH EXPR(80=0x50) EQU 
VHPOSR EXPR(6=0x6) UNUSED EQU 
BLTCON1 EXPR(66=0x42) EQU 
BLTCON0 EXPR(64=0x40) EQU 
BLTAFWM EXPR(68=0x44) EQU 
BLTDMOD EXPR(102=0x66) EQU 
BLTCMOD EXPR(96=0x60) EQU 
BLTBMOD EXPR(98=0x62) EQU 
BLTAMOD EXPR(100=0x64) EQU 
BPLCON2 EXPR(260=0x104) UNUSED EQU 
BPLCON1 EXPR(258=0x102) UNUSED EQU 
BPLCON0 EXPR(256=0x100) UNUSED EQU 
__LINE__ EXPR(2681=0xa79) INTERNAL 
__FO EXPR(0=0x0) INTERNAL 
__RS EXPR(46=0x2e) INTERNAL 
REPTN EXPR(-1=0xffffffff) INTERNAL 
__VASM EXPR(1=0x1) INTERNAL 

There have been no errors.

F00:0001       BPLCON0=                    $100
F00:0002       BPLCON1=                    $102
F00:0003       BPLCON2=                    $104
F00:0004       BLTAMOD:                equ $64
F00:0005       BLTBMOD:                equ $62
F00:0006       BLTCMOD:                equ $60
F00:0007       BLTDMOD:                equ $66
F00:0008       BLTAFWM:                equ $44
F00:0009       BLTCON0:                equ $40
F00:0010       BLTCON1:                equ $42
F00:0011       VHPOSR:                 equ 6
F00:0012       BLTAPTH:                equ $50
F00:0013       BLTAPTL:                equ $52
F00:0014       BLTBPTH:                equ $4c
F00:0015       BLTCPTH:                equ $48
F00:0016       BLTDPTH:                equ $54
F00:0017       BLTSIZE:                equ $58
F00:0018       BLTADAT:                equ $74
F00:0019       BLTBDAT:                equ $72
F00:0020       CIAAPRA         EQU             $bfe001
F00:0021       VPOSR           EQU             $dff004
F00:0022       COP1LCH         EQU             $dff080
F00:0023       DMACONR		EQU		$dff002
F00:0024       ADKCONR		EQU		$dff010
F00:0025       INTENAR		EQU		$dff01c
F00:0026       INTREQR		EQU		$dff01e
F00:0027       CIAAPRA2         EQU             $001
F00:0028       VPOSR2           EQU             $004
F00:0029       COP1LCH2         EQU             $080
F00:0030       DMACONR2		EQU		$002
F00:0031       ADKCONR2		EQU		$010
F00:0032       INTENAR2		EQU		$01c
F00:0033       INTREQR2		EQU		$01e
F00:0034       DMACON		EQU		$dff096
F00:0035       ADKCON		EQU		$dff09e
F00:0036       INTENA		EQU		$dff09a
F00:0037       INTREQ		EQU		$dff09c
F00:0038       DMACON2		EQU		$096
F00:0039       ADKCON2		EQU		$09e
F00:0040       INTENA2		EQU		$09a
F00:0041       INTREQ2		EQU		$09c
F00:0042       init:
F00:0043       	; store data in hardwareregisters ORed with $8000
F00:0044               ;(bit 15 is a write-set bit when values are written back into the system)
F00:0045       ;Stack the registers
F00:0046       	movem.l d0-d7/a0-a6,-(sp)
               S01:00000000:  48 E7 FF FE
F00:0047       	move.w	DMACONR,d0
               S01:00000004:  30 39 00 DF F0 02
F00:0048       	or.w #$8000,d0
               S01:0000000A:  80 7C 80 00
F00:0049       	move.w d0,olddmareq
               S01:0000000E:  33 C0 00 00 1F E0 [R]
F00:0050       	move.w	INTENAR,d0
               S01:00000014:  30 39 00 DF F0 1C
F00:0051       	or.w #$8000,d0
               S01:0000001A:  80 7C 80 00
F00:0052       	move.w d0,oldintena
               S01:0000001E:  33 C0 00 00 1F E4 [R]
F00:0053       	move.w	INTREQR,d0
               S01:00000024:  30 39 00 DF F0 1E
F00:0054       	or.w #$8000,d0
               S01:0000002A:  80 7C 80 00
F00:0055       	move.w d0,oldintreq
               S01:0000002E:  33 C0 00 00 1F E2 [R]
F00:0056       ;        move.w  #$7fff,INTENA
F00:0057               move.w	ADKCONR,d0;
               S01:00000034:  30 39 00 DF F0 10
F00:0058       	or.w #$8000,d0
               S01:0000003A:  80 7C 80 00
F00:0059       	move.w d0,oldadkcon
               S01:0000003E:  33 C0 00 00 1F E6 [R]
F00:0060       	; base library address in $4
F00:0061       	move.l	$4,a6
               S01:00000044:  2C 78 00 04
F00:0062       	move.l	#gfxname,a1
               S01:00000048:  43 FA 1F A2
F00:0063       	moveq	#0,d0 ; whatever
               S01:0000004E:  70 00
F00:0064       	jsr	-552(a6) 
               S01:00000050:  4E AE FD D8
F00:0065       	move.l	d0,gfxbase
               S01:00000052:  23 C0 00 00 1F D8 [R]
F00:0066       	move.l 	d0,a6
               S01:0000005A:  2C 40
F00:0067       	move.l 	34(a6),oldview
               S01:0000005A:  23 EE 00 22 00 00 1F D0 [R]
F00:0068       	move.l 	38(a6),oldcopper
               S01:00000062:  23 EE 00 26 00 00 1F D4 [R]
F00:0069       	move.l #0,a1
               S01:0000006C:  93 C9
F00:0070       	jsr -222(a6)	; LoadView
               S01:0000006E:  4E AE FF 22
F00:0071       	jsr -270(a6)	; WaitTOF
               S01:00000072:  4E AE FE F2
F00:0072       	jsr -270(a6)	; WaitTOF
               S01:00000076:  4E AE FE F2
F00:0073       	move.l	$4,a6
               S01:0000007A:  2C 78 00 04
F00:0074       	jsr -132(a6)	; Forbid
               S01:0000007E:  4E AE FF 7C
F00:0075               move.l #cop,a0
               S01:00000082:  41 F9 00 00 00 00 [R]
F00:0076               move.l a0,COP1LCH
               S01:00000088:  23 C8 00 DF F0 80
F00:0077       	jmp block1
               S01:0000008E:  4E F9 00 03 3C F8 [R]
F00:0078       Graphics_pa dc.l 0
               S01:00000094:  00 00 00 00
F00:0079       Graphics_bpl	dc.w	0
               S01:00000098:  00 00
F00:0080       Graphics_j	dc.w	0
               S01:0000009A:  00 00
F00:0081       Graphics_bytefill1	dc.b $ff, $7f, $3f, $1f, $f, $7, $3, $1
               S01:0000009C:  FF
               S01:0000009D:  7F
               S01:0000009E:  3F
               S01:0000009F:  1F
               S01:000000A0:  0F
               S01:000000A1:  07
               S01:000000A2:  03
               S01:000000A3:  01
F00:0082       Graphics_bytefill2	dc.b $0, $80, $c0, $e0, $f0, $f8, $fc, $fe
               S01:000000A4:  00
               S01:000000A5:  80
               S01:000000A6:  C0
               S01:000000A7:  E0
               S01:000000A8:  F0
               S01:000000A9:  F8
               S01:000000AA:  FC
               S01:000000AB:  FE
F00:0083       	dc.b $ff, $ff
               S01:000000AC:  FF
               S01:000000AD:  FF
F00:0084       Graphics_bytefill3	dc.b $fe, $fc, $f8, $f0, $e0, $c0, $80, $0
               S01:000000AE:  FE
               S01:000000AF:  FC
               S01:000000B0:  F8
               S01:000000B1:  F0
               S01:000000B2:  E0
               S01:000000B3:  C0
               S01:000000B4:  80
               S01:000000B5:  00
F00:0085       c2p1x1_5_c5_030_tempbuf	blk.b	 40960
F00:0086       curBuf	dc.w	$00
               S01:0000A0B6:  00 00
F00:0087       isDone	dc.w	$00
               S01:0000A0B8:  00 00
F00:0088       colorcycled	dc.w	$00
               S01:0000A0BA:  00 00
F00:0089       curcopperpos	dc.l	$00
               S01:0000A0BC:  00 00 00 00
F00:0090       lightypos	dc.w	$3001
               S01:0000A0C0:  30 01
F00:0091       screenOffset	dc.l	$2800
               S01:0000A0C2:  00 00 28 00
F00:0092       foamCounter	dc.w	$00
               S01:0000A0C6:  00 00
F00:0093       eff0Counter	dc.w	$00
               S01:0000A0C8:  00 00
F00:0094       yOffset	dc.w	$8b
               S01:0000A0CA:  00 8B
F00:0095       	 	CNOP 0,4
F00:0096       imagechunky
F00:0097       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/cupempty.CHK"
               S01:0000A0CC:  1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B
               S01:0000A0DC:  1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B 1B
F00:0098       	 	CNOP 0,4
F00:0099       image_palette_cycled
F00:0100       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/cupemptycycle.COP"
               S01:00000148:  01 80 00 00 01 82 0C 94 01 84 0F B5 01 86 0F EA
               S01:00000158:  01 88 0F FC 01 8A 0F FE 01 8C 0F EA 01 8E 0C 63
F00:0101       	 	CNOP 0,4
F00:0102       screen	dc.l	0
               S01:000001C8:  00 00 00 00
F00:0103       offscreen	dc.l	0
               S01:000001CC:  00 00 00 00
F00:0104       i	dc.w	$00
               S01:000001D0:  00 00
F00:0105       bltsize	dc.w	$00
               S01:000001D2:  00 00
F00:0106       musicPos	dc.w	$00
               S01:000001D4:  00 00
F00:0107       current	dc.w	$00
               S01:000001D6:  00 00
F00:0108       beerinput	dc.w	$00
               S01:000001D8:  00 00
F00:0109       curbplmod	dc.w	$ffd8
               S01:000001DA:  FF D8
F00:0110       istart	dc.w	$82
               S01:000001DC:  00 82
F00:0111       musicPosOld	dc.w	$63
               S01:000001DE:  00 63
F00:0112       effectNumber	dc.w	$01
               S01:000001E0:  00 01
F00:0113       imagemask	dc.l	0
               S01:000001E2:  00 00 00 00
F00:0114       srcimage	dc.l	0
               S01:000001E6:  00 00 00 00
F00:0115       sine4Copper	dc.w $182, $188, $18e, $195, $19b, $1a1, $1a7, $1ad
               S01:000001EA:  01 82
               S01:000001EC:  01 88
               S01:000001EE:  01 8E
               S01:000001F0:  01 95
               S01:000001F2:  01 9B
               S01:000001F4:  01 A1
               S01:000001F6:  01 A7
               S01:000001F8:  01 AD
F00:0116       	dc.w $1b3, $1b9, $1bf, $1c5, $1ca, $1cf, $1d4, $1d9
               S01:000001FA:  01 B3
               S01:000001FC:  01 B9
               S01:000001FE:  01 BF
               S01:00000200:  01 C5
               S01:00000202:  01 CA
               S01:00000204:  01 CF
               S01:00000206:  01 D4
               S01:00000208:  01 D9
F00:0117       	dc.w $1de, $1e2, $1e6, $1ea, $1ee, $1f1, $1f5, $1f7
               S01:0000020A:  01 DE
               S01:0000020C:  01 E2
               S01:0000020E:  01 E6
               S01:00000210:  01 EA
               S01:00000212:  01 EE
               S01:00000214:  01 F1
               S01:00000216:  01 F5
               S01:00000218:  01 F7
F00:0118       	dc.w $1fa, $1fc, $1fe, $200, $202, $203, $203, $204
               S01:0000021A:  01 FA
               S01:0000021C:  01 FC
               S01:0000021E:  01 FE
               S01:00000220:  02 00
               S01:00000222:  02 02
               S01:00000224:  02 03
               S01:00000226:  02 03
               S01:00000228:  02 04
F00:0119       	dc.w $204, $204, $203, $203, $202, $200, $1fe, $1fc
               S01:0000022A:  02 04
               S01:0000022C:  02 04
               S01:0000022E:  02 03
               S01:00000230:  02 03
               S01:00000232:  02 02
               S01:00000234:  02 00
               S01:00000236:  01 FE
               S01:00000238:  01 FC
F00:0120       	dc.w $1fa, $1f8, $1f5, $1f2, $1ee, $1ea, $1e7, $1e2
               S01:0000023A:  01 FA
               S01:0000023C:  01 F8
               S01:0000023E:  01 F5
               S01:00000240:  01 F2
               S01:00000242:  01 EE
               S01:00000244:  01 EA
               S01:00000246:  01 E7
               S01:00000248:  01 E2
F00:0121       	dc.w $1de, $1d9, $1d4, $1cf, $1ca, $1c5, $1bf, $1b9
               S01:0000024A:  01 DE
               S01:0000024C:  01 D9
               S01:0000024E:  01 D4
               S01:00000250:  01 CF
               S01:00000252:  01 CA
               S01:00000254:  01 C5
               S01:00000256:  01 BF
               S01:00000258:  01 B9
F00:0122       	dc.w $1b4, $1ae, $1a8, $1a1, $19b, $195, $18e, $188
               S01:0000025A:  01 B4
               S01:0000025C:  01 AE
               S01:0000025E:  01 A8
               S01:00000260:  01 A1
               S01:00000262:  01 9B
               S01:00000264:  01 95
               S01:00000266:  01 8E
               S01:00000268:  01 88
F00:0123       	dc.w $182, $17b, $175, $16f, $168, $162, $15c, $156
               S01:0000026A:  01 82
               S01:0000026C:  01 7B
               S01:0000026E:  01 75
               S01:00000270:  01 6F
               S01:00000272:  01 68
               S01:00000274:  01 62
               S01:00000276:  01 5C
               S01:00000278:  01 56
F00:0124       	dc.w $150, $14a, $144, $13f, $139, $134, $12f, $12a
               S01:0000027A:  01 50
               S01:0000027C:  01 4A
               S01:0000027E:  01 44
               S01:00000280:  01 3F
               S01:00000282:  01 39
               S01:00000284:  01 34
               S01:00000286:  01 2F
               S01:00000288:  01 2A
F00:0125       	dc.w $125, $121, $11d, $119, $115, $112, $10e, $10c
               S01:0000028A:  01 25
               S01:0000028C:  01 21
               S01:0000028E:  01 1D
               S01:00000290:  01 19
               S01:00000292:  01 15
               S01:00000294:  01 12
               S01:00000296:  01 0E
               S01:00000298:  01 0C
F00:0126       	dc.w $109, $107, $105, $103, $102, $100, $100, $ff
               S01:0000029A:  01 09
               S01:0000029C:  01 07
               S01:0000029E:  01 05
               S01:000002A0:  01 03
               S01:000002A2:  01 02
               S01:000002A4:  01 00
               S01:000002A6:  01 00
               S01:000002A8:  00 FF
F00:0127       	dc.w $ff, $ff, $100, $100, $101, $103, $104, $106
               S01:000002AA:  00 FF
               S01:000002AC:  00 FF
               S01:000002AE:  01 00
               S01:000002B0:  01 00
               S01:000002B2:  01 01
               S01:000002B4:  01 03
               S01:000002B6:  01 04
               S01:000002B8:  01 06
F00:0128       	dc.w $109, $10b, $10e, $111, $115, $118, $11c, $121
               S01:000002BA:  01 09
               S01:000002BC:  01 0B
               S01:000002BE:  01 0E
               S01:000002C0:  01 11
               S01:000002C2:  01 15
               S01:000002C4:  01 18
               S01:000002C6:  01 1C
               S01:000002C8:  01 21
F00:0129       	dc.w $125, $12a, $12e, $133, $139, $13e, $144, $149
               S01:000002CA:  01 25
               S01:000002CC:  01 2A
               S01:000002CE:  01 2E
               S01:000002D0:  01 33
               S01:000002D2:  01 39
               S01:000002D4:  01 3E
               S01:000002D6:  01 44
               S01:000002D8:  01 49
F00:0130       	dc.w $14f, $155, $15b, $161, $168, $16e, $174, $17b
               S01:000002DA:  01 4F
               S01:000002DC:  01 55
               S01:000002DE:  01 5B
               S01:000002E0:  01 61
               S01:000002E2:  01 68
               S01:000002E4:  01 6E
               S01:000002E6:  01 74
               S01:000002E8:  01 7B
F00:0131       	dc.w $181, $187, $18e, $194, $19b, $1a1, $1a7, $1ad
               S01:000002EA:  01 81
               S01:000002EC:  01 87
               S01:000002EE:  01 8E
               S01:000002F0:  01 94
               S01:000002F2:  01 9B
               S01:000002F4:  01 A1
               S01:000002F6:  01 A7
               S01:000002F8:  01 AD
F00:0132       	dc.w $1b3, $1b9, $1bf, $1c4, $1ca, $1cf, $1d4, $1d9
               S01:000002FA:  01 B3
               S01:000002FC:  01 B9
               S01:000002FE:  01 BF
               S01:00000300:  01 C4
               S01:00000302:  01 CA
               S01:00000304:  01 CF
               S01:00000306:  01 D4
               S01:00000308:  01 D9
F00:0133       	dc.w $1dd, $1e2, $1e6, $1ea, $1ee, $1f1, $1f4, $1f7
               S01:0000030A:  01 DD
               S01:0000030C:  01 E2
               S01:0000030E:  01 E6
               S01:00000310:  01 EA
               S01:00000312:  01 EE
               S01:00000314:  01 F1
               S01:00000316:  01 F4
               S01:00000318:  01 F7
F00:0134       	dc.w $1fa, $1fc, $1fe, $200, $201, $203, $203, $204
               S01:0000031A:  01 FA
               S01:0000031C:  01 FC
               S01:0000031E:  01 FE
               S01:00000320:  02 00
               S01:00000322:  02 01
               S01:00000324:  02 03
               S01:00000326:  02 03
               S01:00000328:  02 04
F00:0135       	dc.w $204, $204, $203, $203, $202, $200, $1ff, $1fd
               S01:0000032A:  02 04
               S01:0000032C:  02 04
               S01:0000032E:  02 03
               S01:00000330:  02 03
               S01:00000332:  02 02
               S01:00000334:  02 00
               S01:00000336:  01 FF
               S01:00000338:  01 FD
F00:0136       	dc.w $1fa, $1f8, $1f5, $1f2, $1ee, $1eb, $1e7, $1e3
               S01:0000033A:  01 FA
               S01:0000033C:  01 F8
               S01:0000033E:  01 F5
               S01:00000340:  01 F2
               S01:00000342:  01 EE
               S01:00000344:  01 EB
               S01:00000346:  01 E7
               S01:00000348:  01 E3
F00:0137       	dc.w $1de, $1da, $1d5, $1d0, $1cb, $1c5, $1c0, $1ba
               S01:0000034A:  01 DE
               S01:0000034C:  01 DA
               S01:0000034E:  01 D5
               S01:00000350:  01 D0
               S01:00000352:  01 CB
               S01:00000354:  01 C5
               S01:00000356:  01 C0
               S01:00000358:  01 BA
F00:0138       	dc.w $1b4, $1ae, $1a8, $1a2, $19c, $195, $18f, $189
               S01:0000035A:  01 B4
               S01:0000035C:  01 AE
               S01:0000035E:  01 A8
               S01:00000360:  01 A2
               S01:00000362:  01 9C
               S01:00000364:  01 95
               S01:00000366:  01 8F
               S01:00000368:  01 89
F00:0139       	dc.w $182, $17c, $175, $16f, $169, $162, $15c, $156
               S01:0000036A:  01 82
               S01:0000036C:  01 7C
               S01:0000036E:  01 75
               S01:00000370:  01 6F
               S01:00000372:  01 69
               S01:00000374:  01 62
               S01:00000376:  01 5C
               S01:00000378:  01 56
F00:0140       	dc.w $150, $14a, $145, $13f, $13a, $134, $12f, $12a
               S01:0000037A:  01 50
               S01:0000037C:  01 4A
               S01:0000037E:  01 45
               S01:00000380:  01 3F
               S01:00000382:  01 3A
               S01:00000384:  01 34
               S01:00000386:  01 2F
               S01:00000388:  01 2A
F00:0141       	dc.w $126, $121, $11d, $119, $115, $112, $10f, $10c
               S01:0000038A:  01 26
               S01:0000038C:  01 21
               S01:0000038E:  01 1D
               S01:00000390:  01 19
               S01:00000392:  01 15
               S01:00000394:  01 12
               S01:00000396:  01 0F
               S01:00000398:  01 0C
F00:0142       	dc.w $109, $107, $105, $103, $102, $100, $100, $ff
               S01:0000039A:  01 09
               S01:0000039C:  01 07
               S01:0000039E:  01 05
               S01:000003A0:  01 03
               S01:000003A2:  01 02
               S01:000003A4:  01 00
               S01:000003A6:  01 00
               S01:000003A8:  00 FF
F00:0143       	dc.w $ff, $ff, $ff, $100, $101, $103, $104, $106
               S01:000003AA:  00 FF
               S01:000003AC:  00 FF
               S01:000003AE:  00 FF
               S01:000003B0:  01 00
               S01:000003B2:  01 01
               S01:000003B4:  01 03
               S01:000003B6:  01 04
               S01:000003B8:  01 06
F00:0144       	dc.w $109, $10b, $10e, $111, $115, $118, $11c, $120
               S01:000003BA:  01 09
               S01:000003BC:  01 0B
               S01:000003BE:  01 0E
               S01:000003C0:  01 11
               S01:000003C2:  01 15
               S01:000003C4:  01 18
               S01:000003C6:  01 1C
               S01:000003C8:  01 20
F00:0145       	dc.w $125, $129, $12e, $133, $138, $13e, $143, $149
               S01:000003CA:  01 25
               S01:000003CC:  01 29
               S01:000003CE:  01 2E
               S01:000003D0:  01 33
               S01:000003D2:  01 38
               S01:000003D4:  01 3E
               S01:000003D6:  01 43
               S01:000003D8:  01 49
F00:0146       	dc.w $14f, $155, $15b, $161, $167, $16e, $174, $17a
               S01:000003DA:  01 4F
               S01:000003DC:  01 55
               S01:000003DE:  01 5B
               S01:000003E0:  01 61
               S01:000003E2:  01 67
               S01:000003E4:  01 6E
               S01:000003E6:  01 74
               S01:000003E8:  01 7A
F00:0147       sine4CopperAdd	dc.w $0, $0, $1, $1, $2, $3, $3, $4
               S01:000003EA:  00 00
               S01:000003EC:  00 00
               S01:000003EE:  00 01
               S01:000003F0:  00 01
               S01:000003F2:  00 02
               S01:000003F4:  00 03
               S01:000003F6:  00 03
               S01:000003F8:  00 04
F00:0148       	dc.w $4, $5, $6, $6, $7, $7, $8, $8
               S01:000003FA:  00 04
               S01:000003FC:  00 05
               S01:000003FE:  00 06
               S01:00000400:  00 06
               S01:00000402:  00 07
               S01:00000404:  00 07
               S01:00000406:  00 08
               S01:00000408:  00 08
F00:0149       	dc.w $9, $9, $a, $a, $a, $b, $b, $b
               S01:0000040A:  00 09
               S01:0000040C:  00 09
               S01:0000040E:  00 0A
               S01:00000410:  00 0A
               S01:00000412:  00 0A
               S01:00000414:  00 0B
               S01:00000416:  00 0B
               S01:00000418:  00 0B
F00:0150       	dc.w $c, $c, $c, $c, $c, $c, $c, $d
               S01:0000041A:  00 0C
               S01:0000041C:  00 0C
               S01:0000041E:  00 0C
               S01:00000420:  00 0C
               S01:00000422:  00 0C
               S01:00000424:  00 0C
               S01:00000426:  00 0C
               S01:00000428:  00 0D
F00:0151       	dc.w $d, $d, $c, $c, $c, $c, $c, $c
               S01:0000042A:  00 0D
               S01:0000042C:  00 0D
               S01:0000042E:  00 0C
               S01:00000430:  00 0C
               S01:00000432:  00 0C
               S01:00000434:  00 0C
               S01:00000436:  00 0C
               S01:00000438:  00 0C
F00:0152       	dc.w $c, $b, $b, $b, $a, $a, $a, $9
               S01:0000043A:  00 0C
               S01:0000043C:  00 0B
               S01:0000043E:  00 0B
               S01:00000440:  00 0B
               S01:00000442:  00 0A
               S01:00000444:  00 0A
               S01:00000446:  00 0A
               S01:00000448:  00 09
F00:0153       	dc.w $9, $8, $8, $7, $7, $6, $6, $5
               S01:0000044A:  00 09
               S01:0000044C:  00 08
               S01:0000044E:  00 08
               S01:00000450:  00 07
               S01:00000452:  00 07
               S01:00000454:  00 06
               S01:00000456:  00 06
               S01:00000458:  00 05
F00:0154       	dc.w $5, $4, $3, $3, $2, $1, $1, $0
               S01:0000045A:  00 05
               S01:0000045C:  00 04
               S01:0000045E:  00 03
               S01:00000460:  00 03
               S01:00000462:  00 02
               S01:00000464:  00 01
               S01:00000466:  00 01
               S01:00000468:  00 00
F00:0155       	dc.w $0, $0, $ffff, $ffff, $fffe, $fffd, $fffd, $fffc
               S01:0000046A:  00 00
               S01:0000046C:  00 00
               S01:0000046E:  FF FF
               S01:00000470:  FF FF
               S01:00000472:  FF FE
               S01:00000474:  FF FD
               S01:00000476:  FF FD
               S01:00000478:  FF FC
F00:0156       	dc.w $fffc, $fffb, $fffa, $fffa, $fff9, $fff9, $fff8, $fff8
               S01:0000047A:  FF FC
               S01:0000047C:  FF FB
               S01:0000047E:  FF FA
               S01:00000480:  FF FA
               S01:00000482:  FF F9
               S01:00000484:  FF F9
               S01:00000486:  FF F8
               S01:00000488:  FF F8
F00:0157       	dc.w $fff7, $fff7, $fff6, $fff6, $fff6, $fff5, $fff5, $fff5
               S01:0000048A:  FF F7
               S01:0000048C:  FF F7
               S01:0000048E:  FF F6
               S01:00000490:  FF F6
               S01:00000492:  FF F6
               S01:00000494:  FF F5
               S01:00000496:  FF F5
               S01:00000498:  FF F5
F00:0158       	dc.w $fff4, $fff4, $fff4, $fff4, $fff4, $fff4, $fff4, $fff3
               S01:0000049A:  FF F4
               S01:0000049C:  FF F4
               S01:0000049E:  FF F4
               S01:000004A0:  FF F4
               S01:000004A2:  FF F4
               S01:000004A4:  FF F4
               S01:000004A6:  FF F4
               S01:000004A8:  FF F3
F00:0159       	dc.w $fff3, $fff3, $fff4, $fff4, $fff4, $fff4, $fff4, $fff4
               S01:000004AA:  FF F3
               S01:000004AC:  FF F3
               S01:000004AE:  FF F4
               S01:000004B0:  FF F4
               S01:000004B2:  FF F4
               S01:000004B4:  FF F4
               S01:000004B6:  FF F4
               S01:000004B8:  FF F4
F00:0160       	dc.w $fff4, $fff5, $fff5, $fff5, $fff6, $fff6, $fff6, $fff7
               S01:000004BA:  FF F4
               S01:000004BC:  FF F5
               S01:000004BE:  FF F5
               S01:000004C0:  FF F5
               S01:000004C2:  FF F6
               S01:000004C4:  FF F6
               S01:000004C6:  FF F6
               S01:000004C8:  FF F7
F00:0161       	dc.w $fff7, $fff8, $fff8, $fff9, $fff9, $fffa, $fffa, $fffb
               S01:000004CA:  FF F7
               S01:000004CC:  FF F8
               S01:000004CE:  FF F8
               S01:000004D0:  FF F9
               S01:000004D2:  FF F9
               S01:000004D4:  FF FA
               S01:000004D6:  FF FA
               S01:000004D8:  FF FB
F00:0162       	dc.w $fffb, $fffc, $fffd, $fffd, $fffe, $ffff, $ffff, $0
               S01:000004DA:  FF FB
               S01:000004DC:  FF FC
               S01:000004DE:  FF FD
               S01:000004E0:  FF FD
               S01:000004E2:  FF FE
               S01:000004E4:  FF FF
               S01:000004E6:  FF FF
               S01:000004E8:  00 00
F00:0163       	dc.w $0, $0, $1, $1, $2, $3, $3, $4
               S01:000004EA:  00 00
               S01:000004EC:  00 00
               S01:000004EE:  00 01
               S01:000004F0:  00 01
               S01:000004F2:  00 02
               S01:000004F4:  00 03
               S01:000004F6:  00 03
               S01:000004F8:  00 04
F00:0164       	dc.w $4, $5, $6, $6, $7, $7, $8, $8
               S01:000004FA:  00 04
               S01:000004FC:  00 05
               S01:000004FE:  00 06
               S01:00000500:  00 06
               S01:00000502:  00 07
               S01:00000504:  00 07
               S01:00000506:  00 08
               S01:00000508:  00 08
F00:0165       	dc.w $9, $9, $a, $a, $a, $b, $b, $b
               S01:0000050A:  00 09
               S01:0000050C:  00 09
               S01:0000050E:  00 0A
               S01:00000510:  00 0A
               S01:00000512:  00 0A
               S01:00000514:  00 0B
               S01:00000516:  00 0B
               S01:00000518:  00 0B
F00:0166       	dc.w $c, $c, $c, $c, $c, $c, $c, $d
               S01:0000051A:  00 0C
               S01:0000051C:  00 0C
               S01:0000051E:  00 0C
               S01:00000520:  00 0C
               S01:00000522:  00 0C
               S01:00000524:  00 0C
               S01:00000526:  00 0C
               S01:00000528:  00 0D
F00:0167       	dc.w $d, $d, $c, $c, $c, $c, $c, $c
               S01:0000052A:  00 0D
               S01:0000052C:  00 0D
               S01:0000052E:  00 0C
               S01:00000530:  00 0C
               S01:00000532:  00 0C
               S01:00000534:  00 0C
               S01:00000536:  00 0C
               S01:00000538:  00 0C
F00:0168       	dc.w $c, $b, $b, $b, $a, $a, $a, $9
               S01:0000053A:  00 0C
               S01:0000053C:  00 0B
               S01:0000053E:  00 0B
               S01:00000540:  00 0B
               S01:00000542:  00 0A
               S01:00000544:  00 0A
               S01:00000546:  00 0A
               S01:00000548:  00 09
F00:0169       	dc.w $9, $8, $8, $7, $7, $6, $6, $5
               S01:0000054A:  00 09
               S01:0000054C:  00 08
               S01:0000054E:  00 08
               S01:00000550:  00 07
               S01:00000552:  00 07
               S01:00000554:  00 06
               S01:00000556:  00 06
               S01:00000558:  00 05
F00:0170       	dc.w $5, $4, $3, $3, $2, $1, $1, $0
               S01:0000055A:  00 05
               S01:0000055C:  00 04
               S01:0000055E:  00 03
               S01:00000560:  00 03
               S01:00000562:  00 02
               S01:00000564:  00 01
               S01:00000566:  00 01
               S01:00000568:  00 00
F00:0171       	dc.w $0, $0, $ffff, $ffff, $fffe, $fffd, $fffd, $fffc
               S01:0000056A:  00 00
               S01:0000056C:  00 00
               S01:0000056E:  FF FF
               S01:00000570:  FF FF
               S01:00000572:  FF FE
               S01:00000574:  FF FD
               S01:00000576:  FF FD
               S01:00000578:  FF FC
F00:0172       	dc.w $fffc, $fffb, $fffa, $fffa, $fff9, $fff9, $fff8, $fff8
               S01:0000057A:  FF FC
               S01:0000057C:  FF FB
               S01:0000057E:  FF FA
               S01:00000580:  FF FA
               S01:00000582:  FF F9
               S01:00000584:  FF F9
               S01:00000586:  FF F8
               S01:00000588:  FF F8
F00:0173       	dc.w $fff7, $fff7, $fff6, $fff6, $fff6, $fff5, $fff5, $fff5
               S01:0000058A:  FF F7
               S01:0000058C:  FF F7
               S01:0000058E:  FF F6
               S01:00000590:  FF F6
               S01:00000592:  FF F6
               S01:00000594:  FF F5
               S01:00000596:  FF F5
               S01:00000598:  FF F5
F00:0174       	dc.w $fff4, $fff4, $fff4, $fff4, $fff4, $fff4, $fff4, $fff3
               S01:0000059A:  FF F4
               S01:0000059C:  FF F4
               S01:0000059E:  FF F4
               S01:000005A0:  FF F4
               S01:000005A2:  FF F4
               S01:000005A4:  FF F4
               S01:000005A6:  FF F4
               S01:000005A8:  FF F3
F00:0175       	dc.w $fff3, $fff3, $fff3, $fff4, $fff4, $fff4, $fff4, $fff4
               S01:000005AA:  FF F3
               S01:000005AC:  FF F3
               S01:000005AE:  FF F3
               S01:000005B0:  FF F4
               S01:000005B2:  FF F4
               S01:000005B4:  FF F4
               S01:000005B6:  FF F4
               S01:000005B8:  FF F4
F00:0176       	dc.w $fff4, $fff5, $fff5, $fff5, $fff6, $fff6, $fff6, $fff7
               S01:000005BA:  FF F4
               S01:000005BC:  FF F5
               S01:000005BE:  FF F5
               S01:000005C0:  FF F5
               S01:000005C2:  FF F6
               S01:000005C4:  FF F6
               S01:000005C6:  FF F6
               S01:000005C8:  FF F7
F00:0177       	dc.w $fff7, $fff8, $fff8, $fff9, $fff9, $fffa, $fffa, $fffb
               S01:000005CA:  FF F7
               S01:000005CC:  FF F8
               S01:000005CE:  FF F8
               S01:000005D0:  FF F9
               S01:000005D2:  FF F9
               S01:000005D4:  FF FA
               S01:000005D6:  FF FA
               S01:000005D8:  FF FB
F00:0178       	dc.w $fffb, $fffc, $fffd, $fffd, $fffe, $ffff, $ffff, $0
               S01:000005DA:  FF FB
               S01:000005DC:  FF FC
               S01:000005DE:  FF FD
               S01:000005E0:  FF FD
               S01:000005E2:  FF FE
               S01:000005E4:  FF FF
               S01:000005E6:  FF FF
               S01:000005E8:  00 00
F00:0179       row	dc.w	$01
               S01:000005EA:  00 01
F00:0180       tmp	dc.w	$01
               S01:000005EC:  00 01
F00:0181       tmp2	dc.l	$00
               S01:000005EE:  00 00 00 00
F00:0182       planeoffset	dc.l	$00
               S01:000005F2:  00 00 00 00
F00:0183       frameCounter	dc.w	$00
               S01:000005F6:  00 00
F00:0184       	;*
F00:0185       ; //	Sets up the copper list to point to a 320x256 buffer. Note that the screen will be set up 
F00:0186       ; //	non-interlaced, with 40*256 bytes per bitplane. <p>
F00:0187       ; //	
F00:0188       ; //	Usage: 
F00:0189       ; //		SetupNonInterlacedScreen( [ data buffer ], [ number of bitplanes ] )
F00:0190       ; //		
F00:0191       ; //	Note that the data buffer must reside in chipmem
F00:0192       ; //	
F00:0193       ; //	Example:
F00:0194       ; //	
F00:0195       ; //	<code>
F00:0196       ; //var
F00:0197       ; //	const noBitPlanes = 4; 
F00:0198       ; // 4 bitplanes = 16 colors
F00:0199       ; //	buf : array[40*256*noBitPlanes] chipmem; 
F00:0200       ; // data buffer stored in chipmem  
F00:0201       ; //...
F00:0202       ; //begin
F00:0203       ; //	Graphics::SetupNonInterlacedScreen(#buf, noBitPlanes);
F00:0204       ; //	</code>
F00:0205       ; //	
F00:0206       ; 
F00:0207       
F00:0208       	; ***********  Defining procedure : Graphics_SetupNonInterlacedScreen
F00:0209       	;    Procedure type : User-defined procedure
F00:0210       	jmp block2
               S01:000005F8:  60 02
F00:0211        ; Temp vars section
F00:0212        ; Temp vars section ends
F00:0213       	 	CNOP 0,4
F00:0214       block2
F00:0215       Graphics_SetupNonInterlacedScreen
F00:0216       	moveq #0,d0
               S01:000005FC:  70 00
F00:0217       	moveq #0,d1
               S01:000005FE:  72 00
F00:0218       	move.w #$1000,d1     ; BOP move
               S01:00000600:  32 3C 10 00
F00:0219       	mulu.w Graphics_bpl,d1 ; simple bop
               S01:00000604:  C2 FA FA 8E
F00:0220       	move.w d1,d0     ; BOP move
               S01:00000608:  30 01
F00:0221       	or.w #$200,d0 ; simple bop
               S01:0000060A:  80 7C 02 00
F00:0222       	; Store variable : Graphics_j
F00:0223       	move.w d0,Graphics_j
               S01:0000060E:  33 C0 00 00 00 96 [R]
F00:0224       	; Poke command
F00:0225       	move.l #copper_resolution,a0
               S01:00000614:  41 F9 00 00 01 1A [R]
F00:0226       	move.w Graphics_j,(a0)
               S01:0000061A:  30 BA FA 7A
F00:0227       	
F00:0228       ; // $4000  = bitplanes, $200 = colours
F00:0229       	; Poke command
F00:0230       	move.l #copper_mod_even,a0
               S01:0000061E:  41 F9 00 00 00 12 [R]
F00:0231       	move.w #$0,(a0)
               S01:00000624:  30 BC 00 00
F00:0232       	; Poke command
F00:0233       	move.l #copper_mod_odd,a0
               S01:00000628:  41 F9 00 00 00 16 [R]
F00:0234       	move.w #$0,(a0)
               S01:0000062E:  30 BC 00 00
F00:0235       	cmp.w #$5,Graphics_bpl
               S01:00000632:  0C 79 00 05 00 00 00 94 [R]
F00:0236       	bne edblock6
               S01:0000063A:  66 00 00 98
F00:0237       ctb4: ;Main true block ;keep 
F00:0238       	
F00:0239       ; // Set palette at copper palette location, 16 colors
F00:0240       ; // Setup image copper list (4 bitplanes, 40*40 modulo 120
F00:0241       	; setcopperlist32
F00:0242       	move.l Graphics_pa,a1
               S01:0000063E:  22 7A FA 50
F00:0243       	move.l a1,d0
               S01:00000642:  20 09
F00:0244       	move.l #copper_bitplane0,a0
               S01:00000644:  41 F9 00 00 00 E8 [R]
F00:0245       	move.w d0,6(a0)
               S01:0000064A:  31 40 00 06
F00:0246       	swap d0
               S01:0000064E:  48 40
F00:0247       	move.w d0,2(a0)
               S01:00000650:  31 40 00 02
F00:0248       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000654:  06 B9 00 00 28 00 00 00 00 90 [R]
F00:0249       	; setcopperlist32
F00:0250       	move.l Graphics_pa,a1
               S01:0000065E:  22 7A FA 30
F00:0251       	move.l a1,d0
               S01:00000662:  20 09
F00:0252       	move.l #copper_bitplane1,a0
               S01:00000664:  41 F9 00 00 00 F0 [R]
F00:0253       	move.w d0,6(a0)
               S01:0000066A:  31 40 00 06
F00:0254       	swap d0
               S01:0000066E:  48 40
F00:0255       	move.w d0,2(a0)
               S01:00000670:  31 40 00 02
F00:0256       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000674:  06 B9 00 00 28 00 00 00 00 90 [R]
F00:0257       	; setcopperlist32
F00:0258       	move.l Graphics_pa,a1
               S01:0000067E:  22 7A FA 10
F00:0259       	move.l a1,d0
               S01:00000682:  20 09
F00:0260       	move.l #copper_bitplane2,a0
               S01:00000684:  41 F9 00 00 00 F8 [R]
F00:0261       	move.w d0,6(a0)
               S01:0000068A:  31 40 00 06
F00:0262       	swap d0
               S01:0000068E:  48 40
F00:0263       	move.w d0,2(a0)
               S01:00000690:  31 40 00 02
F00:0264       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000694:  06 B9 00 00 28 00 00 00 00 90 [R]
F00:0265       	; setcopperlist32
F00:0266       	move.l Graphics_pa,a1
               S01:0000069E:  22 7A F9 F0
F00:0267       	move.l a1,d0
               S01:000006A2:  20 09
F00:0268       	move.l #copper_bitplane3,a0
               S01:000006A4:  41 F9 00 00 01 00 [R]
F00:0269       	move.w d0,6(a0)
               S01:000006AA:  31 40 00 06
F00:0270       	swap d0
               S01:000006AE:  48 40
F00:0271       	move.w d0,2(a0)
               S01:000006B0:  31 40 00 02
F00:0272       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000006B4:  06 B9 00 00 28 00 00 00 00 90 [R]
F00:0273       	; setcopperlist32
F00:0274       	move.l Graphics_pa,a1
               S01:000006BE:  22 7A F9 D0
F00:0275       	move.l a1,d0
               S01:000006C2:  20 09
F00:0276       	move.l #copper_bitplane4,a0
               S01:000006C4:  41 F9 00 00 01 08 [R]
F00:0277       	move.w d0,6(a0)
               S01:000006CA:  31 40 00 06
F00:0278       	swap d0
               S01:000006CE:  48 40
F00:0279       	move.w d0,2(a0)
               S01:000006D0:  31 40 00 02
F00:0280       edblock6
F00:0281       	cmp.w #$4,Graphics_bpl
               S01:000006D4:  0C 79 00 04 00 00 00 94 [R]
F00:0282       	bne edblock12
               S01:000006DC:  66 76
F00:0283       ctb10: ;Main true block ;keep 
F00:0284       	; setcopperlist32
F00:0285       	move.l Graphics_pa,a1
               S01:000006DE:  22 7A F9 B0
F00:0286       	move.l a1,d0
               S01:000006E2:  20 09
F00:0287       	move.l #copper_bitplane0,a0
               S01:000006E4:  41 F9 00 00 00 E8 [R]
F00:0288       	move.w d0,6(a0)
               S01:000006EA:  31 40 00 06
F00:0289       	swap d0
               S01:000006EE:  48 40
F00:0290       	move.w d0,2(a0)
               S01:000006F0:  31 40 00 02
F00:0291       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000006F4:  06 B9 00 00 28 00 00 00 00 90 [R]
F00:0292       	; setcopperlist32
F00:0293       	move.l Graphics_pa,a1
               S01:000006FE:  22 7A F9 90
F00:0294       	move.l a1,d0
               S01:00000702:  20 09
F00:0295       	move.l #copper_bitplane1,a0
               S01:00000704:  41 F9 00 00 00 F0 [R]
F00:0296       	move.w d0,6(a0)
               S01:0000070A:  31 40 00 06
F00:0297       	swap d0
               S01:0000070E:  48 40
F00:0298       	move.w d0,2(a0)
               S01:00000710:  31 40 00 02
F00:0299       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000714:  06 B9 00 00 28 00 00 00 00 90 [R]
F00:0300       	; setcopperlist32
F00:0301       	move.l Graphics_pa,a1
               S01:0000071E:  22 7A F9 70
F00:0302       	move.l a1,d0
               S01:00000722:  20 09
F00:0303       	move.l #copper_bitplane2,a0
               S01:00000724:  41 F9 00 00 00 F8 [R]
F00:0304       	move.w d0,6(a0)
               S01:0000072A:  31 40 00 06
F00:0305       	swap d0
               S01:0000072E:  48 40
F00:0306       	move.w d0,2(a0)
               S01:00000730:  31 40 00 02
F00:0307       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000734:  06 B9 00 00 28 00 00 00 00 90 [R]
F00:0308       	; setcopperlist32
F00:0309       	move.l Graphics_pa,a1
               S01:0000073E:  22 7A F9 50
F00:0310       	move.l a1,d0
               S01:00000742:  20 09
F00:0311       	move.l #copper_bitplane3,a0
               S01:00000744:  41 F9 00 00 01 00 [R]
F00:0312       	move.w d0,6(a0)
               S01:0000074A:  31 40 00 06
F00:0313       	swap d0
               S01:0000074E:  48 40
F00:0314       	move.w d0,2(a0)
               S01:00000750:  31 40 00 02
F00:0315       edblock12
F00:0316       	cmp.w #$3,Graphics_bpl
               S01:00000754:  0C 79 00 03 00 00 00 94 [R]
F00:0317       	bne edblock18
               S01:0000075C:  66 56
F00:0318       ctb16: ;Main true block ;keep 
F00:0319       	; setcopperlist32
F00:0320       	move.l Graphics_pa,a1
               S01:0000075E:  22 7A F9 30
F00:0321       	move.l a1,d0
               S01:00000762:  20 09
F00:0322       	move.l #copper_bitplane0,a0
               S01:00000764:  41 F9 00 00 00 E8 [R]
F00:0323       	move.w d0,6(a0)
               S01:0000076A:  31 40 00 06
F00:0324       	swap d0
               S01:0000076E:  48 40
F00:0325       	move.w d0,2(a0)
               S01:00000770:  31 40 00 02
F00:0326       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000774:  06 B9 00 00 28 00 00 00 00 90 [R]
F00:0327       	; setcopperlist32
F00:0328       	move.l Graphics_pa,a1
               S01:0000077E:  22 7A F9 10
F00:0329       	move.l a1,d0
               S01:00000782:  20 09
F00:0330       	move.l #copper_bitplane1,a0
               S01:00000784:  41 F9 00 00 00 F0 [R]
F00:0331       	move.w d0,6(a0)
               S01:0000078A:  31 40 00 06
F00:0332       	swap d0
               S01:0000078E:  48 40
F00:0333       	move.w d0,2(a0)
               S01:00000790:  31 40 00 02
F00:0334       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000794:  06 B9 00 00 28 00 00 00 00 90 [R]
F00:0335       	; setcopperlist32
F00:0336       	move.l Graphics_pa,a1
               S01:0000079E:  22 7A F8 F0
F00:0337       	move.l a1,d0
               S01:000007A2:  20 09
F00:0338       	move.l #copper_bitplane2,a0
               S01:000007A4:  41 F9 00 00 00 F8 [R]
F00:0339       	move.w d0,6(a0)
               S01:000007AA:  31 40 00 06
F00:0340       	swap d0
               S01:000007AE:  48 40
F00:0341       	move.w d0,2(a0)
               S01:000007B0:  31 40 00 02
F00:0342       edblock18
F00:0343       	cmp.w #$2,Graphics_bpl
               S01:000007B4:  0C 79 00 02 00 00 00 94 [R]
F00:0344       	bne edblock24
               S01:000007BC:  66 36
F00:0345       ctb22: ;Main true block ;keep 
F00:0346       	; setcopperlist32
F00:0347       	move.l Graphics_pa,a1
               S01:000007BE:  22 7A F8 D0
F00:0348       	move.l a1,d0
               S01:000007C2:  20 09
F00:0349       	move.l #copper_bitplane0,a0
               S01:000007C4:  41 F9 00 00 00 E8 [R]
F00:0350       	move.w d0,6(a0)
               S01:000007CA:  31 40 00 06
F00:0351       	swap d0
               S01:000007CE:  48 40
F00:0352       	move.w d0,2(a0)
               S01:000007D0:  31 40 00 02
F00:0353       	add.l #$2800,Graphics_pa ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000007D4:  06 B9 00 00 28 00 00 00 00 90 [R]
F00:0354       	; setcopperlist32
F00:0355       	move.l Graphics_pa,a1
               S01:000007DE:  22 7A F8 B0
F00:0356       	move.l a1,d0
               S01:000007E2:  20 09
F00:0357       	move.l #copper_bitplane1,a0
               S01:000007E4:  41 F9 00 00 00 F0 [R]
F00:0358       	move.w d0,6(a0)
               S01:000007EA:  31 40 00 06
F00:0359       	swap d0
               S01:000007EE:  48 40
F00:0360       	move.w d0,2(a0)
               S01:000007F0:  31 40 00 02
F00:0361       edblock24
F00:0362       	cmp.w #$1,Graphics_bpl
               S01:000007F4:  0C 79 00 01 00 00 00 94 [R]
F00:0363       	bne edblock30
               S01:000007FC:  66 16
F00:0364       ctb28: ;Main true block ;keep 
F00:0365       	; setcopperlist32
F00:0366       	move.l Graphics_pa,a1
               S01:000007FE:  22 7A F8 90
F00:0367       	move.l a1,d0
               S01:00000802:  20 09
F00:0368       	move.l #copper_bitplane0,a0
               S01:00000804:  41 F9 00 00 00 E8 [R]
F00:0369       	move.w d0,6(a0)
               S01:0000080A:  31 40 00 06
F00:0370       	swap d0
               S01:0000080E:  48 40
F00:0371       	move.w d0,2(a0)
               S01:00000810:  31 40 00 02
F00:0372       edblock30
F00:0373       	rts
               S01:00000814:  4E 75
F00:0374       	; ***********  Defining procedure : LSP_CIAStart
F00:0375       	;    Procedure type : User-defined procedure
F00:0376       	jmp block33
               S01:00000816:  60 0C
F00:0377       cs_music	dc.l	0
               S01:00000818:  00 00 00 00
F00:0378       cs_bank	dc.l	0
               S01:0000081C:  00 00 00 00
F00:0379       cs_vbr	dc.w	0
               S01:00000820:  00 00
F00:0380       cs_palntsc	dc.w	0
               S01:00000822:  00 00
F00:0381       	 	CNOP 0,4
F00:0382       block33
F00:0383       LSP_CIAStart
F00:0384       		; Init LSP and start replay using easy CIA toolbox
F00:0385       			move.l	cs_music,a0
               S01:00000824:  20 7A FF F2
F00:0386       			move.l	cs_bank,a1
               S01:00000828:  22 7A FF F2
F00:0387       			suba.l	a2,a2			
               S01:0000082C:  95 CA
F00:0388       			move.w	cs_vbr,a2			; VBR
               S01:0000082E:  34 7A FF F0
F00:0389       			moveq	#0,d0			
               S01:00000832:  70 00
F00:0390       			move.w  cs_palntsc,d0		; PALNTSC
               S01:00000834:  30 3A FF EC
F00:0391       			bsr		LSP_MusicDriver_CIA_Start
               S01:00000838:  61 0C
F00:0392       			move.w	#$e000,$dff09a
               S01:0000083A:  33 FC E0 00 00 DF F0 9A
F00:0393       			bra.w   lspend
               S01:00000842:  60 00 03 7E
F00:0394       			
F00:0395       LSP_MusicDriver_CIA_Start:
F00:0396       			move.w	d0,-(a7)
               S01:00000846:  3F 00
F00:0397       			lea		.irqVector(pc),a3
               S01:00000848:  47 FA 00 28
F00:0398       			lea		$78(a2),a2
               S01:0000084C:  45 EA 00 78
F00:0399       			move.l	a2,(a3)
               S01:00000850:  26 8A
F00:0400       			lea		.LSPDmaCon+1(pc),a2		; DMACON byte patch address
               S01:00000852:  45 FA 00 1D
F00:0401       			bsr		LSP_MusicInit			; init the LSP player ( whatever fast or insane version )
               S01:00000856:  61 00 01 4A
F00:0402       			lea		.pMusicBPM(pc),a2
               S01:0000085A:  45 FA 00 20
F00:0403       			move.l	a0,(a2)					; store music BPM pointer
               S01:0000085E:  24 88
F00:0404       			move.w	(a0),d0					; start BPM
               S01:00000860:  30 10
F00:0405       			lea		.curBpm(pc),a2
               S01:00000862:  45 FA 00 16
F00:0406       			move.w	d0,(a2)
               S01:00000866:  34 80
F00:0407       			moveq	#1,d1
               S01:00000868:  72 01
F00:0408       			and.w	(a7)+,d1
               S01:0000086A:  C2 5F
F00:0409       			bsr.s	.LSP_IrqInstall
               S01:0000086C:  61 12
F00:0410       			rts
               S01:0000086E:  4E 75
F00:0411       .LSPDmaCon:	dc.w	$8000
               S01:00000870:  80 00
F00:0412       .irqVector:	dc.l	0
               S01:00000872:  00 00 00 00
F00:0413       .ciaClock:	dc.l	0
               S01:00000876:  00 00 00 00
F00:0414       .curBpm:	dc.w	0
               S01:0000087A:  00 00
F00:0415       .pMusicBPM:	dc.l	0
               S01:0000087C:  00 00 00 00
F00:0416       ; d0: music BPM
F00:0417       ; d1: PAL(0) or NTSC(1)
F00:0418       .LSP_IrqInstall:
F00:0419       			move.w 	#(1<<13),$dff09a		; disable CIA interrupt
               S01:00000880:  33 FC 20 00 00 DF F0 9A
F00:0420       			lea		.LSP_MainIrq(pc),a0
               S01:00000888:  41 FA 00 6A
F00:0421       			move.l	.irqVector(pc),a5
               S01:0000088C:  2A 7A FF E4
F00:0422       			move.l	a0,(a5)
               S01:00000890:  2A 88
F00:0423       			lea		$bfd000,a0
               S01:00000892:  41 F9 00 BF D0 00
F00:0424       			move.b 	#$7f,$d00(a0)
               S01:00000898:  11 7C 00 7F 0D 00
F00:0425       			move.b 	#$10,$e00(a0)
               S01:0000089E:  11 7C 00 10 0E 00
F00:0426       			move.b 	#$10,$f00(a0)
               S01:000008A4:  11 7C 00 10 0F 00
F00:0427       			lsl.w	#2,d1
               S01:000008AA:  E5 49
F00:0428       			move.l	.palClocks(pc,d1.w),d1				; PAL or NTSC clock
               S01:000008AC:  22 3B 10 3E
F00:0429       			lea		.ciaClock(pc),a5
               S01:000008B0:  4B FA FF C4
F00:0430       			move.l	d1,(a5)
               S01:000008B4:  2A 81
F00:0431       			divu.w	d0,d1
               S01:000008B6:  82 C0
F00:0432       			move.b	d1,$400(a0)
               S01:000008B8:  11 41 04 00
F00:0433       			lsr.w 	#8,d1
               S01:000008BC:  E0 49
F00:0434       			move.b	d1,$500(a0)
               S01:000008BE:  11 41 05 00
F00:0435       			move.b	#$83,$d00(a0)
               S01:000008C2:  11 7C 00 83 0D 00
F00:0436       			move.b	#$11,$e00(a0)
               S01:000008C8:  11 7C 00 11 0E 00
F00:0437       			
F00:0438       			move.b	#496&255,$600(a0)		; set timer b to 496 ( to set DMACON )
               S01:000008CE:  11 7C 00 F0 06 00
F00:0439       			move.b	#496>>8,$700(a0)
               S01:000008D4:  11 7C 00 01 07 00
F00:0440       			move.w 	#(1<<13),$dff09c		; clear any req CIA
               S01:000008DA:  33 FC 20 00 00 DF F0 9C
F00:0441       			move.w 	#$a000,$dff09a			; CIA interrupt enabled
               S01:000008E2:  33 FC A0 00 00 DF F0 9A
F00:0442       			rts
               S01:000008EA:  4E 75
F00:0443       		
F00:0444       .palClocks:	dc.l	1773447,1789773
               S01:000008EC:  00 1B 0F 87
               S01:000008F0:  00 1B 4F 4D
F00:0445       .LSP_MainIrq:
F00:0446       			btst.b	#0,$bfdd00
               S01:000008F4:  08 39 00 00 00 BF DD 00
F00:0447       			beq.s	.skipa
               S01:000008FC:  67 4A
F00:0448       			
F00:0449       			movem.l	d0-a6,-(a7)
               S01:000008FE:  48 E7 FF FE
F00:0450       		; call player tick
F00:0451       			lea		$dff0a0,a6
               S01:00000902:  4D F9 00 DF F0 A0
F00:0452       			bsr		LSP_MusicPlayTick		; LSP main music driver tick
               S01:00000908:  61 00 01 60
F00:0453       		; check if BMP changed in the middle of the music
F00:0454       			move.l	.pMusicBPM(pc),a0
               S01:0000090C:  20 7A FF 6E
F00:0455       			move.w	(a0),d0					; current music BPM
               S01:00000910:  30 10
F00:0456       			cmp.w	.curBpm(pc),d0
               S01:00000912:  B0 7A FF 66
F00:0457       			beq.s	.noChg
               S01:00000916:  67 1A
F00:0458       			lea		.curBpm(pc),a2			
               S01:00000918:  45 FA FF 60
F00:0459       			move.w	d0,(a2)					; current BPM
               S01:0000091C:  34 80
F00:0460       			move.l	.ciaClock(pc),d1
               S01:0000091E:  22 3A FF 56
F00:0461       			divu.w	d0,d1
               S01:00000922:  82 C0
F00:0462       			move.b	d1,$bfd400
               S01:00000924:  13 C1 00 BF D4 00
F00:0463       			lsr.w 	#8,d1
               S01:0000092A:  E0 49
F00:0464       			move.b	d1,$bfd500			
               S01:0000092C:  13 C1 00 BF D5 00
F00:0465       .noChg:		lea		.LSP_DmaconIrq(pc),a0
               S01:00000932:  41 FA 00 20
F00:0466       			move.l	.irqVector(pc),a1
               S01:00000936:  22 7A FF 3A
F00:0467       			move.l	a0,(a1)
               S01:0000093A:  22 88
F00:0468       			move.b	#$19,$bfdf00			; start timerB, one shot
               S01:0000093C:  13 FC 00 19 00 BF DF 00
F00:0469       			movem.l	(a7)+,d0-a6
               S01:00000944:  4C DF 7F FF
F00:0470       .skipa:		move.w	#$2000,$dff09c
               S01:00000948:  33 FC 20 00 00 DF F0 9C
F00:0471       			nop
               S01:00000950:  4E 71
F00:0472       			rte
               S01:00000952:  4E 73
F00:0473       .LSP_DmaconIrq:
F00:0474       			btst.b	#1,$bfdd00
               S01:00000954:  08 39 00 01 00 BF DD 00
F00:0475       			beq.s	.skipb
               S01:0000095C:  67 16
F00:0476       			move.w	.LSPDmaCon(pc),$dff096
               S01:0000095E:  33 FA FF 10 00 DF F0 96
F00:0477       			pea		(a0)
               S01:00000966:  48 50
F00:0478       			move.l	.irqVector(pc),a0
               S01:00000968:  20 7A FF 08
F00:0479       			pea		.LSP_MainIrq(pc)
               S01:0000096C:  48 7A FF 86
F00:0480       			move.l	(a7)+,(a0)
               S01:00000970:  20 9F
F00:0481       			move.l	(a7)+,a0
               S01:00000972:  20 5F
F00:0482       .skipb:		move.w	#$2000,$dff09c
               S01:00000974:  33 FC 20 00 00 DF F0 9C
F00:0483       			nop
               S01:0000097C:  4E 71
F00:0484       			rte
               S01:0000097E:  4E 73
F00:0485       LSP_MusicDriver_CIA_Stop:
F00:0486       			move.b	#$7f,$bfdd00
               S01:00000980:  13 FC 00 7F 00 BF DD 00
F00:0487       			move.w	#$2000,$dff09a
               S01:00000988:  33 FC 20 00 00 DF F0 9A
F00:0488       			move.w	#$2000,$dff09c
               S01:00000990:  33 FC 20 00 00 DF F0 9C
F00:0489       			move.w	#$000f,$dff096
               S01:00000998:  33 FC 00 0F 00 DF F0 96
F00:0490       			rts
               S01:000009A0:  4E 75
F00:0491       			
F00:0492       LSP_MusicInit:
F00:0493       			cmpi.l	#'LSP1',(a0)+
               S01:000009A2:  0C 98 4C 53 50 31
F00:0494       			bne		.dataError
               S01:000009A8:  66 00 00 BE
F00:0495       			move.l	(a0)+,d0		; unique id
               S01:000009AC:  20 18
F00:0496       			cmp.l	(a1),d0			; check sample bank matches the lsmusic file
               S01:000009AE:  B0 91
F00:0497       			bne		.dataError
               S01:000009B0:  66 00 00 B6
F00:0498       			lea		LSP_State(pc),a3
               S01:000009B4:  47 FA 01 DE
F00:0499       			move.l	a2,m_dmaconPatch(a3)
               S01:000009B8:  27 4A 00 08
F00:0500       			move.w	#$8000,-1(a2)			; Be sure DMACon word is $8000 (note: a2 should be ODD address)
               S01:000009BC:  35 7C 80 00 FF FF
F00:0501       			cmpi.w	#$010b,(a0)+			; this play routine supports v1.11 as minimal version of LPConvert.exe
               S01:000009C2:  0C 58 01 0B
F00:0502       			blt		.dataError
               S01:000009C6:  6D 00 00 A0
F00:0503       			movea.l	a0,a4					; relocation flag ad
               S01:000009CA:  28 48
F00:0504       			addq.w	#2,a0					; skip relocation flag
               S01:000009CC:  54 48
F00:0505       			move.w	(a0)+,m_currentBpm(a3)	; default BPM
               S01:000009CE:  37 58 00 1A
F00:0506       			move.w	(a0)+,m_escCodeRewind(a3)
               S01:000009D2:  37 58 00 10
F00:0507       			move.w	(a0)+,m_escCodeSetBpm(a3)
               S01:000009D6:  37 58 00 12
F00:0508       			move.w	(a0)+,m_escCodeGetPos(a3)
               S01:000009DA:  37 58 00 2C
F00:0509       			move.l	(a0)+,-(a7)				; music len in frame ticks
               S01:000009DE:  2F 18
F00:0510       			move.w	(a0)+,d0				; instrument count
               S01:000009E0:  30 18
F00:0511       			lea		-12(a0),a2				; LSP data has -12 offset on instrument tab ( to win 2 cycles in insane player :) )
               S01:000009E2:  45 E8 FF F4
F00:0512       			move.l	a2,m_lspInstruments(a3)	; instrument tab addr ( minus 4 )
               S01:000009E6:  27 4A 00 14
F00:0513       			subq.w	#1,d0
               S01:000009EA:  53 40
F00:0514       			move.l	a1,d1
               S01:000009EC:  22 09
F00:0515       			movea.l	a0,a1					; keep relocated flag
               S01:000009EE:  22 48
F00:0516       .relocLoop:	tst.b	(a4)					; relocation guard
               S01:000009F0:  4A 14
F00:0517       			bne.s	.relocated
               S01:000009F2:  66 06
F00:0518       			add.l	d1,(a0)
               S01:000009F4:  D3 90
F00:0519       			add.l	d1,6(a0)
               S01:000009F6:  D3 A8 00 06
F00:0520       .relocated:	lea		12(a0),a0
               S01:000009FA:  41 E8 00 0C
F00:0521       			dbf		d0,.relocLoop
               S01:000009FE:  51 C8 FF F0
F00:0522       			move.w	(a0)+,d0				; codes table size
               S01:00000A02:  30 18
F00:0523       			move.l	a0,m_codeTableAddr(a3)	; code table
               S01:00000A04:  27 48 00 0C
F00:0524       			add.w	d0,d0
               S01:00000A08:  D0 40
F00:0525       			add.w	d0,a0
               S01:00000A0A:  D0 C0
F00:0526       		; read sequence timing infos (if any)
F00:0527       			move.w	(a0)+,m_seqCount(a3)
               S01:00000A0C:  37 58 00 24
F00:0528       			beq.s	.noSeq
               S01:00000A10:  67 2A
F00:0529       			move.l	a0,m_seqTable(a3)
               S01:00000A12:  27 48 00 26
F00:0530       			clr.w	m_currentSeq(a3)
               S01:00000A16:  42 6B 00 2A
F00:0531       			move.w	m_seqCount(a3),d0
               S01:00000A1A:  30 2B 00 24
F00:0532       			moveq	#0,d1
               S01:00000A1E:  72 00
F00:0533       			move.w	d0,d1
               S01:00000A20:  32 00
F00:0534       			lsl.w	#3,d1			; 8 bytes per entry
               S01:00000A22:  E7 49
F00:0535       			add.w	#12,d1			; add 3 last 32bits (word stream size, byte stream loop, word stream loop)
               S01:00000A24:  D2 7C 00 0C
F00:0536       			add.l	a0,d1			; word stream data address
               S01:00000A28:  D2 88
F00:0537       			subq.w	#1,d0
               S01:00000A2A:  53 40
F00:0538       .seqRel:	tst.b	(a4)
               S01:00000A2C:  4A 14
F00:0539       			bne.s	.skipRel
               S01:00000A2E:  66 06
F00:0540       			add.l	d1,(a0)
               S01:00000A30:  D3 90
F00:0541       			add.l	d1,4(a0)
               S01:00000A32:  D3 A8 00 04
F00:0542       .skipRel:	addq.w	#8,a0
               S01:00000A36:  50 48
F00:0543       			dbf		d0,.seqRel
               S01:00000A38:  51 C8 FF F2
F00:0544       .noSeq:		movem.l	(a0)+,d0-d2				; word stream size, byte stream loop point, word stream loop point
               S01:00000A3C:  4C D8 00 07
F00:0545       			st		(a4)					
               S01:00000A40:  50 D4
F00:0546       			move.l	a0,m_wordStream(a3)
               S01:00000A42:  27 48 00 04
F00:0547       			lea		0(a0,d0.l),a1			; byte stream
               S01:00000A46:  43 F0 08 00
F00:0548       			move.l	a1,m_byteStream(a3)
               S01:00000A4A:  26 89
F00:0549       			add.l	d2,a0
               S01:00000A4C:  D1 C2
F00:0550       			add.l	d1,a1
               S01:00000A4E:  D3 C1
F00:0551       			move.l	a0,m_wordStreamLoop(a3)
               S01:00000A50:  27 48 00 20
F00:0552       			move.l	a1,m_byteStreamLoop(a3)
               S01:00000A54:  27 49 00 1C
F00:0553       			bset.b	#1,$bfe001				; disabling this fucking Low pass filter!!
               S01:00000A58:  08 F9 00 01 00 BF E0 01
F00:0554       			lea		m_currentBpm(a3),a0
               S01:00000A60:  41 EB 00 1A
F00:0555       			move.l	(a7)+,d0				; music len in frame ticks
               S01:00000A64:  20 1F
F00:0556       			rts
               S01:00000A66:  4E 75
F00:0557       .dataError:	illegal
               S01:00000A68:  4A FC
F00:0558       ;------------------------------------------------------------------
F00:0559       ;
F00:0560       ;	LSP_MusicPlayTick
F00:0561       ;
F00:0562       ;		In:	a6: should be $dff0a0
F00:0563       ;			Scratched regs: d0/d1/d2/a0/a1/a2/a3/a4/a5
F00:0564       ;		Out:None
F00:0565       ;
F00:0566       ;------------------------------------------------------------------
F00:0567       LSP_MusicPlayTick:
F00:0568       			lea		LSP_State(pc),a1
               S01:00000A6A:  43 FA 01 28
F00:0569       			move.l	(a1),a0					; byte stream
               S01:00000A6E:  20 51
F00:0570       			move.l	m_codeTableAddr(a1),a2	; code table
               S01:00000A70:  24 69 00 0C
F00:0571       .process:	moveq	#0,d0
               S01:00000A74:  70 00
F00:0572       .cloop:		move.b	(a0)+,d0
               S01:00000A76:  10 18
F00:0573       			beq		.cextended
               S01:00000A78:  67 00 00 A2
F00:0574       			add.w	d0,d0
               S01:00000A7C:  D0 40
F00:0575       			move.w	0(a2,d0.w),d0			; code
               S01:00000A7E:  30 32 00 00
F00:0576       			beq		.noInst
               S01:00000A82:  67 00 00 94
F00:0577       .cmdExec:	add.b	d0,d0
               S01:00000A86:  D0 00
F00:0578       			bcc.s	.noVd
               S01:00000A88:  64 04
F00:0579       			move.b	(a0)+,$d9-$a0(a6)
               S01:00000A8A:  1D 58 00 39
F00:0580       .noVd:		add.b	d0,d0
               S01:00000A8E:  D0 00
F00:0581       			bcc.s	.noVc
               S01:00000A90:  64 04
F00:0582       			move.b	(a0)+,$c9-$a0(a6)
               S01:00000A92:  1D 58 00 29
F00:0583       .noVc:		add.b	d0,d0
               S01:00000A96:  D0 00
F00:0584       			bcc.s	.noVb
               S01:00000A98:  64 04
F00:0585       			move.b	(a0)+,$b9-$a0(a6)
               S01:00000A9A:  1D 58 00 19
F00:0586       .noVb:		add.b	d0,d0
               S01:00000A9E:  D0 00
F00:0587       			bcc.s	.noVa
               S01:00000AA0:  64 04
F00:0588       			move.b	(a0)+,$a9-$a0(a6)
               S01:00000AA2:  1D 58 00 09
F00:0589       .noVa:		
F00:0590       			move.l	a0,(a1)+	; store byte stream ptr
               S01:00000AA6:  22 C8
F00:0591       			move.l	(a1),a0		; word stream
               S01:00000AA8:  20 51
F00:0592       			tst.b	d0
               S01:00000AAA:  4A 00
F00:0593       			beq.s	.noPa
               S01:00000AAC:  67 20
F00:0594       			add.b	d0,d0
               S01:00000AAE:  D0 00
F00:0595       			bcc.s	.noPd
               S01:00000AB0:  64 04
F00:0596       			move.w	(a0)+,$d6-$a0(a6)
               S01:00000AB2:  3D 58 00 36
F00:0597       .noPd:		add.b	d0,d0
               S01:00000AB6:  D0 00
F00:0598       			bcc.s	.noPc
               S01:00000AB8:  64 04
F00:0599       			move.w	(a0)+,$c6-$a0(a6)
               S01:00000ABA:  3D 58 00 26
F00:0600       .noPc:		add.b	d0,d0
               S01:00000ABE:  D0 00
F00:0601       			bcc.s	.noPb
               S01:00000AC0:  64 04
F00:0602       			move.w	(a0)+,$b6-$a0(a6)
               S01:00000AC2:  3D 58 00 16
F00:0603       .noPb:		add.b	d0,d0
               S01:00000AC6:  D0 00
F00:0604       			bcc.s	.noPa
               S01:00000AC8:  64 04
F00:0605       			move.w	(a0)+,$a6-$a0(a6)
               S01:00000ACA:  3D 58 00 06
F00:0606       .noPa:		
F00:0607       			tst.w	d0
               S01:00000ACE:  4A 40
F00:0608       			beq.s	.noInst
               S01:00000AD0:  67 46
F00:0609       			moveq	#0,d1
               S01:00000AD2:  72 00
F00:0610       			move.l	m_lspInstruments-4(a1),a2	; instrument table
               S01:00000AD4:  24 69 00 10
F00:0611       			lea		.resetv+12(pc),a4
               S01:00000AD8:  49 FA 00 8E
F00:0612       			lea		3*16(a6),a5
               S01:00000ADC:  4B EE 00 30
F00:0613       			moveq	#4-1,d2
               S01:00000AE0:  74 03
F00:0614       .vloop:		add.w	d0,d0
               S01:00000AE2:  D0 40
F00:0615       			bcs.s	.setIns
               S01:00000AE4:  65 0E
F00:0616       			add.w	d0,d0
               S01:00000AE6:  D0 40
F00:0617       			bcc.s	.skip
               S01:00000AE8:  64 1E
F00:0618       			move.l	(a4),a3
               S01:00000AEA:  26 54
F00:0619       			move.l	(a3)+,(a5)
               S01:00000AEC:  2A 9B
F00:0620       			move.w	(a3)+,4(a5)
               S01:00000AEE:  3B 5B 00 04
F00:0621       			bra.s	.skip
               S01:00000AF2:  60 14
F00:0622       .setIns:	add.w	(a0)+,a2
               S01:00000AF4:  D4 D8
F00:0623       			add.w	d0,d0
               S01:00000AF6:  D0 40
F00:0624       			bcc.s	.noReset
               S01:00000AF8:  64 06
F00:0625       			bset	d2,d1
               S01:00000AFA:  05 C1
F00:0626       			move.w	d1,$96-$a0(a6)
               S01:00000AFC:  3D 41 FF F6
F00:0627       .noReset:	move.l	(a2)+,(a5)
               S01:00000B00:  2A 9A
F00:0628       			move.w	(a2)+,4(a5)
               S01:00000B02:  3B 5A 00 04
F00:0629       			move.l	a2,(a4)
               S01:00000B06:  28 8A
F00:0630       .skip:		subq.w	#4,a4
               S01:00000B08:  59 4C
F00:0631       			lea		-16(a5),a5
               S01:00000B0A:  4B ED FF F0
F00:0632       			dbf		d2,.vloop
               S01:00000B0E:  51 CA FF D2
F00:0633       			move.l	m_dmaconPatch-4(a1),a3		; dmacon patch
               S01:00000B12:  26 69 00 04
F00:0634       			move.b	d1,(a3)						; dmacon			
               S01:00000B16:  16 81
F00:0635       .noInst:	move.l	a0,(a1)			; store word stream (or byte stream if coming from early out)
               S01:00000B18:  22 88
F00:0636       			rts
               S01:00000B1A:  4E 75
F00:0637       .cextended:	addi.w	#$100,d0
               S01:00000B1C:  06 40 01 00
F00:0638       			move.b	(a0)+,d0
               S01:00000B20:  10 18
F00:0639       			beq.s	.cextended
               S01:00000B22:  67 F8
F00:0640       			add.w	d0,d0
               S01:00000B24:  D0 40
F00:0641       			move.w	0(a2,d0.w),d0			; code
               S01:00000B26:  30 32 00 00
F00:0642       			cmp.w	m_escCodeRewind(a1),d0
               S01:00000B2A:  B0 69 00 10
F00:0643       			beq.s	.r_rewind
               S01:00000B2E:  67 16
F00:0644       			cmp.w	m_escCodeSetBpm(a1),d0
               S01:00000B30:  B0 69 00 12
F00:0645       			beq.s	.r_chgbpm
               S01:00000B34:  67 1E
F00:0646       			cmp.w	m_escCodeGetPos(a1),d0
               S01:00000B36:  B0 69 00 2C
F00:0647       			bne		.cmdExec
               S01:00000B3A:  66 00 FF 4A
F00:0648       .r_setPos:	move.b	(a0)+,(m_currentSeq+1)(a1)
               S01:00000B3E:  13 58 00 2B
F00:0649       			bra		.process
               S01:00000B42:  60 00 FF 30
F00:0650       .r_rewind:	
F00:0651       			move.l	m_byteStreamLoop(a1),a0
               S01:00000B46:  20 69 00 1C
F00:0652       			move.l	m_wordStreamLoop(a1),m_wordStream(a1)
               S01:00000B4A:  23 69 00 20 00 04
F00:0653       			bra		.process
               S01:00000B50:  60 00 FF 22
F00:0654       .r_chgbpm:	move.b	(a0)+,(m_currentBpm+1)(a1)	; BPM
               S01:00000B54:  13 58 00 1B
F00:0655       			bra		.process
               S01:00000B58:  60 00 FF 1A
F00:0656       .resetv:	dc.l	0,0,0,0
               S01:00000B5C:  00 00 00 00
               S01:00000B60:  00 00 00 00
               S01:00000B64:  00 00 00 00
               S01:00000B68:  00 00 00 00
F00:0657       ;------------------------------------------------------------------
F00:0658       ;
F00:0659       ;	LSP_MusicSetPos
F00:0660       ;
F00:0661       ;		In: d0: seq position (from 0 to last seq of the song)
F00:0662       ;		Out:None
F00:0663       ;
F00:0664       ;	Force the replay pointer to a seq position. If music wasn't converted
F00:0665       ;	using -setpos option, this func does nothing
F00:0666       ;
F00:0667       ;------------------------------------------------------------------
F00:0668       LSP_MusicSetPos:
F00:0669       			lea		LSP_State(pc),a3
               S01:00000B6C:  47 FA 00 26
F00:0670       			move.w	m_seqCount(a3),d1
               S01:00000B70:  32 2B 00 24
F00:0671       			beq.s	.noTimingInfo
               S01:00000B74:  67 16
F00:0672       			cmp.w	d1,d0
               S01:00000B76:  B0 41
F00:0673       			bge.s	.noTimingInfo
               S01:00000B78:  6C 12
F00:0674       			move.w	d0,m_currentSeq(a3)
               S01:00000B7A:  37 40 00 2A
F00:0675       			move.l	m_seqTable(a3),a0
               S01:00000B7E:  20 6B 00 26
F00:0676       			lsl.w	#3,d0
               S01:00000B82:  E7 48
F00:0677       			add.w	d0,a0
               S01:00000B84:  D0 C0
F00:0678       			move.l	(a0)+,m_wordStream(a3)
               S01:00000B86:  27 58 00 04
F00:0679       			move.l	(a0)+,m_byteStream(a3)
               S01:00000B8A:  26 98
F00:0680       .noTimingInfo:
F00:0681       			rts
               S01:00000B8C:  4E 75
F00:0682       ;------------------------------------------------------------------
F00:0683       ;
F00:0684       ;	LSP_MusicGetPos
F00:0685       ;
F00:0686       ;		In: None
F00:0687       ;		Out: d0:  seq position (from 0 to last seq of the song)
F00:0688       ;
F00:0689       ;	Get the current seq position. If music wasn't converted with
F00:0690       ;	-getpos option, this func just returns 0
F00:0691       ;
F00:0692       ;------------------------------------------------------------------
F00:0693       LSP_MusicGetPos:			
F00:0694       			move.w	(LSP_State+m_currentSeq)(pc),d0
               S01:00000B8E:  30 3A 00 2E
F00:0695       			rts
               S01:00000B92:  4E 75
F00:0696       	rsreset
F00:0697       	
F00:0698       m_byteStream:		rs.l	1	;  0 byte stream
F00:0699       m_wordStream:		rs.l	1	;  4 word stream
F00:0700       m_dmaconPatch:		rs.l	1	;  8 m_lfmDmaConPatch
F00:0701       m_codeTableAddr:	rs.l	1	; 12 code table addr
F00:0702       m_escCodeRewind:	rs.w	1	; 16 rewind special escape code
F00:0703       m_escCodeSetBpm:	rs.w	1	; 18 set BPM escape code
F00:0704       m_lspInstruments:	rs.l	1	; 20 LSP instruments table addr
F00:0705       m_relocDone:		rs.w	1	; 24 reloc done flag
F00:0706       m_currentBpm:		rs.w	1	; 26 current BPM
F00:0707       m_byteStreamLoop:	rs.l	1	; 28 byte stream loop point
F00:0708       m_wordStreamLoop:	rs.l	1	; 32 word stream loop point
F00:0709       m_seqCount:			rs.w	1
F00:0710       m_seqTable:			rs.l	1
F00:0711       m_currentSeq:		rs.w	1
F00:0712       m_escCodeGetPos:	rs.w	1
F00:0713       sizeof_LSPVars:		rs.w	0
F00:0714       LSP_State:			ds.b	sizeof_LSPVars		
F00:0715       lspend:	
F00:0716       	
F00:0717       	rts
               S01:00000BC2:  4E 75
F00:0718       	; ***********  Defining procedure : CookieCut
F00:0719       	;    Procedure type : User-defined procedure
F00:0720       	jmp block34
               S01:00000BC4:  60 0E
F00:0721       cc_src	dc.l	0
               S01:00000BC6:  00 00 00 00
F00:0722       cc_dst	dc.l	0
               S01:00000BCA:  00 00 00 00
F00:0723       cc_mask	dc.l	0
               S01:00000BCE:  00 00 00 00
F00:0724       cc_size	dc.w	0
               S01:00000BD2:  00 00
F00:0725       	 	CNOP 0,4
F00:0726       block34
F00:0727       CookieCut
F00:0728       waitforblitter35
F00:0729       	btst	#14,DMACONR
               S01:00000BD4:  08 39 00 0E 00 DF F0 02
F00:0730       	bne.s	waitforblitter35
               S01:00000BDC:  66 F6
F00:0731       	; Poke command
F00:0732       	move.l #$DFF000,a0
               S01:00000BDE:  20 7C 00 DF F0 00
F00:0733       	add.w #$50,a0; cc_mask
               S01:00000BE4:  41 E8 00 50
F00:0734       	move.l cc_mask,(a0)
               S01:00000BE8:  20 BA FF E4
F00:0735       	
F00:0736       ; //BLTAPT
F00:0737       	; Poke command
F00:0738       	move.l #$DFF000,a0
               S01:00000BEC:  20 7C 00 DF F0 00
F00:0739       	add.w #$4c,a0; cc_src
               S01:00000BF2:  41 E8 00 4C
F00:0740       	move.l cc_src,(a0)
               S01:00000BF6:  20 BA FF CE
F00:0741       	
F00:0742       ; //BLTBPT
F00:0743       	; Poke command
F00:0744       	move.l #$DFF000,a0
               S01:00000BFA:  20 7C 00 DF F0 00
F00:0745       	add.w #$48,a0; cc_dst
               S01:00000C00:  41 E8 00 48
F00:0746       	move.l cc_dst,(a0)
               S01:00000C04:  20 BA FF C4
F00:0747       	
F00:0748       ; //BLTCPT	
F00:0749       	; Poke command
F00:0750       	move.l #$DFF000,a0
               S01:00000C08:  20 7C 00 DF F0 00
F00:0751       	add.w #$54,a0; cc_dst
               S01:00000C0E:  41 E8 00 54
F00:0752       	move.l cc_dst,(a0)
               S01:00000C12:  20 BA FF B6
F00:0753       	
F00:0754       ; //BLTDPT		
F00:0755       	; Poke command
F00:0756       	move.l #$DFF000,a0
               S01:00000C16:  20 7C 00 DF F0 00
F00:0757       	add.w #$40,a0; #$FCA
               S01:00000C1C:  41 E8 00 40
F00:0758       	move.w #$FCA,(a0)
               S01:00000C20:  30 BC 0F CA
F00:0759       	
F00:0760       ; //BLTCON0	
F00:0761       	; Poke command
F00:0762       	move.l #$DFF000,a0
               S01:00000C24:  20 7C 00 DF F0 00
F00:0763       	add.w #$58,a0; cc_size
               S01:00000C2A:  41 E8 00 58
F00:0764       	move.w cc_size,(a0)
               S01:00000C2E:  30 BA FF A2
F00:0765       	rts
               S01:00000C32:  4E 75
F00:0766       	
F00:0767       ; //BLTSIZE*
F00:0768       ; ///All Channels / Cookie Cut
F00:0769       	; ***********  Defining procedure : DistortCopperLine
F00:0770       	;    Procedure type : User-defined procedure
F00:0771       DistortCopperLine
F00:0772       	moveq.l #0,d1
               S01:00000C34:  72 00
F00:0773       	move.w i,d1          ; Loadvar regular end
               S01:00000C36:  32 3A F5 98
F00:0774       	moveq.l #0,d2
               S01:00000C3A:  74 00
F00:0775       	move.w  row,d2 
               S01:00000C3C:  34 3A F9 AC
F00:0776       	; Array is integer, so multiply with 2
F00:0777       	add.w d1,d1
               S01:00000C40:  D2 41
F00:0778       	lea sine4Copper,a0             ; LoadVariable:: is array
               S01:00000C42:  41 FA F5 A6
F00:0779       	move.w (a0,d1),d0             ; LoadVariable:: is array
               S01:00000C46:  30 30 10 00
F00:0780       	; Store variable : current
F00:0781       	lsr.w #$8,d0 ; Optimization: simple A := A op Const MUL DIV SHR etc
               S01:00000C4A:  E0 48
F00:0782       	cmp.w #$1,d0
               S01:00000C4C:  B0 7C 00 01
F00:0783       	bls c_eblock39
               S01:00000C50:  63 20
F00:0784       c_ctb38: ;Main true block ;keep 
F00:0785       	move.l d6,(a5)+
               S01:00000C52:  2A C6
F00:0786       	move.l d5,(a5)+
               S01:00000C54:  2A C5
F00:0787       	cmp.w d7,d2
               S01:00000C56:  B4 47
F00:0788       	bne c_edblock91
               S01:00000C58:  66 02
F00:0789       c_ctb89: ;Main true block ;keep 
F00:0790       	move.l a3,(a5)+
               S01:00000C5A:  2A CB
F00:0791       c_edblock91
F00:0792       	add.w #$100,d2 ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000C5C:  D4 7C 01 00
F00:0793       	move.w d2,(a5)+
               S01:00000C60:  3A C2
F00:0794       	move.w #$fffe,(a5)+
               S01:00000C62:  3A FC FF FE
F00:0795       	move.l d4,(a5)+
               S01:00000C66:  2A C4
F00:0796       	move.l d3,(a5)+
               S01:00000C68:  2A C3
F00:0797       	cmp.w d7,d2
               S01:00000C6A:  B4 47
F00:0798       	bne c_edblock97
               S01:00000C6C:  66 02
F00:0799       c_ctb95: ;Main true block ;keep 
F00:0800       	move.l a3,(a5)+
               S01:00000C6E:  2A CB
F00:0801       c_edblock97
F00:0802       	bra.s c_edblock40
               S01:00000C70:  60 22
F00:0803       c_eblock39
F00:0804       	cmp.w #$0,d0
               S01:00000C72:  4A 40
F00:0805       	bls c_eblock103
               S01:00000C74:  63 14
F00:0806       c_ctb102: ;Main true block ;keep 
F00:0807       	move.l d6,(a5)+
               S01:00000C76:  2A C6
F00:0808       	move.l d5,(a5)+
               S01:00000C78:  2A C5
F00:0809       	cmp.w d7,d2
               S01:00000C7A:  B4 47
F00:0810       	bne c_edblock123
               S01:00000C7C:  66 02
F00:0811       c_ctb121: ;Main true block ;keep 
F00:0812       	move.l a3,(a5)+
               S01:00000C7E:  2A CB
F00:0813       c_edblock123
F00:0814       	move.w #$0,curbplmod ; Simple a:=b optimization 
               S01:00000C80:  33 FC 00 00 00 00 01 DA [R]
F00:0815       	bra.s c_edblock104
               S01:00000C88:  60 0A
F00:0816       c_eblock103
F00:0817       	move.l a6,(a5)+
               S01:00000C8A:  2A CE
F00:0818       	move.l a4,(a5)+
               S01:00000C8C:  2A CC
F00:0819       	cmp.w d7,d2
               S01:00000C8E:  B4 47
F00:0820       	bne c_edblock130
               S01:00000C90:  66 02
F00:0821       c_ctb128: ;Main true block ;keep 
F00:0822       	move.l a3,(a5)+
               S01:00000C92:  2A CB
F00:0823       c_edblock130
F00:0824       c_edblock104
F00:0825       c_edblock40
F00:0826       	cmp.w #$fe,i
               S01:00000C94:  0C 79 00 FE 00 00 01 D0 [R]
F00:0827       	bhs c_eblock135
               S01:00000C9C:  64 08
F00:0828       c_ctb134: ;Main true block ;keep 
F00:0829       	add.w #$1,i ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000C9E:  52 79 00 00 01 D0 [R]
F00:0830       	bra.s c_edblock136
               S01:00000CA4:  60 08
F00:0831       c_eblock135
F00:0832       	move.w #$0,i ; Simple a:=b optimization 
               S01:00000CA6:  33 FC 00 00 00 00 01 D0 [R]
F00:0833       c_edblock136
F00:0834       	move.w d2,row
               S01:00000CAE:  33 C2 00 00 05 EA [R]
F00:0835       	rts
               S01:00000CB4:  4E 75
F00:0836       	
F00:0837       	rts
               S01:00000CB6:  4E 75
F00:0838       	; ***********  Defining procedure : ColorCycle
F00:0839       	;    Procedure type : User-defined procedure
F00:0840       ColorCycle
F00:0841       	move.w #$1,colorcycled ; Simple a:=b optimization 
               S01:00000CB8:  33 FC 00 01 00 00 00 B6 [R]
F00:0842       	move.l	a5,curcopperpos
               S01:00000CC0:  23 CD 00 00 00 B8 [R]
F00:0843       	
F00:0844       	move.w #$1f,d0
               S01:00000CC6:  30 3C 00 1F
F00:0845       	move.l #image_palette_cycled,a0
               S01:00000CCA:  41 FA F4 7C
F00:0846       	move.l curcopperpos,a1
               S01:00000CCE:  22 7A F3 E8
F00:0847       memcpy38
F00:0848       	move.l (a0)+,(a1)+
               S01:00000CD2:  22 D8
F00:0849       	dbf d0,memcpy38
               S01:00000CD4:  51 C8 FF FC
F00:0850       	add.l #128,a5
               S01:00000CD8:  4B ED 00 80
F00:0851       	
F00:0852       	rts
               S01:00000CDC:  4E 75
F00:0853       	; ***********  Defining procedure : ColorCycleRestore
F00:0854       	;    Procedure type : User-defined procedure
F00:0855       ColorCycleRestore
F00:0856       	move.w #$2,colorcycled ; Simple a:=b optimization 
               S01:00000CDE:  33 FC 00 02 00 00 00 B6 [R]
F00:0857       	move.l	a5,curcopperpos
               S01:00000CE6:  23 CD 00 00 00 B8 [R]
F00:0858       	
F00:0859       	move.w #$1f,d0
               S01:00000CEC:  30 3C 00 1F
F00:0860       	move.l #image_palette,a1
               S01:00000CF0:  43 FA F3 D6
F00:0861       	move.l curcopperpos,a0
               S01:00000CF4:  20 7A F3 C2
F00:0862       memcpy40
F00:0863       	move.l (a1)+,(a0)+
               S01:00000CF8:  20 D9
F00:0864       	dbf d0,memcpy40
               S01:00000CFA:  51 C8 FF FC
F00:0865       	add.l #128,a5
               S01:00000CFE:  4B ED 00 80
F00:0866       	
F00:0867       	rts
               S01:00000D02:  4E 75
F00:0868       	; ***********  Defining procedure : CopperEffects
F00:0869       	;    Procedure type : User-defined procedure
F00:0870       CopperEffects
F00:0871       	move.w istart,i ; Simple a:=b optimization 
               S01:00000D04:  33 FA F4 D6 00 00 01 D0 [R]
F00:0872       	move.w #$2c01,row ; Simple a:=b optimization 
               S01:00000D0C:  33 FC 2C 01 00 00 05 EA [R]
F00:0873       		moveq.l #0,d7
               S01:00000D14:  7E 00
F00:0874       		move.w #$ff01,d7	
               S01:00000D16:  3E 3C FF 01
F00:0875       		move.l #$1080000,d6
               S01:00000D1A:  2C 3C 01 08 00 00
F00:0876       		move.l #$10a0000,d5
               S01:00000D20:  2A 3C 01 0A 00 00
F00:0877       		move.l #$108ffd8,d4
               S01:00000D26:  28 3C 01 08 FF D8
F00:0878       		move.l #$10affd8,d3
               S01:00000D2C:  26 3C 01 0A FF D8
F00:0879       		move.l #$1080028,a6
               S01:00000D32:  2C 7C 01 08 00 28
F00:0880       		move.l #$10a0028,a4
               S01:00000D38:  28 7C 01 0A 00 28
F00:0881       		move.l #$ffdffffe,a3
               S01:00000D3E:  26 7C FF DF FF FE
F00:0882       	
F00:0883       	lea copper_custom,a5
               S01:00000D44:  4B F9 00 00 01 1C [R]
F00:0884       while42
F00:0885       loopstart46
F00:0886       	move.w lightypos,d1          ; Loadvar regular end
               S01:00000D4A:  32 3A F3 70
F00:0887       	move.w row,d0
               S01:00000D4E:  30 3A F8 9A
F00:0888       	cmp.w d1,d0
               S01:00000D52:  B0 41
F00:0889       	bhi edblock45
               S01:00000D54:  62 1E
F00:0890       ctb43: ;Main true block ;keep 
F00:0891       	move.w row,(a5)+
               S01:00000D56:  3A FA F8 92
F00:0892       	move.w #$fffe,(a5)+
               S01:00000D5A:  3A FC FF FE
F00:0893       	cmp.w #$0,beerinput
               S01:00000D5E:  4A 79 00 00 01 D8 [R]
F00:0894       	bls edblock59
               S01:00000D64:  63 04
F00:0895       ctb57: ;Main true block ;keep 
F00:0896       	jsr DistortCopperLine
               S01:00000D66:  61 00 FE CC
F00:0897       edblock59
F00:0898       	add.w #$100,row ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000D6A:  06 79 01 00 00 00 05 EA [R]
F00:0899       	jmp while42
               S01:00000D72:  60 D6
F00:0900       edblock45
F00:0901       loopend47
F00:0902       	cmp.w #$6,effectNumber
               S01:00000D74:  0C 79 00 06 00 00 01 E0 [R]
F00:0903       	bne edblock65
               S01:00000D7C:  66 20
F00:0904       ctb63: ;Main true block ;keep 
F00:0905       	move.w row,(a5)+
               S01:00000D7E:  3A FA F8 6A
F00:0906       	move.w #$fffe,(a5)+
               S01:00000D82:  3A FC FF FE
F00:0907       	cmp.w #$0,beerinput
               S01:00000D86:  4A 79 00 00 01 D8 [R]
F00:0908       	bls edblock77
               S01:00000D8C:  63 04
F00:0909       ctb75: ;Main true block ;keep 
F00:0910       	jsr DistortCopperLine
               S01:00000D8E:  61 00 FE A4
F00:0911       edblock77
F00:0912       	jsr ColorCycle
               S01:00000D92:  61 00 FF 24
F00:0913       	add.w #$100,row ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000D96:  06 79 01 00 00 00 05 EA [R]
F00:0914       edblock65
F00:0915       while80
F00:0916       loopstart84
F00:0917       	; Swapped comparison expressions
F00:0918       	moveq #0,d0
               S01:00000D9E:  70 00
F00:0919       	move.w lightypos,d0     ; BOP move
               S01:00000DA0:  30 3A F3 1A
F00:0920       	add.w #$1000,d0 ; simple bop
               S01:00000DA4:  D0 7C 10 00
F00:0921       	cmp.w row,d0
               S01:00000DA8:  B0 7A F8 40
F00:0922       	blo edblock83
               S01:00000DAC:  65 1E
F00:0923       ctb81: ;Main true block ;keep 
F00:0924       	move.w row,(a5)+
               S01:00000DAE:  3A FA F8 3A
F00:0925       	move.w #$fffe,(a5)+
               S01:00000DB2:  3A FC FF FE
F00:0926       	cmp.w #$0,beerinput
               S01:00000DB6:  4A 79 00 00 01 D8 [R]
F00:0927       	bls edblock97
               S01:00000DBC:  63 04
F00:0928       ctb95: ;Main true block ;keep 
F00:0929       	jsr DistortCopperLine
               S01:00000DBE:  61 00 FE 74
F00:0930       edblock97
F00:0931       	add.w #$100,row ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000DC2:  06 79 01 00 00 00 05 EA [R]
F00:0932       	jmp while80
               S01:00000DCA:  60 D2
F00:0933       edblock83
F00:0934       loopend85
F00:0935       	cmp.w #$6,effectNumber
               S01:00000DCC:  0C 79 00 06 00 00 01 E0 [R]
F00:0936       	bne edblock103
               S01:00000DD4:  66 20
F00:0937       ctb101: ;Main true block ;keep 
F00:0938       	move.w row,(a5)+
               S01:00000DD6:  3A FA F8 12
F00:0939       	move.w #$fffe,(a5)+
               S01:00000DDA:  3A FC FF FE
F00:0940       	jsr ColorCycleRestore
               S01:00000DDE:  61 00 FE FE
F00:0941       	cmp.w #$0,beerinput
               S01:00000DE2:  4A 79 00 00 01 D8 [R]
F00:0942       	bls edblock115
               S01:00000DE8:  63 04
F00:0943       ctb113: ;Main true block ;keep 
F00:0944       	jsr DistortCopperLine
               S01:00000DEA:  61 00 FE 48
F00:0945       edblock115
F00:0946       	add.w #$100,row ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000DEE:  06 79 01 00 00 00 05 EA [R]
F00:0947       edblock103
F00:0948       while118
F00:0949       loopstart122
F00:0950       	cmp.w #$2c01,row
               S01:00000DF6:  0C 79 2C 01 00 00 05 EA [R]
F00:0951       	blo edblock121
               S01:00000DFE:  65 1E
F00:0952       ctb119: ;Main true block ;keep 
F00:0953       	move.w row,(a5)+
               S01:00000E00:  3A FA F7 E8
F00:0954       	move.w #$fffe,(a5)+
               S01:00000E04:  3A FC FF FE
F00:0955       	cmp.w #$0,beerinput
               S01:00000E08:  4A 79 00 00 01 D8 [R]
F00:0956       	bls edblock135
               S01:00000E0E:  63 04
F00:0957       ctb133: ;Main true block ;keep 
F00:0958       	jsr DistortCopperLine
               S01:00000E10:  61 00 FE 22
F00:0959       edblock135
F00:0960       	add.w #$100,row ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000E14:  06 79 01 00 00 00 05 EA [R]
F00:0961       	jmp while118
               S01:00000E1C:  60 D8
F00:0962       edblock121
F00:0963       loopend123
F00:0964       while138
F00:0965       loopstart142
F00:0966       	cmp.w #$2c01,row
               S01:00000E1E:  0C 79 2C 01 00 00 05 EA [R]
F00:0967       	bhs edblock141
               S01:00000E26:  64 1E
F00:0968       ctb139: ;Main true block ;keep 
F00:0969       	move.w row,(a5)+
               S01:00000E28:  3A FA F7 C0
F00:0970       	move.w #$fffe,(a5)+
               S01:00000E2C:  3A FC FF FE
F00:0971       	cmp.w #$0,beerinput
               S01:00000E30:  4A 79 00 00 01 D8 [R]
F00:0972       	bls edblock155
               S01:00000E36:  63 04
F00:0973       ctb153: ;Main true block ;keep 
F00:0974       	jsr DistortCopperLine
               S01:00000E38:  61 00 FD FA
F00:0975       edblock155
F00:0976       	add.w #$100,row ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000E3C:  06 79 01 00 00 00 05 EA [R]
F00:0977       	jmp while138
               S01:00000E44:  60 D8
F00:0978       edblock141
F00:0979       loopend143
F00:0980       	move.w #$ffff,(a5)+
               S01:00000E46:  3A FC FF FF
F00:0981       	move.w #$fffe,(a5)+
               S01:00000E4A:  3A FC FF FE
F00:0982       	cmp.w #$ff,istart
               S01:00000E4E:  0C 79 00 FF 00 00 01 DC [R]
F00:0983       	bhs eblock160
               S01:00000E56:  64 08
F00:0984       ctb159: ;Main true block ;keep 
F00:0985       	add.w #$1,istart ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000E58:  52 79 00 00 01 DC [R]
F00:0986       	jmp edblock161
               S01:00000E5E:  60 08
F00:0987       eblock160
F00:0988       	move.w #$0,istart ; Simple a:=b optimization 
               S01:00000E60:  33 FC 00 00 00 00 01 DC [R]
F00:0989       edblock161
F00:0990       	rts
               S01:00000E68:  4E 75
F00:0991       	
F00:0992       ; //Poke16(#$dff180,0,$000);			
F00:0993       	; ***********  Defining procedure : DistortMore
F00:0994       	;    Procedure type : User-defined procedure
F00:0995       DistortMore
F00:0996       	move.w #$0,i ; Simple a:=b optimization 
               S01:00000E6A:  33 FC 00 00 00 00 01 D0 [R]
F00:0997       forloop167
F00:0998       	moveq #0,d0
               S01:00000E72:  70 00
F00:0999       	move.l #0,d2
               S01:00000E74:  74 00
F00:1000       	move.w i,d2          ; Loadvar regular end
               S01:00000E76:  34 3A F3 58
F00:1001       	; Array is integer, so multiply with 2
F00:1002       	lsl #1,d2
               S01:00000E7A:  E3 4A
F00:1003       	lea sine4Copper,a0             ; LoadVariable:: is array
               S01:00000E7C:  41 FA F3 6C
F00:1004       	move.w (a0,d2),d1             ; LoadVariable:: is array
               S01:00000E80:  32 30 20 00
F00:1005       	move.w d1,d0     ; BOP move
               S01:00000E84:  30 01
F00:1006       	move.l #0,d2
               S01:00000E86:  74 00
F00:1007       	move.w i,d2          ; Loadvar regular end
               S01:00000E88:  34 3A F3 46
F00:1008       	; Array is integer, so multiply with 2
F00:1009       	lsl #1,d2
               S01:00000E8C:  E3 4A
F00:1010       	lea sine4CopperAdd,a0             ; LoadVariable:: is array
               S01:00000E8E:  41 FA F5 5A
F00:1011       	move.w (a0,d2),d1             ; LoadVariable:: is array
               S01:00000E92:  32 30 20 00
F00:1012       	add.w d1,d0 ; simple bop
               S01:00000E96:  D0 41
F00:1013       	; Store variable : sine4Copper
F00:1014       	move.w i,d2          ; Loadvar regular end
               S01:00000E98:  34 3A F3 36
F00:1015       	lsl #1,d2
               S01:00000E9C:  E3 4A
F00:1016       	lea sine4Copper,a0
               S01:00000E9E:  41 FA F3 4A
F00:1017       	move.w d0,(a0,d2)
               S01:00000EA2:  31 80 20 00
F00:1018       loopstart168
F00:1019       	; Create increasecounter
F00:1020       	add.w #$1,i ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000EA6:  52 79 00 00 01 D0 [R]
F00:1021       	; end increasecounter
F00:1022       	move #$ff,d0
               S01:00000EAC:  30 3C 00 FF
F00:1023       	cmp.w i,d0
               S01:00000EB0:  B0 7A F3 1E
F00:1024       	bne forloop167
               S01:00000EB4:  66 BC
F00:1025       loopend169
F00:1026       	rts
               S01:00000EB6:  4E 75
F00:1027       	; ***********  Defining procedure : BeerFoam
F00:1028       	;    Procedure type : User-defined procedure
F00:1029       	jmp block172
               S01:00000EB8:  60 0A
F00:1030       bf_dstimage	dc.l	0
               S01:00000EBA:  00 00 00 00
F00:1031       foamsize	dc.w	0
               S01:00000EBE:  00 00
F00:1032       foampos	dc.w	0
               S01:00000EC0:  00 00
F00:1033       	 	CNOP 0,4
F00:1034       block172
F00:1035       BeerFoam
F00:1036       	
F00:1037       ; //ablit description:	
F00:1038       ; // - SrcImage 
F00:1039       ; // - DstImage
F00:1040       ; // - SrcShiftBytes: Start Byte to Blit From
F00:1041       ; // - XOffset: X Offset in Bytes (8 Pixel) to Blit To
F00:1042       ; // - YOffset: YOffset to Blit to
F00:1043       ; // - BlitWidth: With in Bytes of the Blit
F00:1044       ; // - BlitSize: Complete Size of the Blit
F00:1045       ; // - BlitAmod
F00:1046       ; // - BlitDmod
F00:1047       ; // - BlitB + BlitCmod
F00:1048       ; // - Channels and Minterm
F00:1049       	move.l #imageFoam,srcimage ; Simple a:=b optimization 
               S01:00000EC4:  23 FC 00 06 0C 40 00 00 01 E6 [R]
F00:1050       	move.l #imageMask,imagemask ; Simple a:=b optimization 
               S01:00000ECE:  23 FC 00 06 10 B4 00 00 01 E2 [R]
F00:1051       	moveq #0,d0
               S01:00000ED8:  70 00
F00:1052       	move.l imagemask,d0     ; BOP move
               S01:00000EDA:  20 3A F3 06
F00:1053       	moveq #0,d1
               S01:00000EDE:  72 00
F00:1054       	move.w #$c,d1     ; BOP move
               S01:00000EE0:  32 3C 00 0C
F00:1055       	; LHS is byte, so initiate advanced op
F00:1056       	; is advanced bop
F00:1057       	moveq #0,d3
               S01:00000EE4:  76 00
F00:1058       	move.w foampos,d3     ; BOP move
               S01:00000EE6:  36 3A FF D8
F00:1059       	sub.w #$3e,d3 ; simple bop
               S01:00000EEA:  96 7C 00 3E
F00:1060       	; Reset register
F00:1061       	moveq #0,d2
               S01:00000EEE:  74 00
F00:1062       	move.w d3,d2     ; Advanced movee
               S01:00000EF0:  34 03
F00:1063       	mulu.w d2,d1
               S01:00000EF2:  C2 C2
F00:1064       	add.l d1,d0 ; simple bop
               S01:00000EF4:  D0 81
F00:1065       	; Store variable : imagemask
F00:1066       	move.l d0,imagemask
               S01:00000EF6:  23 C0 00 00 01 E2 [R]
F00:1067       	moveq #0,d0
               S01:00000EFC:  70 00
F00:1068       	moveq #0,d1
               S01:00000EFE:  72 00
F00:1069       	move.l bf_dstimage,d1     ; BOP move
               S01:00000F00:  22 3A FF B8
F00:1070       	add.l #$e,d1 ; simple bop
               S01:00000F04:  D2 BC 00 00 00 0E
F00:1071       	move.l d1,d0     ; BOP move
               S01:00000F0A:  20 01
F00:1072       	moveq #0,d1
               S01:00000F0C:  72 00
F00:1073       	move.w foampos,d1     ; BOP move
               S01:00000F0E:  32 3A FF B0
F00:1074       	; ORG TYPE of foampos INTEGER
F00:1075       	; LHS is byte, so initiate advanced op
F00:1076       	; is advanced bop
F00:1077       	; Reset register
F00:1078       	moveq #0,d2
               S01:00000F12:  74 00
F00:1079       	move.w #$28,d2     ; Advanced movee
               S01:00000F14:  34 3C 00 28
F00:1080       	mulu.w d2,d1
               S01:00000F18:  C2 C2
F00:1081       	add.l d1,d0 ; simple bop
               S01:00000F1A:  D0 81
F00:1082       	; Store variable : bf_dstimage
F00:1083       	move.l d0,bf_dstimage
               S01:00000F1C:  23 C0 00 00 0E BA [R]
F00:1084       waitforblitter173
F00:1085       	btst	#14,DMACONR
               S01:00000F22:  08 39 00 0E 00 DF F0 02
F00:1086       	bne.s	waitforblitter173
               S01:00000F2A:  66 F6
F00:1087       	; Poke command
F00:1088       	move.l #$DFF000,a0
               S01:00000F2C:  20 7C 00 DF F0 00
F00:1089       	add.w #$44,a0; #$FFFFFFFF
               S01:00000F32:  41 E8 00 44
F00:1090       	move.l #$FFFFFFFF,(a0)
               S01:00000F36:  20 BC FF FF FF FF
F00:1091       	
F00:1092       ; //BltAfwm+BltAlwm
F00:1093       	; Poke command
F00:1094       	move.l #$DFF000,a0
               S01:00000F3C:  20 7C 00 DF F0 00
F00:1095       	add.w #$60,a0; #$1c
               S01:00000F42:  41 E8 00 60
F00:1096       	move.w #$1c,(a0)
               S01:00000F46:  30 BC 00 1C
F00:1097       	
F00:1098       ; //BLTCMOD
F00:1099       	; Poke command
F00:1100       	move.l #$DFF000,a0
               S01:00000F4A:  20 7C 00 DF F0 00
F00:1101       	add.w #$62,a0; #$0
               S01:00000F50:  41 E8 00 62
F00:1102       	move.w #$0,(a0)
               S01:00000F54:  30 BC 00 00
F00:1103       	
F00:1104       ; //BLTBMOD
F00:1105       	; Poke command
F00:1106       	move.l #$DFF000,a0
               S01:00000F58:  20 7C 00 DF F0 00
F00:1107       	add.w #$64,a0; #$0
               S01:00000F5E:  41 E8 00 64
F00:1108       	move.w #$0,(a0)
               S01:00000F62:  30 BC 00 00
F00:1109       	
F00:1110       ; //BLTAMOD
F00:1111       	; Poke command
F00:1112       	move.l #$DFF000,a0
               S01:00000F66:  20 7C 00 DF F0 00
F00:1113       	add.w #$66,a0; #$1c
               S01:00000F6C:  41 E8 00 66
F00:1114       	move.w #$1c,(a0)
               S01:00000F70:  30 BC 00 1C
F00:1115       	
F00:1116       ; //BLTDMOD		
F00:1117       	; Poke command
F00:1118       	move.l #$DFF000,a0
               S01:00000F74:  20 7C 00 DF F0 00
F00:1119       	add.w #$42,a0; #$0
               S01:00000F7A:  41 E8 00 42
F00:1120       	move.w #$0,(a0)
               S01:00000F7E:  30 BC 00 00
F00:1121       	
F00:1122       ; //BLTCON1		
F00:1123       	moveq #0,d0
               S01:00000F82:  70 00
F00:1124       	moveq #0,d1
               S01:00000F84:  72 00
F00:1125       	move.w foamsize,d1     ; BOP move
               S01:00000F86:  32 3A FF 36
F00:1126       	lsl.w #$6,d1 ; simple bop
               S01:00000F8A:  ED 49
F00:1127       	move.w d1,d0     ; BOP move
               S01:00000F8C:  30 01
F00:1128       	add.w #$6,d0 ; simple bop
               S01:00000F8E:  5C 40
F00:1129       	; Store variable : bltsize
F00:1130       	move.w d0,bltsize
               S01:00000F90:  33 C0 00 00 01 D2 [R]
F00:1131       	move.l srcimage,cc_src ; Simple a:=b optimization 
               S01:00000F96:  23 FA F2 4E 00 00 0B C6 [R]
F00:1132       	move.l bf_dstimage,cc_dst ; Simple a:=b optimization 
               S01:00000F9E:  23 FA FF 1A 00 00 0B CA [R]
F00:1133       	move.l imagemask,cc_mask ; Simple a:=b optimization 
               S01:00000FA6:  23 FA F2 3A 00 00 0B CE [R]
F00:1134       	move.w bltsize,cc_size ; Simple a:=b optimization 
               S01:00000FAE:  33 FA F2 22 00 00 0B D2 [R]
F00:1135       	jsr CookieCut
               S01:00000FB6:  61 00 FC 1C
F00:1136       	add.l #$e4,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000FBA:  06 B9 00 00 00 E4 00 00 01 E6 [R]
F00:1137       	add.l #$57d0,bf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000FC4:  06 B9 00 00 57 D0 00 00 0E BA [R]
F00:1138       	move.l srcimage,cc_src ; Simple a:=b optimization 
               S01:00000FCE:  23 FA F2 16 00 00 0B C6 [R]
F00:1139       	move.l bf_dstimage,cc_dst ; Simple a:=b optimization 
               S01:00000FD6:  23 FA FE E2 00 00 0B CA [R]
F00:1140       	move.l imagemask,cc_mask ; Simple a:=b optimization 
               S01:00000FDE:  23 FA F2 02 00 00 0B CE [R]
F00:1141       	move.w bltsize,cc_size ; Simple a:=b optimization 
               S01:00000FE6:  33 FA F1 EA 00 00 0B D2 [R]
F00:1142       	jsr CookieCut
               S01:00000FEE:  61 00 FB E4
F00:1143       	add.l #$e4,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000FF2:  06 B9 00 00 00 E4 00 00 01 E6 [R]
F00:1144       	add.l #$57d0,bf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00000FFC:  06 B9 00 00 57 D0 00 00 0E BA [R]
F00:1145       	move.l srcimage,cc_src ; Simple a:=b optimization 
               S01:00001006:  23 FA F1 DE 00 00 0B C6 [R]
F00:1146       	move.l bf_dstimage,cc_dst ; Simple a:=b optimization 
               S01:0000100E:  23 FA FE AA 00 00 0B CA [R]
F00:1147       	move.l imagemask,cc_mask ; Simple a:=b optimization 
               S01:00001016:  23 FA F1 CA 00 00 0B CE [R]
F00:1148       	move.w bltsize,cc_size ; Simple a:=b optimization 
               S01:0000101E:  33 FA F1 B2 00 00 0B D2 [R]
F00:1149       	jsr CookieCut
               S01:00001026:  61 00 FB AC
F00:1150       	add.l #$e4,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0000102A:  06 B9 00 00 00 E4 00 00 01 E6 [R]
F00:1151       	add.l #$57d0,bf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00001034:  06 B9 00 00 57 D0 00 00 0E BA [R]
F00:1152       	move.l srcimage,cc_src ; Simple a:=b optimization 
               S01:0000103E:  23 FA F1 A6 00 00 0B C6 [R]
F00:1153       	move.l bf_dstimage,cc_dst ; Simple a:=b optimization 
               S01:00001046:  23 FA FE 72 00 00 0B CA [R]
F00:1154       	move.l imagemask,cc_mask ; Simple a:=b optimization 
               S01:0000104E:  23 FA F1 92 00 00 0B CE [R]
F00:1155       	move.w bltsize,cc_size ; Simple a:=b optimization 
               S01:00001056:  33 FA F1 7A 00 00 0B D2 [R]
F00:1156       	jsr CookieCut
               S01:0000105E:  61 00 FB 74
F00:1157       	add.l #$e4,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00001062:  06 B9 00 00 00 E4 00 00 01 E6 [R]
F00:1158       	add.l #$57d0,bf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0000106C:  06 B9 00 00 57 D0 00 00 0E BA [R]
F00:1159       	move.l srcimage,cc_src ; Simple a:=b optimization 
               S01:00001076:  23 FA F1 6E 00 00 0B C6 [R]
F00:1160       	move.l bf_dstimage,cc_dst ; Simple a:=b optimization 
               S01:0000107E:  23 FA FE 3A 00 00 0B CA [R]
F00:1161       	move.l imagemask,cc_mask ; Simple a:=b optimization 
               S01:00001086:  23 FA F1 5A 00 00 0B CE [R]
F00:1162       	move.w bltsize,cc_size ; Simple a:=b optimization 
               S01:0000108E:  33 FA F1 42 00 00 0B D2 [R]
F00:1163       	jsr CookieCut
               S01:00001096:  61 00 FB 3C
F00:1164       	rts
               S01:0000109A:  4E 75
F00:1165       	; ***********  Defining procedure : FillDrinkBeer
F00:1166       	;    Procedure type : User-defined procedure
F00:1167       	jmp block174
               S01:0000109C:  60 0E
F00:1168       dstimage dc.l 0
               S01:0000109E:  00 00 00 00
F00:1169       yoffset	dc.w	0
               S01:000010A2:  00 00
F00:1170       fd_srcimage	dc.l	0
               S01:000010A4:  00 00 00 00
F00:1171       fd_srcimageoffset	dc.l	0
               S01:000010A8:  00 00 00 00
F00:1172       	 	CNOP 0,4
F00:1173       block174
F00:1174       FillDrinkBeer
F00:1175       	
F00:1176       ; //ablit description:	
F00:1177       ; // - SrcImage 
F00:1178       ; // - DstImage
F00:1179       ; // - SrcShiftBytes: Start Byte to Blit From
F00:1180       ; // - XOffset: X Offset in Bytes (8 Pixel) to Blit To
F00:1181       ; // - YOffset: YOffset to Blit to
F00:1182       ; // - BlitWidth: With in Bytes of the Blit
F00:1183       ; // - BlitSize: Complete Size of the Blit
F00:1184       ; // - BlitAmod
F00:1185       ; // - BlitDmod
F00:1186       ; // - BlitB + BlitCmod
F00:1187       ; // - Channels and Minterm
F00:1188       ; //	fd_srcimage := #imageCupFull;
F00:1189       waitforblitter175
F00:1190       	btst	#14,DMACONR
               S01:000010AC:  08 39 00 0E 00 DF F0 02
F00:1191       	bne.s	waitforblitter175
               S01:000010B4:  66 F6
F00:1192       	moveq.l #0,d6
               S01:000010B6:  7C 00
F00:1193       	lea     $dff000,a6 ; Hardware registers
               S01:000010B8:  4D F9 00 DF F0 00
F00:1194       	move.l fd_srcimage,a0
               S01:000010BE:  20 7A FF E4
F00:1195       	move.l dstimage,a1
               S01:000010C2:  22 7A FF DA
F00:1196       	moveq #0,d0
               S01:000010C6:  70 00
F00:1197       	move.w yoffset,d0     ; BOP move
               S01:000010C8:  30 3A FF D8
F00:1198       	; ORG TYPE of yoffset INTEGER
F00:1199       	; LHS is byte, so initiate advanced op
F00:1200       	; is advanced bop
F00:1201       	; Reset register
F00:1202       	moveq #0,d1
               S01:000010CC:  72 00
F00:1203       	move.w #$c,d1     ; Advanced movee
               S01:000010CE:  32 3C 00 0C
F00:1204       	mulu.w d1,d0
               S01:000010D2:  C0 C1
F00:1205       	move.w d0,d6
               S01:000010D4:  3C 00
F00:1206       	move.w #$e,d1
               S01:000010D6:  32 3C 00 0E
F00:1207       	moveq #0,d0
               S01:000010DA:  70 00
F00:1208       	move.w yoffset,d0     ; BOP move
               S01:000010DC:  30 3A FF C4
F00:1209       	add.w #$52,d0 ; simple bop
               S01:000010E0:  D0 7C 00 52
F00:1210       	move.w d0,d2
               S01:000010E4:  34 00
F00:1211       	move.w #$28,d3
               S01:000010E6:  36 3C 00 28
F00:1212       	move.w #$86,d4
               S01:000010EA:  38 3C 00 86
F00:1213       	move.w #$0,BLTAMOD(a6)
               S01:000010EE:  3D 7C 00 00 00 64
F00:1214       	move.w #$0,BLTBMOD(a6)
               S01:000010F4:  3D 7C 00 00 00 62
F00:1215       	move.w #$0,BLTCMOD(a6)
               S01:000010FA:  3D 7C 00 00 00 60
F00:1216       	move.w #$1c,BLTDMOD(a6)
               S01:00001100:  3D 7C 00 1C 00 66
F00:1217       	move.w #$9f0,d0
               S01:00001106:  30 3C 09 F0
F00:1218       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0000110A:  3D 7C 00 00 00 42
F00:1219       	jsr blitter
               S01:00001110:  61 00 0E 88
F00:1220       	moveq #0,d0
               S01:00001114:  70 00
F00:1221       	move.l fd_srcimageoffset,d0     ; BOP move
               S01:00001116:  20 3A FF 90
F00:1222       	add.l fd_srcimage,d0 ; simple bop
               S01:0000111A:  D0 BA FF 88
F00:1223       	; Store variable : fd_srcimage
F00:1224       	move.l d0,fd_srcimage
               S01:0000111E:  23 C0 00 00 10 A4 [R]
F00:1225       	add.l #$57d0,dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00001124:  06 B9 00 00 57 D0 00 00 10 9E [R]
F00:1226       waitforblitter176
F00:1227       	btst	#14,DMACONR
               S01:0000112E:  08 39 00 0E 00 DF F0 02
F00:1228       	bne.s	waitforblitter176
               S01:00001136:  66 F6
F00:1229       	moveq.l #0,d6
               S01:00001138:  7C 00
F00:1230       	lea     $dff000,a6 ; Hardware registers
               S01:0000113A:  4D F9 00 DF F0 00
F00:1231       	move.l fd_srcimage,a0
               S01:00001140:  20 7A FF 62
F00:1232       	move.l dstimage,a1
               S01:00001144:  22 7A FF 58
F00:1233       	moveq #0,d0
               S01:00001148:  70 00
F00:1234       	move.w yoffset,d0     ; BOP move
               S01:0000114A:  30 3A FF 56
F00:1235       	; ORG TYPE of yoffset INTEGER
F00:1236       	; LHS is byte, so initiate advanced op
F00:1237       	; is advanced bop
F00:1238       	; Reset register
F00:1239       	moveq #0,d1
               S01:0000114E:  72 00
F00:1240       	move.w #$c,d1     ; Advanced movee
               S01:00001150:  32 3C 00 0C
F00:1241       	mulu.w d1,d0
               S01:00001154:  C0 C1
F00:1242       	move.w d0,d6
               S01:00001156:  3C 00
F00:1243       	move.w #$e,d1
               S01:00001158:  32 3C 00 0E
F00:1244       	moveq #0,d0
               S01:0000115C:  70 00
F00:1245       	move.w yoffset,d0     ; BOP move
               S01:0000115E:  30 3A FF 42
F00:1246       	add.w #$52,d0 ; simple bop
               S01:00001162:  D0 7C 00 52
F00:1247       	move.w d0,d2
               S01:00001166:  34 00
F00:1248       	move.w #$28,d3
               S01:00001168:  36 3C 00 28
F00:1249       	move.w #$86,d4
               S01:0000116C:  38 3C 00 86
F00:1250       	move.w #$0,BLTAMOD(a6)
               S01:00001170:  3D 7C 00 00 00 64
F00:1251       	move.w #$0,BLTBMOD(a6)
               S01:00001176:  3D 7C 00 00 00 62
F00:1252       	move.w #$0,BLTCMOD(a6)
               S01:0000117C:  3D 7C 00 00 00 60
F00:1253       	move.w #$1c,BLTDMOD(a6)
               S01:00001182:  3D 7C 00 1C 00 66
F00:1254       	move.w #$9f0,d0
               S01:00001188:  30 3C 09 F0
F00:1255       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0000118C:  3D 7C 00 00 00 42
F00:1256       	jsr blitter
               S01:00001192:  61 00 0E 06
F00:1257       	moveq #0,d0
               S01:00001196:  70 00
F00:1258       	move.l fd_srcimageoffset,d0     ; BOP move
               S01:00001198:  20 3A FF 0E
F00:1259       	add.l fd_srcimage,d0 ; simple bop
               S01:0000119C:  D0 BA FF 06
F00:1260       	; Store variable : fd_srcimage
F00:1261       	move.l d0,fd_srcimage
               S01:000011A0:  23 C0 00 00 10 A4 [R]
F00:1262       	add.l #$57d0,dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000011A6:  06 B9 00 00 57 D0 00 00 10 9E [R]
F00:1263       waitforblitter177
F00:1264       	btst	#14,DMACONR
               S01:000011B0:  08 39 00 0E 00 DF F0 02
F00:1265       	bne.s	waitforblitter177
               S01:000011B8:  66 F6
F00:1266       	moveq.l #0,d6
               S01:000011BA:  7C 00
F00:1267       	lea     $dff000,a6 ; Hardware registers
               S01:000011BC:  4D F9 00 DF F0 00
F00:1268       	move.l fd_srcimage,a0
               S01:000011C2:  20 7A FE E0
F00:1269       	move.l dstimage,a1
               S01:000011C6:  22 7A FE D6
F00:1270       	moveq #0,d0
               S01:000011CA:  70 00
F00:1271       	move.w yoffset,d0     ; BOP move
               S01:000011CC:  30 3A FE D4
F00:1272       	; ORG TYPE of yoffset INTEGER
F00:1273       	; LHS is byte, so initiate advanced op
F00:1274       	; is advanced bop
F00:1275       	; Reset register
F00:1276       	moveq #0,d1
               S01:000011D0:  72 00
F00:1277       	move.w #$c,d1     ; Advanced movee
               S01:000011D2:  32 3C 00 0C
F00:1278       	mulu.w d1,d0
               S01:000011D6:  C0 C1
F00:1279       	move.w d0,d6
               S01:000011D8:  3C 00
F00:1280       	move.w #$e,d1
               S01:000011DA:  32 3C 00 0E
F00:1281       	moveq #0,d0
               S01:000011DE:  70 00
F00:1282       	move.w yoffset,d0     ; BOP move
               S01:000011E0:  30 3A FE C0
F00:1283       	add.w #$52,d0 ; simple bop
               S01:000011E4:  D0 7C 00 52
F00:1284       	move.w d0,d2
               S01:000011E8:  34 00
F00:1285       	move.w #$28,d3
               S01:000011EA:  36 3C 00 28
F00:1286       	move.w #$86,d4
               S01:000011EE:  38 3C 00 86
F00:1287       	move.w #$0,BLTAMOD(a6)
               S01:000011F2:  3D 7C 00 00 00 64
F00:1288       	move.w #$0,BLTBMOD(a6)
               S01:000011F8:  3D 7C 00 00 00 62
F00:1289       	move.w #$0,BLTCMOD(a6)
               S01:000011FE:  3D 7C 00 00 00 60
F00:1290       	move.w #$1c,BLTDMOD(a6)
               S01:00001204:  3D 7C 00 1C 00 66
F00:1291       	move.w #$9f0,d0
               S01:0000120A:  30 3C 09 F0
F00:1292       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0000120E:  3D 7C 00 00 00 42
F00:1293       	jsr blitter
               S01:00001214:  61 00 0D 84
F00:1294       	moveq #0,d0
               S01:00001218:  70 00
F00:1295       	move.l fd_srcimageoffset,d0     ; BOP move
               S01:0000121A:  20 3A FE 8C
F00:1296       	add.l fd_srcimage,d0 ; simple bop
               S01:0000121E:  D0 BA FE 84
F00:1297       	; Store variable : fd_srcimage
F00:1298       	move.l d0,fd_srcimage
               S01:00001222:  23 C0 00 00 10 A4 [R]
F00:1299       	add.l #$57d0,dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00001228:  06 B9 00 00 57 D0 00 00 10 9E [R]
F00:1300       waitforblitter178
F00:1301       	btst	#14,DMACONR
               S01:00001232:  08 39 00 0E 00 DF F0 02
F00:1302       	bne.s	waitforblitter178
               S01:0000123A:  66 F6
F00:1303       	moveq.l #0,d6
               S01:0000123C:  7C 00
F00:1304       	lea     $dff000,a6 ; Hardware registers
               S01:0000123E:  4D F9 00 DF F0 00
F00:1305       	move.l fd_srcimage,a0
               S01:00001244:  20 7A FE 5E
F00:1306       	move.l dstimage,a1
               S01:00001248:  22 7A FE 54
F00:1307       	moveq #0,d0
               S01:0000124C:  70 00
F00:1308       	move.w yoffset,d0     ; BOP move
               S01:0000124E:  30 3A FE 52
F00:1309       	; ORG TYPE of yoffset INTEGER
F00:1310       	; LHS is byte, so initiate advanced op
F00:1311       	; is advanced bop
F00:1312       	; Reset register
F00:1313       	moveq #0,d1
               S01:00001252:  72 00
F00:1314       	move.w #$c,d1     ; Advanced movee
               S01:00001254:  32 3C 00 0C
F00:1315       	mulu.w d1,d0
               S01:00001258:  C0 C1
F00:1316       	move.w d0,d6
               S01:0000125A:  3C 00
F00:1317       	move.w #$e,d1
               S01:0000125C:  32 3C 00 0E
F00:1318       	moveq #0,d0
               S01:00001260:  70 00
F00:1319       	move.w yoffset,d0     ; BOP move
               S01:00001262:  30 3A FE 3E
F00:1320       	add.w #$52,d0 ; simple bop
               S01:00001266:  D0 7C 00 52
F00:1321       	move.w d0,d2
               S01:0000126A:  34 00
F00:1322       	move.w #$28,d3
               S01:0000126C:  36 3C 00 28
F00:1323       	move.w #$86,d4
               S01:00001270:  38 3C 00 86
F00:1324       	move.w #$0,BLTAMOD(a6)
               S01:00001274:  3D 7C 00 00 00 64
F00:1325       	move.w #$0,BLTBMOD(a6)
               S01:0000127A:  3D 7C 00 00 00 62
F00:1326       	move.w #$0,BLTCMOD(a6)
               S01:00001280:  3D 7C 00 00 00 60
F00:1327       	move.w #$1c,BLTDMOD(a6)
               S01:00001286:  3D 7C 00 1C 00 66
F00:1328       	move.w #$9f0,d0
               S01:0000128C:  30 3C 09 F0
F00:1329       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:00001290:  3D 7C 00 00 00 42
F00:1330       	jsr blitter
               S01:00001296:  61 00 0D 02
F00:1331       	moveq #0,d0
               S01:0000129A:  70 00
F00:1332       	move.l fd_srcimageoffset,d0     ; BOP move
               S01:0000129C:  20 3A FE 0A
F00:1333       	add.l fd_srcimage,d0 ; simple bop
               S01:000012A0:  D0 BA FE 02
F00:1334       	; Store variable : fd_srcimage
F00:1335       	move.l d0,fd_srcimage
               S01:000012A4:  23 C0 00 00 10 A4 [R]
F00:1336       	add.l #$57d0,dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000012AA:  06 B9 00 00 57 D0 00 00 10 9E [R]
F00:1337       waitforblitter179
F00:1338       	btst	#14,DMACONR
               S01:000012B4:  08 39 00 0E 00 DF F0 02
F00:1339       	bne.s	waitforblitter179
               S01:000012BC:  66 F6
F00:1340       	moveq.l #0,d6
               S01:000012BE:  7C 00
F00:1341       	lea     $dff000,a6 ; Hardware registers
               S01:000012C0:  4D F9 00 DF F0 00
F00:1342       	move.l fd_srcimage,a0
               S01:000012C6:  20 7A FD DC
F00:1343       	move.l dstimage,a1
               S01:000012CA:  22 7A FD D2
F00:1344       	moveq #0,d0
               S01:000012CE:  70 00
F00:1345       	move.w yoffset,d0     ; BOP move
               S01:000012D0:  30 3A FD D0
F00:1346       	; ORG TYPE of yoffset INTEGER
F00:1347       	; LHS is byte, so initiate advanced op
F00:1348       	; is advanced bop
F00:1349       	; Reset register
F00:1350       	moveq #0,d1
               S01:000012D4:  72 00
F00:1351       	move.w #$c,d1     ; Advanced movee
               S01:000012D6:  32 3C 00 0C
F00:1352       	mulu.w d1,d0
               S01:000012DA:  C0 C1
F00:1353       	move.w d0,d6
               S01:000012DC:  3C 00
F00:1354       	move.w #$e,d1
               S01:000012DE:  32 3C 00 0E
F00:1355       	moveq #0,d0
               S01:000012E2:  70 00
F00:1356       	move.w yoffset,d0     ; BOP move
               S01:000012E4:  30 3A FD BC
F00:1357       	add.w #$52,d0 ; simple bop
               S01:000012E8:  D0 7C 00 52
F00:1358       	move.w d0,d2
               S01:000012EC:  34 00
F00:1359       	move.w #$28,d3
               S01:000012EE:  36 3C 00 28
F00:1360       	move.w #$86,d4
               S01:000012F2:  38 3C 00 86
F00:1361       	move.w #$0,BLTAMOD(a6)
               S01:000012F6:  3D 7C 00 00 00 64
F00:1362       	move.w #$0,BLTBMOD(a6)
               S01:000012FC:  3D 7C 00 00 00 62
F00:1363       	move.w #$0,BLTCMOD(a6)
               S01:00001302:  3D 7C 00 00 00 60
F00:1364       	move.w #$1c,BLTDMOD(a6)
               S01:00001308:  3D 7C 00 1C 00 66
F00:1365       	move.w #$9f0,d0
               S01:0000130E:  30 3C 09 F0
F00:1366       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:00001312:  3D 7C 00 00 00 42
F00:1367       	jsr blitter
               S01:00001318:  61 00 0C 80
F00:1368       	rts
               S01:0000131C:  4E 75
F00:1369       	
F00:1370       ; //	Flips rendering buffer and updates copper list & pointers
F00:1371       ; //
F00:1372       	; ***********  Defining procedure : FlipBuffers
F00:1373       	;    Procedure type : User-defined procedure
F00:1374       FlipBuffers
F00:1375       	cmp.w #$0,curBuf
               S01:0000131E:  4A 79 00 00 00 B2 [R]
F00:1376       	bne eblock183
               S01:00001324:  66 36
F00:1377       ctb182: ;Main true block ;keep 
F00:1378       	move.l #image1,screen ; Simple a:=b optimization 
               S01:00001326:  23 FC 00 02 7D 14 00 00 01 C8 [R]
F00:1379       	moveq #0,d0
               S01:00001330:  70 00
F00:1380       	move.l screen,d0     ; BOP move
               S01:00001332:  20 3A EE 94
F00:1381       	add.l screenOffset,d0 ; simple bop
               S01:00001336:  D0 BA ED 86
F00:1382       	; Store variable : screen
F00:1383       	move.l d0,screen
               S01:0000133A:  23 C0 00 00 01 C8 [R]
F00:1384       	move.l #image2,offscreen ; Simple a:=b optimization 
               S01:00001340:  23 FC 00 04 34 24 00 00 01 CC [R]
F00:1385       	moveq #0,d0
               S01:0000134A:  70 00
F00:1386       	move.l offscreen,d0     ; BOP move
               S01:0000134C:  20 3A EE 7E
F00:1387       	add.l screenOffset,d0 ; simple bop
               S01:00001350:  D0 BA ED 6C
F00:1388       	; Store variable : offscreen
F00:1389       	move.l d0,offscreen
               S01:00001354:  23 C0 00 00 01 CC [R]
F00:1390       	jmp edblock184
               S01:0000135A:  60 34
F00:1391       eblock183
F00:1392       	move.l #image2,screen ; Simple a:=b optimization 
               S01:0000135C:  23 FC 00 04 34 24 00 00 01 C8 [R]
F00:1393       	moveq #0,d0
               S01:00001366:  70 00
F00:1394       	move.l screen,d0     ; BOP move
               S01:00001368:  20 3A EE 5E
F00:1395       	add.l screenOffset,d0 ; simple bop
               S01:0000136C:  D0 BA ED 50
F00:1396       	; Store variable : screen
F00:1397       	move.l d0,screen
               S01:00001370:  23 C0 00 00 01 C8 [R]
F00:1398       	move.l #image1,offscreen ; Simple a:=b optimization 
               S01:00001376:  23 FC 00 02 7D 14 00 00 01 CC [R]
F00:1399       	moveq #0,d0
               S01:00001380:  70 00
F00:1400       	move.l offscreen,d0     ; BOP move
               S01:00001382:  20 3A EE 48
F00:1401       	add.l screenOffset,d0 ; simple bop
               S01:00001386:  D0 BA ED 36
F00:1402       	; Store variable : offscreen
F00:1403       	move.l d0,offscreen
               S01:0000138A:  23 C0 00 00 01 CC [R]
F00:1404       edblock184
F00:1405       	; setcopperlist32
F00:1406       	move.l offscreen,a1
               S01:00001390:  22 7A EE 3A
F00:1407       	move.l a1,d0
               S01:00001394:  20 09
F00:1408       	move.l #copper_bitplane0,a0
               S01:00001396:  41 F9 00 00 00 E8 [R]
F00:1409       	move.w d0,6(a0)
               S01:0000139C:  31 40 00 06
F00:1410       	swap d0
               S01:000013A0:  48 40
F00:1411       	move.w d0,2(a0)
               S01:000013A2:  31 40 00 02
F00:1412       	; setcopperlist32
F00:1413       	moveq #0,d1
               S01:000013A6:  72 00
F00:1414       	move.l offscreen,d1     ; BOP move
               S01:000013A8:  22 3A EE 22
F00:1415       	add.l #$57d0,d1 ; simple bop
               S01:000013AC:  D2 BC 00 00 57 D0
F00:1416       	move.l d1,d0
               S01:000013B2:  20 01
F00:1417       	move.l #copper_bitplane1,a0
               S01:000013B4:  41 F9 00 00 00 F0 [R]
F00:1418       	move.w d0,6(a0)
               S01:000013BA:  31 40 00 06
F00:1419       	swap d0
               S01:000013BE:  48 40
F00:1420       	move.w d0,2(a0)
               S01:000013C0:  31 40 00 02
F00:1421       	; setcopperlist32
F00:1422       	moveq #0,d1
               S01:000013C4:  72 00
F00:1423       	move.l offscreen,d1     ; BOP move
               S01:000013C6:  22 3A EE 04
F00:1424       	; NodeBinop : both are pure numeric optimization : #$afa0
F00:1425       	add.l #$afa0,d1 ; simple bop
               S01:000013CA:  D2 BC 00 00 AF A0
F00:1426       	move.l d1,d0
               S01:000013D0:  20 01
F00:1427       	move.l #copper_bitplane2,a0
               S01:000013D2:  41 F9 00 00 00 F8 [R]
F00:1428       	move.w d0,6(a0)
               S01:000013D8:  31 40 00 06
F00:1429       	swap d0
               S01:000013DC:  48 40
F00:1430       	move.w d0,2(a0)
               S01:000013DE:  31 40 00 02
F00:1431       	; setcopperlist32
F00:1432       	moveq #0,d1
               S01:000013E2:  72 00
F00:1433       	move.l offscreen,d1     ; BOP move
               S01:000013E4:  22 3A ED E6
F00:1434       	; NodeBinop : both are pure numeric optimization : #$10770
F00:1435       	add.l #$10770,d1 ; simple bop
               S01:000013E8:  D2 BC 00 01 07 70
F00:1436       	move.l d1,d0
               S01:000013EE:  20 01
F00:1437       	move.l #copper_bitplane3,a0
               S01:000013F0:  41 F9 00 00 01 00 [R]
F00:1438       	move.w d0,6(a0)
               S01:000013F6:  31 40 00 06
F00:1439       	swap d0
               S01:000013FA:  48 40
F00:1440       	move.w d0,2(a0)
               S01:000013FC:  31 40 00 02
F00:1441       	; setcopperlist32
F00:1442       	moveq #0,d1
               S01:00001400:  72 00
F00:1443       	move.l offscreen,d1     ; BOP move
               S01:00001402:  22 3A ED C8
F00:1444       	; NodeBinop : both are pure numeric optimization : #$15f40
F00:1445       	add.l #$15f40,d1 ; simple bop
               S01:00001406:  D2 BC 00 01 5F 40
F00:1446       	move.l d1,d0
               S01:0000140C:  20 01
F00:1447       	move.l #copper_bitplane4,a0
               S01:0000140E:  41 F9 00 00 01 08 [R]
F00:1448       	move.w d0,6(a0)
               S01:00001414:  31 40 00 06
F00:1449       	swap d0
               S01:00001418:  48 40
F00:1450       	move.w d0,2(a0)
               S01:0000141A:  31 40 00 02
F00:1451       	moveq #0,d0
               S01:0000141E:  70 00
F00:1452       	moveq #0,d1
               S01:00001420:  72 00
F00:1453       	move.w curBuf,d1     ; BOP move
               S01:00001422:  32 3A EC 8E
F00:1454       	add.w #$1,d1 ; simple bop
               S01:00001426:  52 41
F00:1455       	move.w d1,d0     ; BOP move
               S01:00001428:  30 01
F00:1456       	and.w #$1,d0 ; simple bop
               S01:0000142A:  C0 7C 00 01
F00:1457       	; Store variable : curBuf
F00:1458       	move.w d0,curBuf
               S01:0000142E:  33 C0 00 00 00 B2 [R]
F00:1459       	rts
               S01:00001434:  4E 75
F00:1460       	; ***********  Defining procedure : RemoveFoam
F00:1461       	;    Procedure type : User-defined procedure
F00:1462       	jmp block189
               S01:00001436:  60 08
F00:1463       rf_dstimage dc.l 0
               S01:00001438:  00 00 00 00
F00:1464       rf_yoffset	dc.w	0
               S01:0000143C:  00 00
F00:1465       	 	CNOP 0,4
F00:1466       block189
F00:1467       RemoveFoam
F00:1468       	cmp.w #$94,rf_yoffset
               S01:00001440:  0C 79 00 94 00 00 14 3C [R]
F00:1469       	bls edblock193
               S01:00001448:  63 08
F00:1470       ctb191: ;Main true block ;keep 
F00:1471       	
F00:1472       ; //ablit description:	
F00:1473       ; // - SrcImage 
F00:1474       ; // - DstImage
F00:1475       ; // - SrcShiftBytes: Start Byte to Blit From
F00:1476       ; // - XOffset: X Offset in Bytes (8 Pixel) to Blit To
F00:1477       ; // - YOffset: YOffset to Blit to
F00:1478       ; // - BlitWidth: With in Bytes of the Blit
F00:1479       ; // - BlitSize: Complete Size of the Blit
F00:1480       ; // - BlitAmod
F00:1481       ; // - BlitDmod
F00:1482       ; // - BlitB + BlitCmod
F00:1483       ; // - Channels and Minterm
F00:1484       	move.w #$94,rf_yoffset ; Simple a:=b optimization 
               S01:0000144A:  33 FC 00 94 00 00 14 3C [R]
F00:1485       edblock193
F00:1486       	move.l #imageRestoreCup,srcimage ; Simple a:=b optimization 
               S01:00001452:  23 FC 00 02 57 1C 00 00 01 E6 [R]
F00:1487       waitforblitter196
F00:1488       	btst	#14,DMACONR
               S01:0000145C:  08 39 00 0E 00 DF F0 02
F00:1489       	bne.s	waitforblitter196
               S01:00001464:  66 F6
F00:1490       	moveq.l #0,d6
               S01:00001466:  7C 00
F00:1491       	lea     $dff000,a6 ; Hardware registers
               S01:00001468:  4D F9 00 DF F0 00
F00:1492       	move.l srcimage,a0
               S01:0000146E:  20 7A ED 76
F00:1493       	move.l rf_dstimage,a1
               S01:00001472:  22 7A FF C4
F00:1494       	moveq #0,d0
               S01:00001476:  70 00
F00:1495       	move.w rf_yoffset,d0     ; BOP move
               S01:00001478:  30 3A FF C2
F00:1496       	; ORG TYPE of rf_yoffset INTEGER
F00:1497       	; LHS is byte, so initiate advanced op
F00:1498       	; is advanced bop
F00:1499       	; Reset register
F00:1500       	moveq #0,d1
               S01:0000147C:  72 00
F00:1501       	move.w #$c,d1     ; Advanced movee
               S01:0000147E:  32 3C 00 0C
F00:1502       	mulu.w d1,d0
               S01:00001482:  C0 C1
F00:1503       	move.w d0,d6
               S01:00001484:  3C 00
F00:1504       	move.w #$e,d1
               S01:00001486:  32 3C 00 0E
F00:1505       	moveq #0,d0
               S01:0000148A:  70 00
F00:1506       	move.w rf_yoffset,d0     ; BOP move
               S01:0000148C:  30 3A FF AE
F00:1507       	add.w #$3e,d0 ; simple bop
               S01:00001490:  D0 7C 00 3E
F00:1508       	move.w d0,d2
               S01:00001494:  34 00
F00:1509       	move.w #$28,d3
               S01:00001496:  36 3C 00 28
F00:1510       	move.w #$146,d4
               S01:0000149A:  38 3C 01 46
F00:1511       	move.w #$0,BLTAMOD(a6)
               S01:0000149E:  3D 7C 00 00 00 64
F00:1512       	move.w #$0,BLTBMOD(a6)
               S01:000014A4:  3D 7C 00 00 00 62
F00:1513       	move.w #$0,BLTCMOD(a6)
               S01:000014AA:  3D 7C 00 00 00 60
F00:1514       	move.w #$1c,BLTDMOD(a6)
               S01:000014B0:  3D 7C 00 1C 00 66
F00:1515       	move.w #$9f0,d0
               S01:000014B6:  30 3C 09 F0
F00:1516       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:000014BA:  3D 7C 00 00 00 42
F00:1517       	jsr blitter
               S01:000014C0:  61 00 0A D8
F00:1518       	add.l #$798,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000014C4:  06 B9 00 00 07 98 00 00 01 E6 [R]
F00:1519       	add.l #$57d0,rf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000014CE:  06 B9 00 00 57 D0 00 00 14 38 [R]
F00:1520       waitforblitter197
F00:1521       	btst	#14,DMACONR
               S01:000014D8:  08 39 00 0E 00 DF F0 02
F00:1522       	bne.s	waitforblitter197
               S01:000014E0:  66 F6
F00:1523       	moveq.l #0,d6
               S01:000014E2:  7C 00
F00:1524       	lea     $dff000,a6 ; Hardware registers
               S01:000014E4:  4D F9 00 DF F0 00
F00:1525       	move.l srcimage,a0
               S01:000014EA:  20 7A EC FA
F00:1526       	move.l rf_dstimage,a1
               S01:000014EE:  22 7A FF 48
F00:1527       	moveq #0,d0
               S01:000014F2:  70 00
F00:1528       	move.w rf_yoffset,d0     ; BOP move
               S01:000014F4:  30 3A FF 46
F00:1529       	; ORG TYPE of rf_yoffset INTEGER
F00:1530       	; LHS is byte, so initiate advanced op
F00:1531       	; is advanced bop
F00:1532       	; Reset register
F00:1533       	moveq #0,d1
               S01:000014F8:  72 00
F00:1534       	move.w #$c,d1     ; Advanced movee
               S01:000014FA:  32 3C 00 0C
F00:1535       	mulu.w d1,d0
               S01:000014FE:  C0 C1
F00:1536       	move.w d0,d6
               S01:00001500:  3C 00
F00:1537       	move.w #$e,d1
               S01:00001502:  32 3C 00 0E
F00:1538       	moveq #0,d0
               S01:00001506:  70 00
F00:1539       	move.w rf_yoffset,d0     ; BOP move
               S01:00001508:  30 3A FF 32
F00:1540       	add.w #$3e,d0 ; simple bop
               S01:0000150C:  D0 7C 00 3E
F00:1541       	move.w d0,d2
               S01:00001510:  34 00
F00:1542       	move.w #$28,d3
               S01:00001512:  36 3C 00 28
F00:1543       	move.w #$146,d4
               S01:00001516:  38 3C 01 46
F00:1544       	move.w #$0,BLTAMOD(a6)
               S01:0000151A:  3D 7C 00 00 00 64
F00:1545       	move.w #$0,BLTBMOD(a6)
               S01:00001520:  3D 7C 00 00 00 62
F00:1546       	move.w #$0,BLTCMOD(a6)
               S01:00001526:  3D 7C 00 00 00 60
F00:1547       	move.w #$1c,BLTDMOD(a6)
               S01:0000152C:  3D 7C 00 1C 00 66
F00:1548       	move.w #$9f0,d0
               S01:00001532:  30 3C 09 F0
F00:1549       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:00001536:  3D 7C 00 00 00 42
F00:1550       	jsr blitter
               S01:0000153C:  61 00 0A 5C
F00:1551       	add.l #$798,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00001540:  06 B9 00 00 07 98 00 00 01 E6 [R]
F00:1552       	add.l #$57d0,rf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0000154A:  06 B9 00 00 57 D0 00 00 14 38 [R]
F00:1553       waitforblitter198
F00:1554       	btst	#14,DMACONR
               S01:00001554:  08 39 00 0E 00 DF F0 02
F00:1555       	bne.s	waitforblitter198
               S01:0000155C:  66 F6
F00:1556       	moveq.l #0,d6
               S01:0000155E:  7C 00
F00:1557       	lea     $dff000,a6 ; Hardware registers
               S01:00001560:  4D F9 00 DF F0 00
F00:1558       	move.l srcimage,a0
               S01:00001566:  20 7A EC 7E
F00:1559       	move.l rf_dstimage,a1
               S01:0000156A:  22 7A FE CC
F00:1560       	moveq #0,d0
               S01:0000156E:  70 00
F00:1561       	move.w rf_yoffset,d0     ; BOP move
               S01:00001570:  30 3A FE CA
F00:1562       	; ORG TYPE of rf_yoffset INTEGER
F00:1563       	; LHS is byte, so initiate advanced op
F00:1564       	; is advanced bop
F00:1565       	; Reset register
F00:1566       	moveq #0,d1
               S01:00001574:  72 00
F00:1567       	move.w #$c,d1     ; Advanced movee
               S01:00001576:  32 3C 00 0C
F00:1568       	mulu.w d1,d0
               S01:0000157A:  C0 C1
F00:1569       	move.w d0,d6
               S01:0000157C:  3C 00
F00:1570       	move.w #$e,d1
               S01:0000157E:  32 3C 00 0E
F00:1571       	moveq #0,d0
               S01:00001582:  70 00
F00:1572       	move.w rf_yoffset,d0     ; BOP move
               S01:00001584:  30 3A FE B6
F00:1573       	add.w #$3e,d0 ; simple bop
               S01:00001588:  D0 7C 00 3E
F00:1574       	move.w d0,d2
               S01:0000158C:  34 00
F00:1575       	move.w #$28,d3
               S01:0000158E:  36 3C 00 28
F00:1576       	move.w #$146,d4
               S01:00001592:  38 3C 01 46
F00:1577       	move.w #$0,BLTAMOD(a6)
               S01:00001596:  3D 7C 00 00 00 64
F00:1578       	move.w #$0,BLTBMOD(a6)
               S01:0000159C:  3D 7C 00 00 00 62
F00:1579       	move.w #$0,BLTCMOD(a6)
               S01:000015A2:  3D 7C 00 00 00 60
F00:1580       	move.w #$1c,BLTDMOD(a6)
               S01:000015A8:  3D 7C 00 1C 00 66
F00:1581       	move.w #$9f0,d0
               S01:000015AE:  30 3C 09 F0
F00:1582       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:000015B2:  3D 7C 00 00 00 42
F00:1583       	jsr blitter
               S01:000015B8:  61 00 09 E0
F00:1584       	add.l #$798,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000015BC:  06 B9 00 00 07 98 00 00 01 E6 [R]
F00:1585       	add.l #$57d0,rf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000015C6:  06 B9 00 00 57 D0 00 00 14 38 [R]
F00:1586       waitforblitter199
F00:1587       	btst	#14,DMACONR
               S01:000015D0:  08 39 00 0E 00 DF F0 02
F00:1588       	bne.s	waitforblitter199
               S01:000015D8:  66 F6
F00:1589       	moveq.l #0,d6
               S01:000015DA:  7C 00
F00:1590       	lea     $dff000,a6 ; Hardware registers
               S01:000015DC:  4D F9 00 DF F0 00
F00:1591       	move.l srcimage,a0
               S01:000015E2:  20 7A EC 02
F00:1592       	move.l rf_dstimage,a1
               S01:000015E6:  22 7A FE 50
F00:1593       	moveq #0,d0
               S01:000015EA:  70 00
F00:1594       	move.w rf_yoffset,d0     ; BOP move
               S01:000015EC:  30 3A FE 4E
F00:1595       	; ORG TYPE of rf_yoffset INTEGER
F00:1596       	; LHS is byte, so initiate advanced op
F00:1597       	; is advanced bop
F00:1598       	; Reset register
F00:1599       	moveq #0,d1
               S01:000015F0:  72 00
F00:1600       	move.w #$c,d1     ; Advanced movee
               S01:000015F2:  32 3C 00 0C
F00:1601       	mulu.w d1,d0
               S01:000015F6:  C0 C1
F00:1602       	move.w d0,d6
               S01:000015F8:  3C 00
F00:1603       	move.w #$e,d1
               S01:000015FA:  32 3C 00 0E
F00:1604       	moveq #0,d0
               S01:000015FE:  70 00
F00:1605       	move.w rf_yoffset,d0     ; BOP move
               S01:00001600:  30 3A FE 3A
F00:1606       	add.w #$3e,d0 ; simple bop
               S01:00001604:  D0 7C 00 3E
F00:1607       	move.w d0,d2
               S01:00001608:  34 00
F00:1608       	move.w #$28,d3
               S01:0000160A:  36 3C 00 28
F00:1609       	move.w #$146,d4
               S01:0000160E:  38 3C 01 46
F00:1610       	move.w #$0,BLTAMOD(a6)
               S01:00001612:  3D 7C 00 00 00 64
F00:1611       	move.w #$0,BLTBMOD(a6)
               S01:00001618:  3D 7C 00 00 00 62
F00:1612       	move.w #$0,BLTCMOD(a6)
               S01:0000161E:  3D 7C 00 00 00 60
F00:1613       	move.w #$1c,BLTDMOD(a6)
               S01:00001624:  3D 7C 00 1C 00 66
F00:1614       	move.w #$9f0,d0
               S01:0000162A:  30 3C 09 F0
F00:1615       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:0000162E:  3D 7C 00 00 00 42
F00:1616       	jsr blitter
               S01:00001634:  61 00 09 64
F00:1617       	add.l #$798,srcimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00001638:  06 B9 00 00 07 98 00 00 01 E6 [R]
F00:1618       	add.l #$57d0,rf_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00001642:  06 B9 00 00 57 D0 00 00 14 38 [R]
F00:1619       waitforblitter200
F00:1620       	btst	#14,DMACONR
               S01:0000164C:  08 39 00 0E 00 DF F0 02
F00:1621       	bne.s	waitforblitter200
               S01:00001654:  66 F6
F00:1622       	moveq.l #0,d6
               S01:00001656:  7C 00
F00:1623       	lea     $dff000,a6 ; Hardware registers
               S01:00001658:  4D F9 00 DF F0 00
F00:1624       	move.l srcimage,a0
               S01:0000165E:  20 7A EB 86
F00:1625       	move.l rf_dstimage,a1
               S01:00001662:  22 7A FD D4
F00:1626       	moveq #0,d0
               S01:00001666:  70 00
F00:1627       	move.w rf_yoffset,d0     ; BOP move
               S01:00001668:  30 3A FD D2
F00:1628       	; ORG TYPE of rf_yoffset INTEGER
F00:1629       	; LHS is byte, so initiate advanced op
F00:1630       	; is advanced bop
F00:1631       	; Reset register
F00:1632       	moveq #0,d1
               S01:0000166C:  72 00
F00:1633       	move.w #$c,d1     ; Advanced movee
               S01:0000166E:  32 3C 00 0C
F00:1634       	mulu.w d1,d0
               S01:00001672:  C0 C1
F00:1635       	move.w d0,d6
               S01:00001674:  3C 00
F00:1636       	move.w #$e,d1
               S01:00001676:  32 3C 00 0E
F00:1637       	moveq #0,d0
               S01:0000167A:  70 00
F00:1638       	move.w rf_yoffset,d0     ; BOP move
               S01:0000167C:  30 3A FD BE
F00:1639       	add.w #$3e,d0 ; simple bop
               S01:00001680:  D0 7C 00 3E
F00:1640       	move.w d0,d2
               S01:00001684:  34 00
F00:1641       	move.w #$28,d3
               S01:00001686:  36 3C 00 28
F00:1642       	move.w #$146,d4
               S01:0000168A:  38 3C 01 46
F00:1643       	move.w #$0,BLTAMOD(a6)
               S01:0000168E:  3D 7C 00 00 00 64
F00:1644       	move.w #$0,BLTBMOD(a6)
               S01:00001694:  3D 7C 00 00 00 62
F00:1645       	move.w #$0,BLTCMOD(a6)
               S01:0000169A:  3D 7C 00 00 00 60
F00:1646       	move.w #$1c,BLTDMOD(a6)
               S01:000016A0:  3D 7C 00 1C 00 66
F00:1647       	move.w #$9f0,d0
               S01:000016A6:  30 3C 09 F0
F00:1648       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:000016AA:  3D 7C 00 00 00 42
F00:1649       	jsr blitter
               S01:000016B0:  61 00 08 E8
F00:1650       	rts
               S01:000016B4:  4E 75
F00:1651       	; ***********  Defining procedure : EffBeerFoam
F00:1652       	;    Procedure type : User-defined procedure
F00:1653       EffBeerFoam
F00:1654       	add.w #$1,foamCounter ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000016B6:  52 79 00 00 00 C2 [R]
F00:1655       	move.l screen,bf_dstimage ; Simple a:=b optimization 
               S01:000016BC:  23 FA EB 0A 00 00 0E BA [R]
F00:1656       	move.w foamCounter,foamsize ; Simple a:=b optimization 
               S01:000016C4:  33 FA E9 FC 00 00 0E BE [R]
F00:1657       	moveq #0,d0
               S01:000016CC:  70 00
F00:1658       	move.w #$d7,d0     ; BOP move
               S01:000016CE:  30 3C 00 D7
F00:1659       	sub.w foamCounter,d0 ; simple bop
               S01:000016D2:  90 7A E9 EE
F00:1660       	; Store variable : foampos
F00:1661       	move.w d0,foampos
               S01:000016D6:  33 C0 00 00 0E C0 [R]
F00:1662       	jsr BeerFoam
               S01:000016DC:  61 00 F7 E6
F00:1663       	rts
               S01:000016E0:  4E 75
F00:1664       	; ***********  Defining procedure : EffBeerFill
F00:1665       	;    Procedure type : User-defined procedure
F00:1666       EffBeerFill
F00:1667       	move.l screen,dstimage ; Simple a:=b optimization 
               S01:000016E2:  23 FA EA E4 00 00 10 9E [R]
F00:1668       	move.w yOffset,yoffset ; Simple a:=b optimization 
               S01:000016EA:  33 FA E9 DA 00 00 10 A2 [R]
F00:1669       	move.l #imageCupFull,fd_srcimage ; Simple a:=b optimization 
               S01:000016F2:  23 FC 00 05 EB 34 00 00 10 A4 [R]
F00:1670       	moveq #0,d0
               S01:000016FC:  70 00
F00:1671       	move.w #$69c,d0
               S01:000016FE:  30 3C 06 9C
F00:1672       	move.l d0,fd_srcimageoffset
               S01:00001702:  23 C0 00 00 10 A8 [R]
F00:1673       	jsr FillDrinkBeer
               S01:00001708:  61 00 F9 A2
F00:1674       	cmp.w #$1,yOffset
               S01:0000170C:  0C 79 00 01 00 00 00 C6 [R]
F00:1675       	blo edblock206
               S01:00001714:  65 0C
F00:1676       ctb204: ;Main true block ;keep 
F00:1677       	sub.w #$1,yOffset ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00001716:  53 79 00 00 00 C6 [R]
F00:1678       	add.w #$1,foamCounter ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0000171C:  52 79 00 00 00 C2 [R]
F00:1679       edblock206
F00:1680       	cmp.w #$13,foamCounter
               S01:00001722:  0C 79 00 13 00 00 00 C2 [R]
F00:1681       	bhi eblock211
               S01:0000172A:  62 26
F00:1682       ctb210: ;Main true block ;keep 
F00:1683       	move.l screen,bf_dstimage ; Simple a:=b optimization 
               S01:0000172C:  23 FA EA 9A 00 00 0E BA [R]
F00:1684       	move.w foamCounter,foamsize ; Simple a:=b optimization 
               S01:00001734:  33 FA E9 8C 00 00 0E BE [R]
F00:1685       	moveq #0,d0
               S01:0000173C:  70 00
F00:1686       	move.w #$d8,d0     ; BOP move
               S01:0000173E:  30 3C 00 D8
F00:1687       	sub.w foamCounter,d0 ; simple bop
               S01:00001742:  90 7A E9 7E
F00:1688       	; Store variable : foampos
F00:1689       	move.w d0,foampos
               S01:00001746:  33 C0 00 00 0E C0 [R]
F00:1690       	jsr BeerFoam
               S01:0000174C:  61 00 F7 76
F00:1691       	jmp edblock212
               S01:00001750:  60 24
F00:1692       eblock211
F00:1693       	move.l screen,bf_dstimage ; Simple a:=b optimization 
               S01:00001752:  23 FA EA 74 00 00 0E BA [R]
F00:1694       	move.w #$13,foamsize ; Simple a:=b optimization 
               S01:0000175A:  33 FC 00 13 00 00 0E BE [R]
F00:1695       	moveq #0,d0
               S01:00001762:  70 00
F00:1696       	move.w #$d8,d0     ; BOP move
               S01:00001764:  30 3C 00 D8
F00:1697       	sub.w foamCounter,d0 ; simple bop
               S01:00001768:  90 7A E9 58
F00:1698       	; Store variable : foampos
F00:1699       	move.w d0,foampos
               S01:0000176C:  33 C0 00 00 0E C0 [R]
F00:1700       	jsr BeerFoam
               S01:00001772:  61 00 F7 50
F00:1701       edblock212
F00:1702       	rts
               S01:00001776:  4E 75
F00:1703       	; ***********  Defining procedure : EffBeerDrink
F00:1704       	;    Procedure type : User-defined procedure
F00:1705       EffBeerDrink
F00:1706       	move.l screen,rf_dstimage ; Simple a:=b optimization 
               S01:00001778:  23 FA EA 4E 00 00 14 38 [R]
F00:1707       	move.w yOffset,rf_yoffset ; Simple a:=b optimization 
               S01:00001780:  33 FA E9 44 00 00 14 3C [R]
F00:1708       	jsr RemoveFoam
               S01:00001788:  61 00 FC B6
F00:1709       	cmp.w #$13,foamCounter
               S01:0000178C:  0C 79 00 13 00 00 00 C2 [R]
F00:1710       	bhi eblock220
               S01:00001794:  62 26
F00:1711       ctb219: ;Main true block ;keep 
F00:1712       	move.l screen,bf_dstimage ; Simple a:=b optimization 
               S01:00001796:  23 FA EA 30 00 00 0E BA [R]
F00:1713       	move.w foamCounter,foamsize ; Simple a:=b optimization 
               S01:0000179E:  33 FA E9 22 00 00 0E BE [R]
F00:1714       	moveq #0,d0
               S01:000017A6:  70 00
F00:1715       	move.w #$d8,d0     ; BOP move
               S01:000017A8:  30 3C 00 D8
F00:1716       	sub.w foamCounter,d0 ; simple bop
               S01:000017AC:  90 7A E9 14
F00:1717       	; Store variable : foampos
F00:1718       	move.w d0,foampos
               S01:000017B0:  33 C0 00 00 0E C0 [R]
F00:1719       	jsr BeerFoam
               S01:000017B6:  61 00 F7 0C
F00:1720       	jmp edblock221
               S01:000017BA:  60 24
F00:1721       eblock220
F00:1722       	move.l screen,bf_dstimage ; Simple a:=b optimization 
               S01:000017BC:  23 FA EA 0A 00 00 0E BA [R]
F00:1723       	move.w #$13,foamsize ; Simple a:=b optimization 
               S01:000017C4:  33 FC 00 13 00 00 0E BE [R]
F00:1724       	moveq #0,d0
               S01:000017CC:  70 00
F00:1725       	move.w #$d8,d0     ; BOP move
               S01:000017CE:  30 3C 00 D8
F00:1726       	sub.w foamCounter,d0 ; simple bop
               S01:000017D2:  90 7A E8 EE
F00:1727       	; Store variable : foampos
F00:1728       	move.w d0,foampos
               S01:000017D6:  33 C0 00 00 0E C0 [R]
F00:1729       	jsr BeerFoam
               S01:000017DC:  61 00 F6 E6
F00:1730       edblock221
F00:1731       	rts
               S01:000017E0:  4E 75
F00:1732       	; ***********  Defining procedure : EffScrollup
F00:1733       	;    Procedure type : User-defined procedure
F00:1734       EffScrollup
F00:1735       	sub.l #$28,screenOffset ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000017E2:  04 B9 00 00 00 28 00 00 00 BE [R]
F00:1736       	rts
               S01:000017EC:  4E 75
F00:1737       	; ***********  Defining procedure : EffScrolldown
F00:1738       	;    Procedure type : User-defined procedure
F00:1739       EffScrolldown
F00:1740       	add.l #$28,screenOffset ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000017EE:  06 B9 00 00 00 28 00 00 00 BE [R]
F00:1741       	rts
               S01:000017F8:  4E 75
F00:1742       	; ***********  Defining procedure : RestoreCup
F00:1743       	;    Procedure type : User-defined procedure
F00:1744       	jmp block228
               S01:000017FA:  60 10
F00:1745       rc_srcimage	dc.l	0
               S01:000017FC:  00 00 00 00
F00:1746       rc_dstimage	dc.l	0
               S01:00001800:  00 00 00 00
F00:1747       rc_yoffset	dc.w	0
               S01:00001804:  00 00
F00:1748       rc_height	dc.l	0
               S01:00001806:  00 00 00 00
F00:1749       	 	CNOP 0,4
F00:1750       block228
F00:1751       RestoreCup
F00:1752       	
F00:1753       ; //ablit description:	
F00:1754       ; // - SrcImage 
F00:1755       ; // - DstImage
F00:1756       ; // - SrcShiftBytes: Start Byte to Blit From
F00:1757       ; // - XOffset: X Offset in Bytes (8 Pixel) to Blit To
F00:1758       ; // - YOffset: YOffset to Blit to
F00:1759       ; // - BlitWidth: With in Bytes of the Blit
F00:1760       ; // - BlitSize: Complete Size of the Blit
F00:1761       ; // - BlitAmod
F00:1762       ; // - BlitDmod
F00:1763       ; // - BlitB + BlitCmod
F00:1764       ; // - Channels and Minterm
F00:1765       	move.l rc_srcimage,srcimage ; Simple a:=b optimization 
               S01:0000180C:  23 FA FF EE 00 00 01 E6 [R]
F00:1766       	moveq #0,d0
               S01:00001814:  70 00
F00:1767       	move.l rc_height,d0     ; BOP move
               S01:00001816:  20 3A FF EE
F00:1768       	; ORG TYPE of rc_height LONG
F00:1769       	; LHS is byte, so initiate advanced op
F00:1770       	; is advanced bop
F00:1771       	; Reset register
F00:1772       	moveq #0,d1
               S01:0000181A:  72 00
F00:1773       	move.w #$c,d1     ; Advanced movee
               S01:0000181C:  32 3C 00 0C
F00:1774       	mulu.w d1,d0
               S01:00001820:  C0 C1
F00:1775       	; Store variable : planeoffset
F00:1776       	move.l d0,planeoffset
               S01:00001822:  23 C0 00 00 05 F2 [R]
F00:1777       	moveq #0,d0
               S01:00001828:  70 00
F00:1778       	moveq #0,d1
               S01:0000182A:  72 00
F00:1779       	move.l rc_height,d1     ; BOP move
               S01:0000182C:  22 3A FF D8
F00:1780       	lsl.l #$6,d1 ; simple bop
               S01:00001830:  ED 89
F00:1781       	move.l d1,d0     ; BOP move
               S01:00001832:  20 01
F00:1782       	add.l #$6,d0 ; simple bop
               S01:00001834:  5C 80
F00:1783       	; Store variable : bltsize
F00:1784       	move.w d0,bltsize
               S01:00001836:  33 C0 00 00 01 D2 [R]
F00:1785       waitforblitter229
F00:1786       	btst	#14,DMACONR
               S01:0000183C:  08 39 00 0E 00 DF F0 02
F00:1787       	bne.s	waitforblitter229
               S01:00001844:  66 F6
F00:1788       	moveq.l #0,d6
               S01:00001846:  7C 00
F00:1789       	lea     $dff000,a6 ; Hardware registers
               S01:00001848:  4D F9 00 DF F0 00
F00:1790       	move.l srcimage,a0
               S01:0000184E:  20 7A E9 96
F00:1791       	move.l rc_dstimage,a1
               S01:00001852:  22 7A FF AC
F00:1792       	move.w #$0,d6
               S01:00001856:  3C 3C 00 00
F00:1793       	move.w #$e,d1
               S01:0000185A:  32 3C 00 0E
F00:1794       	move.w rc_yoffset,d2
               S01:0000185E:  34 3A FF A4
F00:1795       	move.w #$28,d3
               S01:00001862:  36 3C 00 28
F00:1796       	move.w bltsize,d4
               S01:00001866:  38 3A E9 6A
F00:1797       	move.w #$0,BLTAMOD(a6)
               S01:0000186A:  3D 7C 00 00 00 64
F00:1798       	move.w #$0,BLTBMOD(a6)
               S01:00001870:  3D 7C 00 00 00 62
F00:1799       	move.w #$0,BLTCMOD(a6)
               S01:00001876:  3D 7C 00 00 00 60
F00:1800       	move.w #$1c,BLTDMOD(a6)
               S01:0000187C:  3D 7C 00 1C 00 66
F00:1801       	move.w #$9f0,d0
               S01:00001882:  30 3C 09 F0
F00:1802       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:00001886:  3D 7C 00 00 00 42
F00:1803       	jsr blitter
               S01:0000188C:  61 00 07 0C
F00:1804       	moveq #0,d0
               S01:00001890:  70 00
F00:1805       	move.l planeoffset,d0     ; BOP move
               S01:00001892:  20 3A ED 5E
F00:1806       	add.l srcimage,d0 ; simple bop
               S01:00001896:  D0 BA E9 4E
F00:1807       	; Store variable : srcimage
F00:1808       	move.l d0,srcimage
               S01:0000189A:  23 C0 00 00 01 E6 [R]
F00:1809       	add.l #$57d0,rc_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000018A0:  06 B9 00 00 57 D0 00 00 18 00 [R]
F00:1810       waitforblitter230
F00:1811       	btst	#14,DMACONR
               S01:000018AA:  08 39 00 0E 00 DF F0 02
F00:1812       	bne.s	waitforblitter230
               S01:000018B2:  66 F6
F00:1813       	moveq.l #0,d6
               S01:000018B4:  7C 00
F00:1814       	lea     $dff000,a6 ; Hardware registers
               S01:000018B6:  4D F9 00 DF F0 00
F00:1815       	move.l srcimage,a0
               S01:000018BC:  20 7A E9 28
F00:1816       	move.l rc_dstimage,a1
               S01:000018C0:  22 7A FF 3E
F00:1817       	move.w #$0,d6
               S01:000018C4:  3C 3C 00 00
F00:1818       	move.w #$e,d1
               S01:000018C8:  32 3C 00 0E
F00:1819       	move.w rc_yoffset,d2
               S01:000018CC:  34 3A FF 36
F00:1820       	move.w #$28,d3
               S01:000018D0:  36 3C 00 28
F00:1821       	move.w bltsize,d4
               S01:000018D4:  38 3A E8 FC
F00:1822       	move.w #$0,BLTAMOD(a6)
               S01:000018D8:  3D 7C 00 00 00 64
F00:1823       	move.w #$0,BLTBMOD(a6)
               S01:000018DE:  3D 7C 00 00 00 62
F00:1824       	move.w #$0,BLTCMOD(a6)
               S01:000018E4:  3D 7C 00 00 00 60
F00:1825       	move.w #$1c,BLTDMOD(a6)
               S01:000018EA:  3D 7C 00 1C 00 66
F00:1826       	move.w #$9f0,d0
               S01:000018F0:  30 3C 09 F0
F00:1827       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:000018F4:  3D 7C 00 00 00 42
F00:1828       	jsr blitter
               S01:000018FA:  61 00 06 9E
F00:1829       	moveq #0,d0
               S01:000018FE:  70 00
F00:1830       	move.l planeoffset,d0     ; BOP move
               S01:00001900:  20 3A EC F0
F00:1831       	add.l srcimage,d0 ; simple bop
               S01:00001904:  D0 BA E8 E0
F00:1832       	; Store variable : srcimage
F00:1833       	move.l d0,srcimage
               S01:00001908:  23 C0 00 00 01 E6 [R]
F00:1834       	add.l #$57d0,rc_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0000190E:  06 B9 00 00 57 D0 00 00 18 00 [R]
F00:1835       waitforblitter231
F00:1836       	btst	#14,DMACONR
               S01:00001918:  08 39 00 0E 00 DF F0 02
F00:1837       	bne.s	waitforblitter231
               S01:00001920:  66 F6
F00:1838       	moveq.l #0,d6
               S01:00001922:  7C 00
F00:1839       	lea     $dff000,a6 ; Hardware registers
               S01:00001924:  4D F9 00 DF F0 00
F00:1840       	move.l srcimage,a0
               S01:0000192A:  20 7A E8 BA
F00:1841       	move.l rc_dstimage,a1
               S01:0000192E:  22 7A FE D0
F00:1842       	move.w #$0,d6
               S01:00001932:  3C 3C 00 00
F00:1843       	move.w #$e,d1
               S01:00001936:  32 3C 00 0E
F00:1844       	move.w rc_yoffset,d2
               S01:0000193A:  34 3A FE C8
F00:1845       	move.w #$28,d3
               S01:0000193E:  36 3C 00 28
F00:1846       	move.w bltsize,d4
               S01:00001942:  38 3A E8 8E
F00:1847       	move.w #$0,BLTAMOD(a6)
               S01:00001946:  3D 7C 00 00 00 64
F00:1848       	move.w #$0,BLTBMOD(a6)
               S01:0000194C:  3D 7C 00 00 00 62
F00:1849       	move.w #$0,BLTCMOD(a6)
               S01:00001952:  3D 7C 00 00 00 60
F00:1850       	move.w #$1c,BLTDMOD(a6)
               S01:00001958:  3D 7C 00 1C 00 66
F00:1851       	move.w #$9f0,d0
               S01:0000195E:  30 3C 09 F0
F00:1852       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:00001962:  3D 7C 00 00 00 42
F00:1853       	jsr blitter
               S01:00001968:  61 00 06 30
F00:1854       	moveq #0,d0
               S01:0000196C:  70 00
F00:1855       	move.l planeoffset,d0     ; BOP move
               S01:0000196E:  20 3A EC 82
F00:1856       	add.l srcimage,d0 ; simple bop
               S01:00001972:  D0 BA E8 72
F00:1857       	; Store variable : srcimage
F00:1858       	move.l d0,srcimage
               S01:00001976:  23 C0 00 00 01 E6 [R]
F00:1859       	add.l #$57d0,rc_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:0000197C:  06 B9 00 00 57 D0 00 00 18 00 [R]
F00:1860       waitforblitter232
F00:1861       	btst	#14,DMACONR
               S01:00001986:  08 39 00 0E 00 DF F0 02
F00:1862       	bne.s	waitforblitter232
               S01:0000198E:  66 F6
F00:1863       	moveq.l #0,d6
               S01:00001990:  7C 00
F00:1864       	lea     $dff000,a6 ; Hardware registers
               S01:00001992:  4D F9 00 DF F0 00
F00:1865       	move.l srcimage,a0
               S01:00001998:  20 7A E8 4C
F00:1866       	move.l rc_dstimage,a1
               S01:0000199C:  22 7A FE 62
F00:1867       	move.w #$0,d6
               S01:000019A0:  3C 3C 00 00
F00:1868       	move.w #$e,d1
               S01:000019A4:  32 3C 00 0E
F00:1869       	move.w rc_yoffset,d2
               S01:000019A8:  34 3A FE 5A
F00:1870       	move.w #$28,d3
               S01:000019AC:  36 3C 00 28
F00:1871       	move.w bltsize,d4
               S01:000019B0:  38 3A E8 20
F00:1872       	move.w #$0,BLTAMOD(a6)
               S01:000019B4:  3D 7C 00 00 00 64
F00:1873       	move.w #$0,BLTBMOD(a6)
               S01:000019BA:  3D 7C 00 00 00 62
F00:1874       	move.w #$0,BLTCMOD(a6)
               S01:000019C0:  3D 7C 00 00 00 60
F00:1875       	move.w #$1c,BLTDMOD(a6)
               S01:000019C6:  3D 7C 00 1C 00 66
F00:1876       	move.w #$9f0,d0
               S01:000019CC:  30 3C 09 F0
F00:1877       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:000019D0:  3D 7C 00 00 00 42
F00:1878       	jsr blitter
               S01:000019D6:  61 00 05 C2
F00:1879       	moveq #0,d0
               S01:000019DA:  70 00
F00:1880       	move.l planeoffset,d0     ; BOP move
               S01:000019DC:  20 3A EC 14
F00:1881       	add.l srcimage,d0 ; simple bop
               S01:000019E0:  D0 BA E8 04
F00:1882       	; Store variable : srcimage
F00:1883       	move.l d0,srcimage
               S01:000019E4:  23 C0 00 00 01 E6 [R]
F00:1884       	add.l #$57d0,rc_dstimage ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:000019EA:  06 B9 00 00 57 D0 00 00 18 00 [R]
F00:1885       waitforblitter233
F00:1886       	btst	#14,DMACONR
               S01:000019F4:  08 39 00 0E 00 DF F0 02
F00:1887       	bne.s	waitforblitter233
               S01:000019FC:  66 F6
F00:1888       	moveq.l #0,d6
               S01:000019FE:  7C 00
F00:1889       	lea     $dff000,a6 ; Hardware registers
               S01:00001A00:  4D F9 00 DF F0 00
F00:1890       	move.l srcimage,a0
               S01:00001A06:  20 7A E7 DE
F00:1891       	move.l rc_dstimage,a1
               S01:00001A0A:  22 7A FD F4
F00:1892       	move.w #$0,d6
               S01:00001A0E:  3C 3C 00 00
F00:1893       	move.w #$e,d1
               S01:00001A12:  32 3C 00 0E
F00:1894       	move.w rc_yoffset,d2
               S01:00001A16:  34 3A FD EC
F00:1895       	move.w #$28,d3
               S01:00001A1A:  36 3C 00 28
F00:1896       	move.w bltsize,d4
               S01:00001A1E:  38 3A E7 B2
F00:1897       	move.w #$0,BLTAMOD(a6)
               S01:00001A22:  3D 7C 00 00 00 64
F00:1898       	move.w #$0,BLTBMOD(a6)
               S01:00001A28:  3D 7C 00 00 00 62
F00:1899       	move.w #$0,BLTCMOD(a6)
               S01:00001A2E:  3D 7C 00 00 00 60
F00:1900       	move.w #$1c,BLTDMOD(a6)
               S01:00001A34:  3D 7C 00 1C 00 66
F00:1901       	move.w #$9f0,d0
               S01:00001A3A:  30 3C 09 F0
F00:1902       	move.w  #0,BLTCON1(a6) ;    issa 0   BLTCON1
               S01:00001A3E:  3D 7C 00 00 00 42
F00:1903       	jsr blitter
               S01:00001A44:  61 00 05 54
F00:1904       	rts
               S01:00001A48:  4E 75
F00:1905       	; ***********  Defining procedure : Get_Musicpos
F00:1906       	;    Procedure type : User-defined procedure
F00:1907       Get_Musicpos
F00:1908       		move.w	(LSP_State+m_currentSeq)(pc),musicPos
               S01:00001A4A:  33 FA F1 72 00 00 01 D4 [R]
F00:1909       	
F00:1910       	rts
               S01:00001A52:  4E 75
F00:1911       	 	CNOP 0,4
F00:1912       block1
F00:1913       	moveq #0,d0
               S01:00001A54:  70 00
F00:1914       	move.w #$0,d0
               S01:00001A56:  30 3C 00 00
F00:1915       	move.l d0,curcopperpos
               S01:00001A5A:  23 C0 00 00 00 B8 [R]
F00:1916       	move.l #music,cs_music ; Simple a:=b optimization 
               S01:00001A60:  23 FC 00 00 00 00 00 00 08 18 [R]
F00:1917       	move.l #bank,cs_bank ; Simple a:=b optimization 
               S01:00001A6A:  23 FC 00 01 E8 14 00 00 08 1C [R]
F00:1918       	move.w #$0,cs_vbr ; Simple a:=b optimization 
               S01:00001A74:  33 FC 00 00 00 00 08 20 [R]
F00:1919       	move.w #$0,cs_palntsc ; Simple a:=b optimization 
               S01:00001A7C:  33 FC 00 00 00 00 08 22 [R]
F00:1920       	jsr LSP_CIAStart
               S01:00001A84:  61 00 ED 9E
F00:1921       	move.l #image1,Graphics_pa ; Simple a:=b optimization 
               S01:00001A88:  23 FC 00 02 7D 14 00 00 00 90 [R]
F00:1922       	move.w #$5,Graphics_bpl ; Simple a:=b optimization 
               S01:00001A92:  33 FC 00 05 00 00 00 94 [R]
F00:1923       	jsr Graphics_SetupNonInterlacedScreen
               S01:00001A9A:  61 00 EB 60
F00:1924       	jsr FlipBuffers
               S01:00001A9E:  61 00 F8 7E
F00:1925       	move.w #$1f,d0
               S01:00001AA2:  30 3C 00 1F
F00:1926       	move.l #image_palette,a0
               S01:00001AA6:  41 FA E6 20
F00:1927       	move.l #copper_palette,a1
               S01:00001AAA:  43 F9 00 00 00 68 [R]
F00:1928       memcpy235
F00:1929       	move.l (a0)+,(a1)+
               S01:00001AB0:  22 D8
F00:1930       	dbf d0,memcpy235
               S01:00001AB2:  51 C8 FF FC
F00:1931       while236
F00:1932       loopstart240
F00:1933       	cmp.w #$0,isDone
               S01:00001AB6:  4A 79 00 00 00 B4 [R]
F00:1934       	bne edblock239
               S01:00001ABC:  66 00 04 72
F00:1935       ctb237: ;Main true block ;keep 
F00:1936       waitVB451
F00:1937       	move.l VPOSR,d0
               S01:00001AC0:  20 39 00 DF F0 04
F00:1938       	and.l #$1ff00,d0
               S01:00001AC6:  C0 BC 00 01 FF 00
F00:1939       	cmp.l #300<<8,d0
               S01:00001ACC:  B0 BC 00 01 2C 00
F00:1940       	bne waitVB451
               S01:00001AD2:  66 EC
F00:1941       	move.w #$0,colorcycled ; Simple a:=b optimization 
               S01:00001AD4:  33 FC 00 00 00 00 00 B6 [R]
F00:1942       	jsr FlipBuffers
               S01:00001ADC:  61 00 F8 40
F00:1943       	jsr Get_Musicpos
               S01:00001AE0:  61 00 FF 68
F00:1944       	move #$1,d0
               S01:00001AE4:  30 3C 00 01
F00:1945       	cmp.w effectNumber,d0
               S01:00001AE8:  B0 7A E6 F6
F00:1946       	bne casenext453
               S01:00001AEC:  66 1C
F00:1947       	add.w #$1,eff0Counter ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00001AEE:  52 79 00 00 00 C4 [R]
F00:1948       	cmp.w #$1e,eff0Counter
               S01:00001AF4:  0C 79 00 1E 00 00 00 C4 [R]
F00:1949       	blo edblock458
               S01:00001AFC:  65 08
F00:1950       ctb456: ;Main true block ;keep 
F00:1951       	move.w #$2,effectNumber ; Simple a:=b optimization 
               S01:00001AFE:  33 FC 00 02 00 00 01 E0 [R]
F00:1952       edblock458
F00:1953       	jmp caseend452
               S01:00001B06:  60 00 04 24
F00:1954       casenext453
F00:1955       	move #$2,d0
               S01:00001B0A:  30 3C 00 02
F00:1956       	cmp.w effectNumber,d0
               S01:00001B0E:  B0 7A E6 D0
F00:1957       	bne casenext461
               S01:00001B12:  66 20
F00:1958       	cmp.w #$c,foamCounter
               S01:00001B14:  0C 79 00 0C 00 00 00 C2 [R]
F00:1959       	bhi eblock465
               S01:00001B1C:  62 06
F00:1960       ctb464: ;Main true block ;keep 
F00:1961       	jsr EffBeerFoam
               S01:00001B1E:  61 00 FB 96
F00:1962       	jmp edblock466
               S01:00001B22:  60 08
F00:1963       eblock465
F00:1964       	move.w #$3,effectNumber ; Simple a:=b optimization 
               S01:00001B24:  33 FC 00 03 00 00 01 E0 [R]
F00:1965       edblock466
F00:1966       	jsr CopperEffects
               S01:00001B2C:  61 00 F1 D6
F00:1967       	jmp caseend452
               S01:00001B30:  60 00 03 FA
F00:1968       casenext461
F00:1969       	move #$3,d0
               S01:00001B34:  30 3C 00 03
F00:1970       	cmp.w effectNumber,d0
               S01:00001B38:  B0 7A E6 A6
F00:1971       	bne casenext471
               S01:00001B3C:  66 1E
F00:1972       	jsr EffBeerFill
               S01:00001B3E:  61 00 FB A2
F00:1973       	cmp.w #$4,musicPos
               S01:00001B42:  0C 79 00 04 00 00 01 D4 [R]
F00:1974       	bne edblock476
               S01:00001B4A:  66 08
F00:1975       ctb474: ;Main true block ;keep 
F00:1976       	move.w #$4,effectNumber ; Simple a:=b optimization 
               S01:00001B4C:  33 FC 00 04 00 00 01 E0 [R]
F00:1977       edblock476
F00:1978       	jsr CopperEffects
               S01:00001B54:  61 00 F1 AE
F00:1979       	jmp caseend452
               S01:00001B58:  60 00 03 D2
F00:1980       casenext471
F00:1981       	move #$4,d0
               S01:00001B5C:  30 3C 00 04
F00:1982       	cmp.w effectNumber,d0
               S01:00001B60:  B0 7A E6 7E
F00:1983       	bne casenext479
               S01:00001B64:  66 26
F00:1984       	cmp.l #$0,screenOffset
               S01:00001B66:  4A B9 00 00 00 BE [R]
F00:1985       	bls eblock483
               S01:00001B6C:  63 06
F00:1986       ctb482: ;Main true block ;keep 
F00:1987       	jsr EffScrollup
               S01:00001B6E:  61 00 FC 72
F00:1988       	jmp edblock484
               S01:00001B72:  60 08
F00:1989       eblock483
F00:1990       	move.w #$5,effectNumber ; Simple a:=b optimization 
               S01:00001B74:  33 FC 00 05 00 00 01 E0 [R]
F00:1991       edblock484
F00:1992       	jsr CopperEffects
               S01:00001B7C:  61 00 F1 86
F00:1993       	move.w #$0,tmp ; Simple a:=b optimization 
               S01:00001B80:  33 FC 00 00 00 00 05 EC [R]
F00:1994       	jmp caseend452
               S01:00001B88:  60 00 03 A2
F00:1995       casenext479
F00:1996       	move #$5,d0
               S01:00001B8C:  30 3C 00 05
F00:1997       	cmp.w effectNumber,d0
               S01:00001B90:  B0 7A E6 4E
F00:1998       	bne casenext489
               S01:00001B94:  66 00 00 A8
F00:1999       	cmp.w #$8,musicPos
               S01:00001B98:  0C 79 00 08 00 00 01 D4 [R]
F00:2000       	bne localfailed497
               S01:00001BA0:  66 02
F00:2001       	jmp ctb492
               S01:00001BA2:  60 22
F00:2002       localfailed497: ;keep
F00:2003       	; ; logical OR, second chance
F00:2004       	cmp.w #$23,musicPos
               S01:00001BA4:  0C 79 00 23 00 00 01 D4 [R]
F00:2005       	bne localfailed496
               S01:00001BAC:  66 02
F00:2006       	jmp ctb492
               S01:00001BAE:  60 16
F00:2007       localfailed496: ;keep
F00:2008       	; ; logical OR, second chance
F00:2009       	cmp.w #$38,musicPos
               S01:00001BB0:  0C 79 00 38 00 00 01 D4 [R]
F00:2010       	bne localfailed498
               S01:00001BB8:  66 02
F00:2011       	jmp ctb492
               S01:00001BBA:  60 0A
F00:2012       localfailed498: ;keep
F00:2013       	; ; logical OR, second chance
F00:2014       	cmp.w #$53,musicPos
               S01:00001BBC:  0C 79 00 53 00 00 01 D4 [R]
F00:2015       	bne edblock494
               S01:00001BC4:  66 08
F00:2016       ctb492: ;Main true block ;keep 
F00:2017       	move.w #$6,effectNumber ; Simple a:=b optimization 
               S01:00001BC6:  33 FC 00 06 00 00 01 E0 [R]
F00:2018       edblock494
F00:2019       	cmp.w #$2,tmp
               S01:00001BCE:  0C 79 00 02 00 00 05 EC [R]
F00:2020       	bhs edblock503
               S01:00001BD6:  64 58
F00:2021       ctb501: ;Main true block ;keep 
F00:2022       	move.l #imageCupFull,rc_srcimage ; Simple a:=b optimization 
               S01:00001BD8:  23 FC 00 05 EB 34 00 00 17 FC [R]
F00:2023       	move.l screen,rc_dstimage ; Simple a:=b optimization 
               S01:00001BE2:  23 FA E5 E4 00 00 18 00 [R]
F00:2024       	move.w #$152,rc_yoffset ; Simple a:=b optimization 
               S01:00001BEA:  33 FC 01 52 00 00 18 04 [R]
F00:2025       	moveq #0,d0
               S01:00001BF2:  70 00
F00:2026       	move.w #$8d,d0
               S01:00001BF4:  30 3C 00 8D
F00:2027       	move.l d0,rc_height
               S01:00001BF8:  23 C0 00 00 18 06 [R]
F00:2028       	jsr RestoreCup
               S01:00001BFE:  61 00 FC 0C
F00:2029       	moveq #0,d0
               S01:00001C02:  70 00
F00:2030       	move.l screen,d0     ; BOP move
               S01:00001C04:  20 3A E5 C2
F00:2031       	add.l #$2800,d0 ; simple bop
               S01:00001C08:  D0 BC 00 00 28 00
F00:2032       	; Store variable : tmp2
F00:2033       	move.l d0,tmp2
               S01:00001C0E:  23 C0 00 00 05 EE [R]
F00:2034       	move.l tmp2,bf_dstimage ; Simple a:=b optimization 
               S01:00001C14:  23 FA E9 D8 00 00 0E BA [R]
F00:2035       	move.w #$13,foamsize ; Simple a:=b optimization 
               S01:00001C1C:  33 FC 00 13 00 00 0E BE [R]
F00:2036       	move.w #$40,foampos ; Simple a:=b optimization 
               S01:00001C24:  33 FC 00 40 00 00 0E C0 [R]
F00:2037       	jsr BeerFoam
               S01:00001C2C:  61 00 F2 96
F00:2038       edblock503
F00:2039       	add.w #$1,tmp ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00001C30:  52 79 00 00 05 EC [R]
F00:2040       	jsr CopperEffects
               S01:00001C36:  61 00 F0 CC
F00:2041       	jmp caseend452
               S01:00001C3A:  60 00 02 F0
F00:2042       casenext489
F00:2043       	move #$6,d0
               S01:00001C3E:  30 3C 00 06
F00:2044       	cmp.w effectNumber,d0
               S01:00001C42:  B0 7A E5 9C
F00:2045       	bne casenext506
               S01:00001C46:  66 5A
F00:2046       	jsr CopperEffects
               S01:00001C48:  61 00 F0 BA
F00:2047       	cmp.w #$8901,lightypos
               S01:00001C4C:  0C 79 89 01 00 00 00 BC [R]
F00:2048       	bhi eblock510
               S01:00001C54:  62 0A
F00:2049       ctb509: ;Main true block ;keep 
F00:2050       	add.w #$100,lightypos ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00001C56:  06 79 01 00 00 00 00 BC [R]
F00:2051       	jmp edblock511
               S01:00001C5E:  60 08
F00:2052       eblock510
F00:2053       	move.w #$3001,lightypos ; Simple a:=b optimization 
               S01:00001C60:  33 FC 30 01 00 00 00 BC [R]
F00:2054       edblock511
F00:2055       	cmp.w #$10,musicPos
               S01:00001C68:  0C 79 00 10 00 00 01 D4 [R]
F00:2056       	bne localfailed522
               S01:00001C70:  66 02
F00:2057       	jmp ctb517
               S01:00001C72:  60 22
F00:2058       localfailed522: ;keep
F00:2059       	; ; logical OR, second chance
F00:2060       	cmp.w #$28,musicPos
               S01:00001C74:  0C 79 00 28 00 00 01 D4 [R]
F00:2061       	bne localfailed521
               S01:00001C7C:  66 02
F00:2062       	jmp ctb517
               S01:00001C7E:  60 16
F00:2063       localfailed521: ;keep
F00:2064       	; ; logical OR, second chance
F00:2065       	cmp.w #$40,musicPos
               S01:00001C80:  0C 79 00 40 00 00 01 D4 [R]
F00:2066       	bne localfailed523
               S01:00001C88:  66 02
F00:2067       	jmp ctb517
               S01:00001C8A:  60 0A
F00:2068       localfailed523: ;keep
F00:2069       	; ; logical OR, second chance
F00:2070       	cmp.w #$58,musicPos
               S01:00001C8C:  0C 79 00 58 00 00 01 D4 [R]
F00:2071       	bne edblock519
               S01:00001C94:  66 08
F00:2072       ctb517: ;Main true block ;keep 
F00:2073       	move.w #$7,effectNumber ; Simple a:=b optimization 
               S01:00001C96:  33 FC 00 07 00 00 01 E0 [R]
F00:2074       edblock519
F00:2075       	jmp caseend452
               S01:00001C9E:  60 00 02 8C
F00:2076       casenext506
F00:2077       	move #$7,d0
               S01:00001CA2:  30 3C 00 07
F00:2078       	cmp.w effectNumber,d0
               S01:00001CA6:  B0 7A E5 38
F00:2079       	bne casenext525
               S01:00001CAA:  66 2A
F00:2080       	jsr CopperEffects
               S01:00001CAC:  61 00 F0 56
F00:2081       	cmp.l #$2800,screenOffset
               S01:00001CB0:  0C B9 00 00 28 00 00 00 00 BE [R]
F00:2082       	bhs eblock529
               S01:00001CBA:  64 06
F00:2083       ctb528: ;Main true block ;keep 
F00:2084       	jsr EffScrolldown
               S01:00001CBC:  61 00 FB 30
F00:2085       	jmp edblock530
               S01:00001CC0:  60 10
F00:2086       eblock529
F00:2087       	move.w #$8,effectNumber ; Simple a:=b optimization 
               S01:00001CC2:  33 FC 00 08 00 00 01 E0 [R]
F00:2088       	move.w #$0,frameCounter ; Simple a:=b optimization 
               S01:00001CCA:  33 FC 00 00 00 00 05 F6 [R]
F00:2089       edblock530
F00:2090       	jmp caseend452
               S01:00001CD2:  60 00 02 58
F00:2091       casenext525
F00:2092       	move #$8,d0
               S01:00001CD6:  30 3C 00 08
F00:2093       	cmp.w effectNumber,d0
               S01:00001CDA:  B0 7A E5 04
F00:2094       	bne casenext535
               S01:00001CDE:  66 60
F00:2095       	cmp.w #$18,musicPos
               S01:00001CE0:  0C 79 00 18 00 00 01 D4 [R]
F00:2096       	bne localfailed543
               S01:00001CE8:  66 02
F00:2097       	jmp ctb538
               S01:00001CEA:  60 22
F00:2098       localfailed543: ;keep
F00:2099       	; ; logical OR, second chance
F00:2100       	cmp.w #$2c,musicPos
               S01:00001CEC:  0C 79 00 2C 00 00 01 D4 [R]
F00:2101       	bne localfailed542
               S01:00001CF4:  66 02
F00:2102       	jmp ctb538
               S01:00001CF6:  60 16
F00:2103       localfailed542: ;keep
F00:2104       	; ; logical OR, second chance
F00:2105       	cmp.w #$48,musicPos
               S01:00001CF8:  0C 79 00 48 00 00 01 D4 [R]
F00:2106       	bne localfailed544
               S01:00001D00:  66 02
F00:2107       	jmp ctb538
               S01:00001D02:  60 0A
F00:2108       localfailed544: ;keep
F00:2109       	; ; logical OR, second chance
F00:2110       	cmp.w #$64,musicPos
               S01:00001D04:  0C 79 00 64 00 00 01 D4 [R]
F00:2111       	bne edblock540
               S01:00001D0C:  66 10
F00:2112       ctb538: ;Main true block ;keep 
F00:2113       	move.w #$9,effectNumber ; Simple a:=b optimization 
               S01:00001D0E:  33 FC 00 09 00 00 01 E0 [R]
F00:2114       	move.w musicPos,musicPosOld ; Simple a:=b optimization 
               S01:00001D16:  33 FA E4 BC 00 00 01 DE [R]
F00:2115       edblock540
F00:2116       	cmp.w #$64,musicPos
               S01:00001D1E:  0C 79 00 64 00 00 01 D4 [R]
F00:2117       	bne edblock549
               S01:00001D26:  66 10
F00:2118       ctb547: ;Main true block ;keep 
F00:2119       	move.w #$5b,effectNumber ; Simple a:=b optimization 
               S01:00001D28:  33 FC 00 5B 00 00 01 E0 [R]
F00:2120       	move.w musicPos,musicPosOld ; Simple a:=b optimization 
               S01:00001D30:  33 FA E4 A2 00 00 01 DE [R]
F00:2121       edblock549
F00:2122       	jsr CopperEffects
               S01:00001D38:  61 00 EF CA
F00:2123       	jmp caseend452
               S01:00001D3C:  60 00 01 EE
F00:2124       casenext535
F00:2125       	move #$9,d0
               S01:00001D40:  30 3C 00 09
F00:2126       	cmp.w effectNumber,d0
               S01:00001D44:  B0 7A E4 9A
F00:2127       	bne casenext552
               S01:00001D48:  66 00 00 DE
F00:2128       	move.w musicPosOld,d1          ; Loadvar regular end
               S01:00001D4C:  32 3A E4 90
F00:2129       	move.w musicPos,d0
               S01:00001D50:  30 3A E4 82
F00:2130       	cmp.w d1,d0
               S01:00001D54:  B0 41
F00:2131       	bls edblock557
               S01:00001D56:  63 10
F00:2132       ctb555: ;Main true block ;keep 
F00:2133       	move.w musicPos,musicPosOld ; Simple a:=b optimization 
               S01:00001D58:  33 FA E4 7A 00 00 01 DE [R]
F00:2134       	move.w #$0,frameCounter ; Simple a:=b optimization 
               S01:00001D60:  33 FC 00 00 00 00 05 F6 [R]
F00:2135       edblock557
F00:2136       	cmp.w #$1,foamCounter
               S01:00001D68:  0C 79 00 01 00 00 00 C2 [R]
F00:2137       	bls eblock562
               S01:00001D70:  63 42
F00:2138       ctb561: ;Main true block ;keep 
F00:2139       	add.w #$1,frameCounter ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00001D72:  52 79 00 00 05 F6 [R]
F00:2140       	cmp.w #$18,frameCounter
               S01:00001D78:  0C 79 00 18 00 00 05 F6 [R]
F00:2141       	bls localfailed591
               S01:00001D80:  63 0C
F00:2142       localsuccess592: ;keep
F00:2143       	; ; logical AND, second requirement
F00:2144       	cmp.w #$23,frameCounter
               S01:00001D82:  0C 79 00 23 00 00 05 F6 [R]
F00:2145       	bhs localfailed591
               S01:00001D8A:  64 02
F00:2146       	jmp ctb587
               S01:00001D8C:  60 14
F00:2147       localfailed591: ;keep
F00:2148       	; ; logical OR, second chance
F00:2149       	cmp.w #$58,frameCounter
               S01:00001D8E:  0C 79 00 58 00 00 05 F6 [R]
F00:2150       	bls edblock589
               S01:00001D96:  63 16
F00:2151       localsuccess593: ;keep
F00:2152       	; ; logical AND, second requirement
F00:2153       	cmp.w #$63,frameCounter
               S01:00001D98:  0C 79 00 63 00 00 05 F6 [R]
F00:2154       	bhs edblock589
               S01:00001DA0:  64 0C
F00:2155       ctb587: ;Main true block ;keep 
F00:2156       	sub.w #$1,foamCounter ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00001DA2:  53 79 00 00 00 C2 [R]
F00:2157       	add.w #$1,yOffset ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00001DA8:  52 79 00 00 00 C6 [R]
F00:2158       edblock589
F00:2159       	jsr EffBeerDrink
               S01:00001DAE:  61 00 F9 C8
F00:2160       	jmp edblock563
               S01:00001DB2:  60 6C
F00:2161       eblock562
F00:2162       	move.l #imageRestoreCup,rc_srcimage ; Simple a:=b optimization 
               S01:00001DB4:  23 FC 00 02 57 1C 00 00 17 FC [R]
F00:2163       	move.l screen,rc_dstimage ; Simple a:=b optimization 
               S01:00001DBE:  23 FA E4 08 00 00 18 00 [R]
F00:2164       	move.w #$3d,rc_yoffset ; Simple a:=b optimization 
               S01:00001DC6:  33 FC 00 3D 00 00 18 04 [R]
F00:2165       	moveq #0,d0
               S01:00001DCE:  70 00
F00:2166       	move.w #$a2,d0
               S01:00001DD0:  30 3C 00 A2
F00:2167       	move.l d0,rc_height
               S01:00001DD4:  23 C0 00 00 18 06 [R]
F00:2168       	jsr RestoreCup
               S01:00001DDA:  61 00 FA 30
F00:2169       	cmp.w #$20,musicPos
               S01:00001DDE:  0C 79 00 20 00 00 01 D4 [R]
F00:2170       	bne localfailed602
               S01:00001DE6:  66 02
F00:2171       	jmp ctb597
               S01:00001DE8:  60 2E
F00:2172       localfailed602: ;keep
F00:2173       	; ; logical OR, second chance
F00:2174       	cmp.w #$34,musicPos
               S01:00001DEA:  0C 79 00 34 00 00 01 D4 [R]
F00:2175       	bne localfailed601
               S01:00001DF2:  66 02
F00:2176       	jmp ctb597
               S01:00001DF4:  60 22
F00:2177       localfailed601: ;keep
F00:2178       	; ; logical OR, second chance
F00:2179       	cmp.w #$4,musicPos
               S01:00001DF6:  0C 79 00 04 00 00 01 D4 [R]
F00:2180       	bne localfailed604
               S01:00001DFE:  66 02
F00:2181       	jmp ctb597
               S01:00001E00:  60 16
F00:2182       localfailed604: ;keep
F00:2183       	; ; logical OR, second chance
F00:2184       	cmp.w #$50,musicPos
               S01:00001E02:  0C 79 00 50 00 00 01 D4 [R]
F00:2185       	bne localfailed603
               S01:00001E0A:  66 02
F00:2186       	jmp ctb597
               S01:00001E0C:  60 0A
F00:2187       localfailed603: ;keep
F00:2188       	; ; logical OR, second chance
F00:2189       	cmp.w #$6c,musicPos
               S01:00001E0E:  0C 79 00 6C 00 00 01 D4 [R]
F00:2190       	bne edblock599
               S01:00001E16:  66 08
F00:2191       ctb597: ;Main true block ;keep 
F00:2192       	move.w #$a,effectNumber ; Simple a:=b optimization 
               S01:00001E18:  33 FC 00 0A 00 00 01 E0 [R]
F00:2193       edblock599
F00:2194       edblock563
F00:2195       	jsr CopperEffects
               S01:00001E20:  61 00 EE E2
F00:2196       	jmp caseend452
               S01:00001E24:  60 00 01 06
F00:2197       casenext552
F00:2198       	move #$5b,d0
               S01:00001E28:  30 3C 00 5B
F00:2199       	cmp.w effectNumber,d0
               S01:00001E2C:  B0 7A E3 B2
F00:2200       	bne casenext606
               S01:00001E30:  66 00 00 C6
F00:2201       	move.w musicPosOld,d1          ; Loadvar regular end
               S01:00001E34:  32 3A E3 A8
F00:2202       	move.w musicPos,d0
               S01:00001E38:  30 3A E3 9A
F00:2203       	cmp.w d1,d0
               S01:00001E3C:  B0 41
F00:2204       	bls edblock611
               S01:00001E3E:  63 10
F00:2205       ctb609: ;Main true block ;keep 
F00:2206       	move.w musicPos,musicPosOld ; Simple a:=b optimization 
               S01:00001E40:  33 FA E3 92 00 00 01 DE [R]
F00:2207       	move.w #$0,frameCounter ; Simple a:=b optimization 
               S01:00001E48:  33 FC 00 00 00 00 05 F6 [R]
F00:2208       edblock611
F00:2209       	cmp.w #$1,foamCounter
               S01:00001E50:  0C 79 00 01 00 00 00 C2 [R]
F00:2210       	bls eblock616
               S01:00001E58:  63 2C
F00:2211       ctb615: ;Main true block ;keep 
F00:2212       	add.w #$1,frameCounter ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00001E5A:  52 79 00 00 05 F6 [R]
F00:2213       	cmp.w #$18,frameCounter
               S01:00001E60:  0C 79 00 18 00 00 05 F6 [R]
F00:2214       	bls edblock641
               S01:00001E68:  63 16
F00:2215       localsuccess643: ;keep
F00:2216       	; ; logical AND, second requirement
F00:2217       	cmp.w #$2e,frameCounter
               S01:00001E6A:  0C 79 00 2E 00 00 05 F6 [R]
F00:2218       	bhs edblock641
               S01:00001E72:  64 0C
F00:2219       ctb639: ;Main true block ;keep 
F00:2220       	sub.w #$1,foamCounter ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00001E74:  53 79 00 00 00 C2 [R]
F00:2221       	add.w #$1,yOffset ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00001E7A:  52 79 00 00 00 C6 [R]
F00:2222       edblock641
F00:2223       	jsr EffBeerDrink
               S01:00001E80:  61 00 F8 F6
F00:2224       	jmp edblock617
               S01:00001E84:  60 6C
F00:2225       eblock616
F00:2226       	move.l #imageRestoreCup,rc_srcimage ; Simple a:=b optimization 
               S01:00001E86:  23 FC 00 02 57 1C 00 00 17 FC [R]
F00:2227       	move.l screen,rc_dstimage ; Simple a:=b optimization 
               S01:00001E90:  23 FA E3 36 00 00 18 00 [R]
F00:2228       	move.w #$3d,rc_yoffset ; Simple a:=b optimization 
               S01:00001E98:  33 FC 00 3D 00 00 18 04 [R]
F00:2229       	moveq #0,d0
               S01:00001EA0:  70 00
F00:2230       	move.w #$a2,d0
               S01:00001EA2:  30 3C 00 A2
F00:2231       	move.l d0,rc_height
               S01:00001EA6:  23 C0 00 00 18 06 [R]
F00:2232       	jsr RestoreCup
               S01:00001EAC:  61 00 F9 5E
F00:2233       	cmp.w #$20,musicPos
               S01:00001EB0:  0C 79 00 20 00 00 01 D4 [R]
F00:2234       	bne localfailed652
               S01:00001EB8:  66 02
F00:2235       	jmp ctb647
               S01:00001EBA:  60 2E
F00:2236       localfailed652: ;keep
F00:2237       	; ; logical OR, second chance
F00:2238       	cmp.w #$34,musicPos
               S01:00001EBC:  0C 79 00 34 00 00 01 D4 [R]
F00:2239       	bne localfailed651
               S01:00001EC4:  66 02
F00:2240       	jmp ctb647
               S01:00001EC6:  60 22
F00:2241       localfailed651: ;keep
F00:2242       	; ; logical OR, second chance
F00:2243       	cmp.w #$4,musicPos
               S01:00001EC8:  0C 79 00 04 00 00 01 D4 [R]
F00:2244       	bne localfailed654
               S01:00001ED0:  66 02
F00:2245       	jmp ctb647
               S01:00001ED2:  60 16
F00:2246       localfailed654: ;keep
F00:2247       	; ; logical OR, second chance
F00:2248       	cmp.w #$50,musicPos
               S01:00001ED4:  0C 79 00 50 00 00 01 D4 [R]
F00:2249       	bne localfailed653
               S01:00001EDC:  66 02
F00:2250       	jmp ctb647
               S01:00001EDE:  60 0A
F00:2251       localfailed653: ;keep
F00:2252       	; ; logical OR, second chance
F00:2253       	cmp.w #$6c,musicPos
               S01:00001EE0:  0C 79 00 6C 00 00 01 D4 [R]
F00:2254       	bne edblock649
               S01:00001EE8:  66 08
F00:2255       ctb647: ;Main true block ;keep 
F00:2256       	move.w #$a,effectNumber ; Simple a:=b optimization 
               S01:00001EEA:  33 FC 00 0A 00 00 01 E0 [R]
F00:2257       edblock649
F00:2258       edblock617
F00:2259       	jsr CopperEffects
               S01:00001EF2:  61 00 EE 10
F00:2260       	jmp caseend452
               S01:00001EF6:  60 34
F00:2261       casenext606
F00:2262       	move #$a,d0
               S01:00001EF8:  30 3C 00 0A
F00:2263       	cmp.w effectNumber,d0
               S01:00001EFC:  B0 7A E2 E2
F00:2264       	bne casenext656
               S01:00001F00:  66 2A
F00:2265       	add.w #$1,beerinput ; Optimization: simple A := A op Const ADD SUB OR AND
               S01:00001F02:  52 79 00 00 01 D8 [R]
F00:2266       	jsr DistortMore
               S01:00001F08:  61 00 EF 60
F00:2267       	move.w #$0,eff0Counter ; Simple a:=b optimization 
               S01:00001F0C:  33 FC 00 00 00 00 00 C4 [R]
F00:2268       	move.w #$4,effectNumber ; Simple a:=b optimization 
               S01:00001F14:  33 FC 00 04 00 00 01 E0 [R]
F00:2269       	move.w #$97,foamCounter ; Simple a:=b optimization 
               S01:00001F1C:  33 FC 00 97 00 00 00 C2 [R]
F00:2270       	move.w #$1,yOffset ; Simple a:=b optimization 
               S01:00001F24:  33 FC 00 01 00 00 00 C6 [R]
F00:2271       casenext656
F00:2272       caseend452
F00:2273       	jmp while236
               S01:00001F2C:  60 00 FB 88
F00:2274       edblock239
F00:2275       loopend241
F00:2276       	 	CNOP 0,4
F00:2277       	 	CNOP 0,4
F00:2278       ; exit gracefully - reverse everything done in init
F00:2279       	move.w #$7fff,DMACON
               S01:00001F30:  33 FC 7F FF 00 DF F0 96
F00:2280       	move.w	olddmareq,DMACON
               S01:00001F38:  33 FA 00 A6 00 DF F0 96
F00:2281       	move.w #$7fff,INTENA
               S01:00001F40:  33 FC 7F FF 00 DF F0 9A
F00:2282       	move.w	oldintena,INTENA
               S01:00001F48:  33 FA 00 9A 00 DF F0 9A
F00:2283       	move.w #$7fff,INTREQ
               S01:00001F50:  33 FC 7F FF 00 DF F0 9C
F00:2284       	move.w	oldintreq,INTREQ
               S01:00001F58:  33 FA 00 88 00 DF F0 9C
F00:2285       	move.w #$7fff,ADKCON
               S01:00001F60:  33 FC 7F FF 00 DF F0 9E
F00:2286       	move.w	oldadkcon,ADKCON
               S01:00001F68:  33 FA 00 7C 00 DF F0 9E
F00:2287       
F00:2288       	move.l	oldcopper,COP1LCH
               S01:00001F70:  23 FA 00 62 00 DF F0 80
F00:2289       	move.l 	gfxbase,a6
               S01:00001F78:  2C 7A 00 5E
F00:2290       	move.l 	oldview,a1
               S01:00001F7C:  22 7A 00 52
F00:2291       	jsr -222(a6)	; LoadView
               S01:00001F80:  4E AE FF 22
F00:2292       	jsr -270(a6)	; WaitTOF
               S01:00001F84:  4E AE FE F2
F00:2293       	jsr -270(a6)	; WaitTOF
               S01:00001F88:  4E AE FE F2
F00:2294       	move.l	$4,a6
               S01:00001F8C:  2C 78 00 04
F00:2295       	jsr -138(a6)	; Permit
               S01:00001F90:  4E AE FF 76
F00:2296       
F00:2297       	; end program
F00:2298       	movem.l (sp)+,d0-d7/a0-a6
               S01:00001F94:  4C DF 7F FF
F00:2299       	rts
               S01:00001F98:  4E 75
F00:2300       
F00:2301       
F00:2302       ;** PROCEDURES
F00:2303       ; d6 = src shift
F00:2304       ; d1 = dst x
F00:2305       ; d2 = dst y
F00:2306       ; d3 = modulo
F00:2307       ; a0 = source
F00:2308       ; a1 = dest
F00:2309       ; d4 = blitter size
F00:2310       ; d5 = bltmod
F00:2311       blitter:
F00:2312           add.l   d6,a0
               S01:00001F9A:  D1 C6
F00:2313           mulu.w  d3,d2
               S01:00001F9C:  C4 C3
F00:2314           add.l   d1,d2
               S01:00001F9E:  D4 81
F00:2315           add.l   d2,a1
               S01:00001FA0:  D3 C2
F00:2316                               ; Leftshift 1, use channels A and D, copy A -> D
F00:2317       
F00:2318           move.l  #$ffffffff,BLTAFWM(a6) ; Set last word and first word mask BLTAFWM and BLTALWM
               S01:00001FA2:  2D 7C FF FF FF FF 00 44
F00:2319       .lp:
F00:2320       
F00:2321       .litwait: ; Wait for blitter to be done
F00:2322           btst    #14,DMACONR
               S01:00001FAA:  08 39 00 0E 00 DF F0 02
F00:2323           bne.s   .litwait
               S01:00001FB2:  66 F6
F00:2324       
F00:2325           move.w  d0,BLTCON0(a6)  ; Set registers; BLTCON0
               S01:00001FB4:  3D 40 00 40
F00:2326           move.l  a0,BLTAPTH(a6) ; src 
               S01:00001FB8:  2D 48 00 50
F00:2327           move.l  a1,BLTBPTH(a6) ; BLT Dest PTR
               S01:00001FBC:  2D 49 00 4C
F00:2328           move.l  a1,BLTCPTH(a6) ; BLT Dest PTR
               S01:00001FC0:  2D 49 00 48
F00:2329           move.l  a1,BLTDPTH(a6) ; BLT Dest PTR
               S01:00001FC4:  2D 49 00 54
F00:2330           move.w  d4,BLTSIZE(a6) ; BLTSIZE & Start blitter
               S01:00001FC8:  3D 44 00 58
F00:2331           rts
               S01:00001FCC:  4E 75
F00:2332       
F00:2333       ; 1001
F00:2334       
F00:2335       
F00:2336       
F00:2337       
F00:2338       ; storage for 32-bit addresses and data
F00:2339       	CNOP 0,4
F00:2340       oldview:	dc.l 0
               S01:00001FD0:  00 00 00 00
F00:2341       oldcopper:	dc.l 0
               S01:00001FD4:  00 00 00 00
F00:2342       gfxbase:	dc.l 0
               S01:00001FD8:  00 00 00 00
F00:2343       frame:          dc.l 0
               S01:00001FDC:  00 00 00 00
F00:2344       
F00:2345       ; storage for 16-bit data
F00:2346       	CNOP 0,4
F00:2347       olddmareq:	dc.w 0
               S01:00001FE0:  00 00
F00:2348       oldintreq:	dc.w 0
               S01:00001FE2:  00 00
F00:2349       oldintena:	dc.w 0
               S01:00001FE4:  00 00
F00:2350       oldadkcon:	dc.w 0
               S01:00001FE6:  00 00
F00:2351       
F00:2352       copper_index    dc.w 0
               S01:00001FE8:  00 00
F00:2353       	CNOP 0,4
F00:2354       gfxname: dc.b 'graphics.library',0
               S01:00001FEC:  67 72 61 70 68 69 63 73 2E 6C 69 62 72 61 72 79
               S01:00001FFC:  00
F00:2355       
F00:2356       
F00:2357       
F00:2358         section datachip,data_c
F00:2359       
F00:2360       Chip:
F00:2361       
F00:2362           even
F00:2363       cop:
F00:2364           dc.w    $008e
               S02:00000000:  00 8E
F00:2365       copper_diwstrt:
F00:2366           dc.w    $2c81,$0090
               S02:00000002:  2C 81
               S02:00000004:  00 90
F00:2367       copper_diwstop:
F00:2368           dc.w    $2cc1
               S02:00000006:  2C C1
F00:2369       
F00:2370           
F00:2371           dc.w    $0092
               S02:00000008:  00 92
F00:2372       ddfstrt:
F00:2373       ; 
F00:2374           dc.w    $0038,$0094
               S02:0000000A:  00 38
               S02:0000000C:  00 94
F00:2375       ddfstop:
F00:2376           dc.w    $00d0
               S02:0000000E:  00 D0
F00:2377           dc.w    $0108
               S02:00000010:  01 08
F00:2378       copper_mod_even:
F00:2379       
F00:2380       ;set bplmodulo here
F00:2381           dc.w    0,$010a
               S02:00000012:  00 00
               S02:00000014:  01 0A
F00:2382       copper_mod_odd:
F00:2383       ;set bplmodulo here
F00:2384           dc.w    0
               S02:00000016:  00 00
F00:2385       
F00:2386       
F00:2387       
F00:2388       
F00:2389           
F00:2390       copper_spritestruct0:
F00:2391           dc.w $120,0, $122,0
               S02:00000018:  01 20
               S02:0000001A:  00 00
               S02:0000001C:  01 22
               S02:0000001E:  00 00
F00:2392       copper_spritestruct1:
F00:2393           dc.w $124,0, $126,0
               S02:00000020:  01 24
               S02:00000022:  00 00
               S02:00000024:  01 26
               S02:00000026:  00 00
F00:2394       copper_spritestruct2:
F00:2395           dc.w $128,0, $12A,0
               S02:00000028:  01 28
               S02:0000002A:  00 00
               S02:0000002C:  01 2A
               S02:0000002E:  00 00
F00:2396       copper_spritestruct3:
F00:2397           dc.w $12C,0, $12E,0
               S02:00000030:  01 2C
               S02:00000032:  00 00
               S02:00000034:  01 2E
               S02:00000036:  00 00
F00:2398       copper_spritestruct4:
F00:2399           dc.w $130,0, $132,0
               S02:00000038:  01 30
               S02:0000003A:  00 00
               S02:0000003C:  01 32
               S02:0000003E:  00 00
F00:2400       copper_spritestruct5:
F00:2401           dc.w $134,0, $136,0
               S02:00000040:  01 34
               S02:00000042:  00 00
               S02:00000044:  01 36
               S02:00000046:  00 00
F00:2402       copper_spritestruct6:
F00:2403           dc.w $138,0, $13A,0
               S02:00000048:  01 38
               S02:0000004A:  00 00
               S02:0000004C:  01 3A
               S02:0000004E:  00 00
F00:2404       copper_spritestruct7:
F00:2405           dc.w $13C,0, $13E,0
               S02:00000050:  01 3C
               S02:00000052:  00 00
               S02:00000054:  01 3E
               S02:00000056:  00 00
F00:2406       
F00:2407       copper_spritedata0:
F00:2408           dc.w $144,0, $146,0
               S02:00000058:  01 44
               S02:0000005A:  00 00
               S02:0000005C:  01 46
               S02:0000005E:  00 00
F00:2409       copper_spritedata1:
F00:2410           dc.w $14C,0, $14E,0
               S02:00000060:  01 4C
               S02:00000062:  00 00
               S02:00000064:  01 4E
               S02:00000066:  00 00
F00:2411       
F00:2412       
F00:2413       copper_palette:
F00:2414           dc.w    $0180, $000
               S02:00000068:  01 80
               S02:0000006A:  00 00
F00:2415           dc.w    $0182, $fff
               S02:0000006C:  01 82
               S02:0000006E:  0F FF
F00:2416           dc.w    $0184, $236
               S02:00000070:  01 84
               S02:00000072:  02 36
F00:2417           dc.w    $0186, $ba7
               S02:00000074:  01 86
               S02:00000076:  0B A7
F00:2418           dc.w    $0188, $836
               S02:00000078:  01 88
               S02:0000007A:  08 36
F00:2419           dc.w    $018a, $485
               S02:0000007C:  01 8A
               S02:0000007E:  04 85
F00:2420           dc.w    $018c, $723
               S02:00000080:  01 8C
               S02:00000082:  07 23
F00:2421           dc.w    $018e, $6cb
               S02:00000084:  01 8E
               S02:00000086:  06 CB
F00:2422           dc.w    $0190, $246
               S02:00000088:  01 90
               S02:0000008A:  02 46
F00:2423           dc.w    $0192, $034
               S02:0000008C:  01 92
               S02:0000008E:  00 34
F00:2424           dc.w    $0194, $569
               S02:00000090:  01 94
               S02:00000092:  05 69
F00:2425           dc.w    $0196, $444
               S02:00000094:  01 96
               S02:00000096:  04 44
F00:2426           dc.w    $0198, $666
               S02:00000098:  01 98
               S02:0000009A:  06 66
F00:2427           dc.w    $019a, $8d9
               S02:0000009C:  01 9A
               S02:0000009E:  08 D9
F00:2428           dc.w    $019c, $b56
               S02:000000A0:  01 9C
               S02:000000A2:  0B 56
F00:2429           dc.w    $019e, $999
               S02:000000A4:  01 9E
               S02:000000A6:  09 99
F00:2430       
F00:2431           dc.w    $01A0, $000
               S02:000000A8:  01 A0
               S02:000000AA:  00 00
F00:2432           dc.w    $01A2, $fff
               S02:000000AC:  01 A2
               S02:000000AE:  0F FF
F00:2433           dc.w    $01A4, $236
               S02:000000B0:  01 A4
               S02:000000B2:  02 36
F00:2434           dc.w    $01A6, $ba7
               S02:000000B4:  01 A6
               S02:000000B6:  0B A7
F00:2435           dc.w    $01A8, $836
               S02:000000B8:  01 A8
               S02:000000BA:  08 36
F00:2436           dc.w    $01Aa, $485
               S02:000000BC:  01 AA
               S02:000000BE:  04 85
F00:2437           dc.w    $01Ac, $723
               S02:000000C0:  01 AC
               S02:000000C2:  07 23
F00:2438           dc.w    $01Ae, $6cb
               S02:000000C4:  01 AE
               S02:000000C6:  06 CB
F00:2439           dc.w    $01B0, $246
               S02:000000C8:  01 B0
               S02:000000CA:  02 46
F00:2440           dc.w    $01B2, $034
               S02:000000CC:  01 B2
               S02:000000CE:  00 34
F00:2441           dc.w    $01B4, $569
               S02:000000D0:  01 B4
               S02:000000D2:  05 69
F00:2442           dc.w    $01B6, $444
               S02:000000D4:  01 B6
               S02:000000D6:  04 44
F00:2443           dc.w    $01B8, $666
               S02:000000D8:  01 B8
               S02:000000DA:  06 66
F00:2444           dc.w    $01Ba, $8d9
               S02:000000DC:  01 BA
               S02:000000DE:  08 D9
F00:2445           dc.w    $01Bc, $b56
               S02:000000E0:  01 BC
               S02:000000E2:  0B 56
F00:2446           dc.w    $01Be, $999
               S02:000000E4:  01 BE
               S02:000000E6:  09 99
F00:2447       
F00:2448       
F00:2449       
F00:2450       
F00:2451       
F00:2452       copper_bitplane0:
F00:2453           dc.w    $e0,0
               S02:000000E8:  00 E0
               S02:000000EA:  00 00
F00:2454           dc.w    $e2,0
               S02:000000EC:  00 E2
               S02:000000EE:  00 00
F00:2455       copper_bitplane1:
F00:2456           dc.w    $e4,0
               S02:000000F0:  00 E4
               S02:000000F2:  00 00
F00:2457           dc.w    $e6,0
               S02:000000F4:  00 E6
               S02:000000F6:  00 00
F00:2458       copper_bitplane2:
F00:2459           dc.w    $e8,0
               S02:000000F8:  00 E8
               S02:000000FA:  00 00
F00:2460           dc.w    $ea,0
               S02:000000FC:  00 EA
               S02:000000FE:  00 00
F00:2461       copper_bitplane3:
F00:2462           dc.w    $ec,0
               S02:00000100:  00 EC
               S02:00000102:  00 00
F00:2463           dc.w    $ee,0
               S02:00000104:  00 EE
               S02:00000106:  00 00
F00:2464       copper_bitplane4:
F00:2465           dc.w    $f0,0
               S02:00000108:  00 F0
               S02:0000010A:  00 00
F00:2466           dc.w    $f2,0
               S02:0000010C:  00 F2
               S02:0000010E:  00 00
F00:2467       
F00:2468       
F00:2469       copbplcon1:
F00:2470           dc.l    $01020000
               S02:00000110:  01 02 00 00
F00:2471           dc.l    $2c01fffe
               S02:00000114:  2C 01 FF FE
F00:2472       copbplcon0
F00:2473       ; Set bitplane  B
F00:2474          dc.w    $0100
               S02:00000118:  01 00
F00:2475       copper_resolution
F00:2476          dc.w     $4200 
               S02:0000011A:  42 00
F00:2477       
F00:2478       copper_custom:
F00:2479           dc.w	$ffdf, $fffe
               S02:0000011C:  FF DF
               S02:0000011E:  FF FE
F00:2480           dc.w	$2401, $fffe
               S02:00000120:  24 01
               S02:00000122:  FF FE
F00:2481           dc.w	$0100, $0200
               S02:00000124:  01 00
               S02:00000126:  02 00
F00:2482           dc.l    $fffffffe
               S02:00000128:  FF FF FF FE
F00:2483       
F00:2484       ;    dc.l    $2d01fffe, $01800000
F00:2485        ;   dc.l    $8001fffe, $01002200
F00:2486         ;  dc.l    $9001fffe, $01001200
F00:2487       ;    dc.l    $ffdffffe
F00:2488        ;   dc.l    $0d01fffe, $01000200
F00:2489        blk.l   1024
F00:2490           dc.l    $fffffffe
               S02:0000112C:  FF FF FF FE
F00:2491       
F00:2492       
F00:2493       spritepointer:
F00:2494           blk.b    256
F00:2495       
F00:2496       
F00:2497       
F00:2498       
F00:2499       
F00:2500       
F00:2501       	Section ChipRAM,Data_c
F00:2502        	CNOP 0,4
F00:2503       	 	CNOP 0,4
F00:2504       music
F00:2505       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/music/terra-mesta4.lsmusic"
               S03:00000000:  4C 53 50 31 E4 40 72 0E 01 19 00 01 00 7D 00 3C
               S03:00000010:  00 49 00 4B 00 00 3A 00 00 30 00 00 63 AA 01 42
F00:2506       	 	CNOP 0,4
F00:2507       	 	CNOP 0,4
F00:2508       bank
F00:2509       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/music/terra-mesta4.lsbank"
               S03:0001E814:  E4 40 72 0E 1A 31 44 AC 5E 64 67 68 67 64 60 5B
               S03:0001E824:  55 4E 47 3F 36 2E 26 1F 17 10 0A 04 FD F7 F1 EB
F00:2510       	 	CNOP 0,4
F00:2511       	 	CNOP 0,4
F00:2512       imageRestoreCup
F00:2513       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/restorecup.BPL"
               S03:0002571C:  00 28 00 00 00 00 00 00 00 00 02 80 00 2C 00 00
               S03:0002572C:  00 00 00 00 00 00 03 40 00 38 00 00 00 00 00 00
F00:2514       	 	CNOP 0,4
F00:2515       	 	CNOP 0,4
F00:2516       image1
F00:2517       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/cupempty.BPL"
               S03:00027D14:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
               S03:00027D24:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
F00:2518       	 	CNOP 0,4
F00:2519       	 	CNOP 0,4
F00:2520       image2
F00:2521       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/cupempty.BPL"
               S03:00043424:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
               S03:00043434:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
F00:2522       	 	CNOP 0,4
F00:2523       	 	CNOP 0,4
F00:2524       imageCupFull
F00:2525       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/cupfull.BPL"
               S03:0005EB34:  00 5F E1 FC 00 00 00 3F FA 1F FF A0 00 3F F8 7F
               S03:0005EB44:  FF FF FF FF 00 7E 01 50 00 60 40 00 00 00 01 FF
F00:2526       	 	CNOP 0,4
F00:2527       	 	CNOP 0,4
F00:2528       imageFoam
F00:2529       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/foam.BPL"
               S03:00060C40:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
               S03:00060C50:  00 00 00 00 00 2C 00 00 00 00 00 00 00 00 00 00
F00:2530       	 	CNOP 0,4
F00:2531       	 	CNOP 0,4
F00:2532       imageMask
F00:2533       	incbin "C:/Users/uersu/Documents/GitData/compofiller///resources/images/mask.BPL"
               S03:000610B4:  00 00 00 00 00 00 00 00 00 74 00 00 00 00 00 00
               S03:000610C4:  00 00 00 01 FF FF E0 00 00 00 01 FF 00 00 00 1F
F00:2534       	 	CNOP 0,4
F00:2535       


Sections:
S01  CODE
S02  datachip
S03  ChipRAM


Sources:
F00  C:\Users\uersu\Documents\GitData\compofiller\\main.asm


Symbols:
spritepointer LAB (0x1130) UNUSED sec=datachip 
copbplcon0 LAB (0x118) UNUSED sec=datachip 
copbplcon1 LAB (0x110) UNUSED sec=datachip 
copper_spritedata1 LAB (0x60) UNUSED sec=datachip 
copper_spritedata0 LAB (0x58) UNUSED sec=datachip 
copper_spritestruct7 LAB (0x50) UNUSED sec=datachip 
copper_spritestruct6 LAB (0x48) UNUSED sec=datachip 
copper_spritestruct5 LAB (0x40) UNUSED sec=datachip 
copper_spritestruct4 LAB (0x38) UNUSED sec=datachip 
copper_spritestruct3 LAB (0x30) UNUSED sec=datachip 
copper_spritestruct2 LAB (0x28) UNUSED sec=datachip 
copper_spritestruct1 LAB (0x20) UNUSED sec=datachip 
copper_spritestruct0 LAB (0x18) UNUSED sec=datachip 
ddfstop LAB (0xe) UNUSED sec=datachip 
ddfstrt LAB (0xa) UNUSED sec=datachip 
copper_diwstop LAB (0x6) UNUSED sec=datachip 
copper_diwstrt LAB (0x2) UNUSED sec=datachip 
Chip LAB (0x0) UNUSED sec=datachip 
copper_index LAB (0x1fe8) UNUSED sec=CODE 
frame LAB (0x1fdc) UNUSED sec=CODE 
 blitter .litwait LAB (0x1faa) sec=CODE 
 blitter .lp LAB (0x1faa) UNUSED sec=CODE 
loopend241 LAB (0x1f30) UNUSED sec=CODE 
casenext656 LAB (0x1f2c) sec=CODE 
edblock649 LAB (0x1ef2) sec=CODE 
localfailed653 LAB (0x1ee0) sec=CODE 
localfailed654 LAB (0x1ed4) sec=CODE 
localfailed651 LAB (0x1ec8) sec=CODE 
ctb647 LAB (0x1eea) sec=CODE 
localfailed652 LAB (0x1ebc) sec=CODE 
edblock617 LAB (0x1ef2) sec=CODE 
ctb639 LAB (0x1e74) UNUSED sec=CODE 
localsuccess643 LAB (0x1e6a) UNUSED sec=CODE 
edblock641 LAB (0x1e80) sec=CODE 
ctb615 LAB (0x1e5a) UNUSED sec=CODE 
eblock616 LAB (0x1e86) sec=CODE 
ctb609 LAB (0x1e40) UNUSED sec=CODE 
edblock611 LAB (0x1e50) sec=CODE 
casenext606 LAB (0x1ef8) sec=CODE 
edblock599 LAB (0x1e20) sec=CODE 
localfailed603 LAB (0x1e0e) sec=CODE 
localfailed604 LAB (0x1e02) sec=CODE 
localfailed601 LAB (0x1df6) sec=CODE 
ctb597 LAB (0x1e18) sec=CODE 
localfailed602 LAB (0x1dea) sec=CODE 
edblock563 LAB (0x1e20) sec=CODE 
localsuccess593 LAB (0x1d98) UNUSED sec=CODE 
edblock589 LAB (0x1dae) sec=CODE 
ctb587 LAB (0x1da2) sec=CODE 
localsuccess592 LAB (0x1d82) UNUSED sec=CODE 
localfailed591 LAB (0x1d8e) sec=CODE 
ctb561 LAB (0x1d72) UNUSED sec=CODE 
eblock562 LAB (0x1db4) sec=CODE 
ctb555 LAB (0x1d58) UNUSED sec=CODE 
edblock557 LAB (0x1d68) sec=CODE 
casenext552 LAB (0x1e28) sec=CODE 
ctb547 LAB (0x1d28) UNUSED sec=CODE 
edblock549 LAB (0x1d38) sec=CODE 
edblock540 LAB (0x1d1e) sec=CODE 
localfailed544 LAB (0x1d04) sec=CODE 
localfailed542 LAB (0x1cf8) sec=CODE 
ctb538 LAB (0x1d0e) sec=CODE 
localfailed543 LAB (0x1cec) sec=CODE 
casenext535 LAB (0x1d40) sec=CODE 
edblock530 LAB (0x1cd2) sec=CODE 
ctb528 LAB (0x1cbc) UNUSED sec=CODE 
eblock529 LAB (0x1cc2) sec=CODE 
casenext525 LAB (0x1cd6) sec=CODE 
edblock519 LAB (0x1c9e) sec=CODE 
localfailed523 LAB (0x1c8c) sec=CODE 
localfailed521 LAB (0x1c80) sec=CODE 
ctb517 LAB (0x1c96) sec=CODE 
localfailed522 LAB (0x1c74) sec=CODE 
edblock511 LAB (0x1c68) sec=CODE 
ctb509 LAB (0x1c56) UNUSED sec=CODE 
eblock510 LAB (0x1c60) sec=CODE 
casenext506 LAB (0x1ca2) sec=CODE 
ctb501 LAB (0x1bd8) UNUSED sec=CODE 
edblock503 LAB (0x1c30) sec=CODE 
edblock494 LAB (0x1bce) sec=CODE 
localfailed498 LAB (0x1bbc) sec=CODE 
localfailed496 LAB (0x1bb0) sec=CODE 
ctb492 LAB (0x1bc6) sec=CODE 
localfailed497 LAB (0x1ba4) sec=CODE 
casenext489 LAB (0x1c3e) sec=CODE 
edblock484 LAB (0x1b7c) sec=CODE 
ctb482 LAB (0x1b6e) UNUSED sec=CODE 
eblock483 LAB (0x1b74) sec=CODE 
casenext479 LAB (0x1b8c) sec=CODE 
ctb474 LAB (0x1b4c) UNUSED sec=CODE 
edblock476 LAB (0x1b54) sec=CODE 
casenext471 LAB (0x1b5c) sec=CODE 
edblock466 LAB (0x1b2c) sec=CODE 
ctb464 LAB (0x1b1e) UNUSED sec=CODE 
eblock465 LAB (0x1b24) sec=CODE 
casenext461 LAB (0x1b34) sec=CODE 
caseend452 LAB (0x1f2c) sec=CODE 
ctb456 LAB (0x1afe) UNUSED sec=CODE 
edblock458 LAB (0x1b06) sec=CODE 
casenext453 LAB (0x1b0a) sec=CODE 
waitVB451 LAB (0x1ac0) sec=CODE 
ctb237 LAB (0x1ac0) UNUSED sec=CODE 
edblock239 LAB (0x1f30) sec=CODE 
loopstart240 LAB (0x1ab6) UNUSED sec=CODE 
while236 LAB (0x1ab6) sec=CODE 
memcpy235 LAB (0x1ab0) sec=CODE 
copper_palette LAB (0x68) REF sec=datachip 
bank LAB (0x1e814) REF sec=ChipRAM 
music LAB (0x0) REF sec=ChipRAM 
Get_Musicpos LAB (0x1a4a) sec=CODE 
waitforblitter233 LAB (0x19f4) sec=CODE 
waitforblitter232 LAB (0x1986) sec=CODE 
waitforblitter231 LAB (0x1918) sec=CODE 
waitforblitter230 LAB (0x18aa) sec=CODE 
waitforblitter229 LAB (0x183c) sec=CODE 
RestoreCup LAB (0x180c) sec=CODE 
rc_height LAB (0x1806) REF sec=CODE 
rc_yoffset LAB (0x1804) REF sec=CODE 
rc_dstimage LAB (0x1800) REF sec=CODE 
rc_srcimage LAB (0x17fc) REF sec=CODE 
block228 LAB (0x180c) sec=CODE 
EffScrolldown LAB (0x17ee) sec=CODE 
EffScrollup LAB (0x17e2) sec=CODE 
edblock221 LAB (0x17e0) sec=CODE 
ctb219 LAB (0x1796) UNUSED sec=CODE 
eblock220 LAB (0x17bc) sec=CODE 
EffBeerDrink LAB (0x1778) sec=CODE 
edblock212 LAB (0x1776) sec=CODE 
ctb210 LAB (0x172c) UNUSED sec=CODE 
eblock211 LAB (0x1752) sec=CODE 
ctb204 LAB (0x1716) UNUSED sec=CODE 
edblock206 LAB (0x1722) sec=CODE 
imageCupFull LAB (0x5eb34) REF sec=ChipRAM 
EffBeerFill LAB (0x16e2) sec=CODE 
EffBeerFoam LAB (0x16b6) sec=CODE 
waitforblitter200 LAB (0x164c) sec=CODE 
waitforblitter199 LAB (0x15d0) sec=CODE 
waitforblitter198 LAB (0x1554) sec=CODE 
waitforblitter197 LAB (0x14d8) sec=CODE 
waitforblitter196 LAB (0x145c) sec=CODE 
imageRestoreCup LAB (0x2571c) REF sec=ChipRAM 
ctb191 LAB (0x144a) UNUSED sec=CODE 
edblock193 LAB (0x1452) sec=CODE 
RemoveFoam LAB (0x1440) sec=CODE 
rf_yoffset LAB (0x143c) REF sec=CODE 
rf_dstimage LAB (0x1438) REF sec=CODE 
block189 LAB (0x1440) sec=CODE 
edblock184 LAB (0x1390) sec=CODE 
image2 LAB (0x43424) REF sec=ChipRAM 
image1 LAB (0x27d14) REF sec=ChipRAM 
ctb182 LAB (0x1326) UNUSED sec=CODE 
eblock183 LAB (0x135c) sec=CODE 
FlipBuffers LAB (0x131e) sec=CODE 
waitforblitter179 LAB (0x12b4) sec=CODE 
waitforblitter178 LAB (0x1232) sec=CODE 
waitforblitter177 LAB (0x11b0) sec=CODE 
waitforblitter176 LAB (0x112e) sec=CODE 
blitter LAB (0x1f9a) sec=CODE 
waitforblitter175 LAB (0x10ac) sec=CODE 
FillDrinkBeer LAB (0x10ac) sec=CODE 
fd_srcimageoffset LAB (0x10a8) REF sec=CODE 
fd_srcimage LAB (0x10a4) REF sec=CODE 
yoffset LAB (0x10a2) REF sec=CODE 
dstimage LAB (0x109e) REF sec=CODE 
block174 LAB (0x10ac) sec=CODE 
waitforblitter173 LAB (0xf22) sec=CODE 
imageMask LAB (0x610b4) REF sec=ChipRAM 
imageFoam LAB (0x60c40) REF sec=ChipRAM 
BeerFoam LAB (0xec4) sec=CODE 
foampos LAB (0xec0) REF sec=CODE 
foamsize LAB (0xebe) REF sec=CODE 
bf_dstimage LAB (0xeba) REF sec=CODE 
block172 LAB (0xec4) sec=CODE 
loopend169 LAB (0xeb6) UNUSED sec=CODE 
loopstart168 LAB (0xea6) UNUSED sec=CODE 
forloop167 LAB (0xe72) sec=CODE 
DistortMore LAB (0xe6a) sec=CODE 
edblock161 LAB (0xe68) sec=CODE 
ctb159 LAB (0xe58) UNUSED sec=CODE 
eblock160 LAB (0xe60) sec=CODE 
loopend143 LAB (0xe46) UNUSED sec=CODE 
ctb153 LAB (0xe38) UNUSED sec=CODE 
edblock155 LAB (0xe3c) sec=CODE 
ctb139 LAB (0xe28) UNUSED sec=CODE 
edblock141 LAB (0xe46) sec=CODE 
loopstart142 LAB (0xe1e) UNUSED sec=CODE 
while138 LAB (0xe1e) sec=CODE 
loopend123 LAB (0xe1e) UNUSED sec=CODE 
ctb133 LAB (0xe10) UNUSED sec=CODE 
edblock135 LAB (0xe14) sec=CODE 
ctb119 LAB (0xe00) UNUSED sec=CODE 
edblock121 LAB (0xe1e) sec=CODE 
loopstart122 LAB (0xdf6) UNUSED sec=CODE 
while118 LAB (0xdf6) sec=CODE 
ctb113 LAB (0xdea) UNUSED sec=CODE 
edblock115 LAB (0xdee) sec=CODE 
ctb101 LAB (0xdd6) UNUSED sec=CODE 
edblock103 LAB (0xdf6) sec=CODE 
loopend85 LAB (0xdcc) UNUSED sec=CODE 
ctb95 LAB (0xdbe) UNUSED sec=CODE 
edblock97 LAB (0xdc2) sec=CODE 
ctb81 LAB (0xdae) UNUSED sec=CODE 
edblock83 LAB (0xdcc) sec=CODE 
loopstart84 LAB (0xd9e) UNUSED sec=CODE 
while80 LAB (0xd9e) sec=CODE 
ctb75 LAB (0xd8e) UNUSED sec=CODE 
edblock77 LAB (0xd92) sec=CODE 
ctb63 LAB (0xd7e) UNUSED sec=CODE 
edblock65 LAB (0xd9e) sec=CODE 
loopend47 LAB (0xd74) UNUSED sec=CODE 
ctb57 LAB (0xd66) UNUSED sec=CODE 
edblock59 LAB (0xd6a) sec=CODE 
ctb43 LAB (0xd56) UNUSED sec=CODE 
edblock45 LAB (0xd74) sec=CODE 
loopstart46 LAB (0xd4a) UNUSED sec=CODE 
while42 LAB (0xd4a) sec=CODE 
copper_custom LAB (0x11c) REF sec=datachip 
CopperEffects LAB (0xd04) sec=CODE 
memcpy40 LAB (0xcf8) sec=CODE 
ColorCycleRestore LAB (0xcde) sec=CODE 
memcpy38 LAB (0xcd2) sec=CODE 
ColorCycle LAB (0xcb8) sec=CODE 
c_edblock136 LAB (0xcae) sec=CODE 
c_ctb134 LAB (0xc9e) UNUSED sec=CODE 
c_eblock135 LAB (0xca6) sec=CODE 
c_ctb128 LAB (0xc92) UNUSED sec=CODE 
c_edblock130 LAB (0xc94) sec=CODE 
c_edblock104 LAB (0xc94) sec=CODE 
c_ctb121 LAB (0xc7e) UNUSED sec=CODE 
c_edblock123 LAB (0xc80) sec=CODE 
c_ctb102 LAB (0xc76) UNUSED sec=CODE 
c_eblock103 LAB (0xc8a) sec=CODE 
c_edblock40 LAB (0xc94) sec=CODE 
c_ctb95 LAB (0xc6e) UNUSED sec=CODE 
c_edblock97 LAB (0xc70) sec=CODE 
c_ctb89 LAB (0xc5a) UNUSED sec=CODE 
c_edblock91 LAB (0xc5c) sec=CODE 
c_ctb38 LAB (0xc52) UNUSED sec=CODE 
c_eblock39 LAB (0xc72) sec=CODE 
DistortCopperLine LAB (0xc34) sec=CODE 
waitforblitter35 LAB (0xbd4) sec=CODE 
CookieCut LAB (0xbd4) sec=CODE 
cc_size LAB (0xbd2) REF sec=CODE 
cc_mask LAB (0xbce) REF sec=CODE 
cc_dst LAB (0xbca) REF sec=CODE 
cc_src LAB (0xbc6) REF sec=CODE 
block34 LAB (0xbd4) sec=CODE 
sizeof_LSPVars EXPR(46=0x2e) EQU 
m_relocDone EXPR(24=0x18) UNUSED EQU 
LSP_MusicGetPos LAB (0xb8e) UNUSED sec=CODE 
 LSP_MusicSetPos .noTimingInfo LAB (0xb8c) sec=CODE 
LSP_MusicSetPos LAB (0xb6c) UNUSED sec=CODE 
 LSP_MusicPlayTick .r_setPos LAB (0xb3e) UNUSED sec=CODE 
 LSP_MusicPlayTick .r_chgbpm LAB (0xb54) sec=CODE 
 LSP_MusicPlayTick .r_rewind LAB (0xb46) sec=CODE 
 LSP_MusicPlayTick .noReset LAB (0xb00) sec=CODE 
 LSP_MusicPlayTick .skip LAB (0xb08) sec=CODE 
 LSP_MusicPlayTick .setIns LAB (0xaf4) sec=CODE 
 LSP_MusicPlayTick .vloop LAB (0xae2) sec=CODE 
 LSP_MusicPlayTick .resetv LAB (0xb5c) sec=CODE 
 LSP_MusicPlayTick .noPb LAB (0xac6) sec=CODE 
 LSP_MusicPlayTick .noPc LAB (0xabe) sec=CODE 
 LSP_MusicPlayTick .noPd LAB (0xab6) sec=CODE 
 LSP_MusicPlayTick .noPa LAB (0xace) sec=CODE 
 LSP_MusicPlayTick .noVa LAB (0xaa6) sec=CODE 
 LSP_MusicPlayTick .noVb LAB (0xa9e) sec=CODE 
 LSP_MusicPlayTick .noVc LAB (0xa96) sec=CODE 
 LSP_MusicPlayTick .noVd LAB (0xa8e) sec=CODE 
 LSP_MusicPlayTick .cmdExec LAB (0xa86) sec=CODE 
 LSP_MusicPlayTick .noInst LAB (0xb18) sec=CODE 
 LSP_MusicPlayTick .cextended LAB (0xb1c) sec=CODE 
 LSP_MusicPlayTick .cloop LAB (0xa76) UNUSED sec=CODE 
 LSP_MusicPlayTick .process LAB (0xa74) sec=CODE 
m_byteStreamLoop EXPR(28=0x1c) EQU 
m_wordStreamLoop EXPR(32=0x20) EQU 
m_byteStream EXPR(0=0x0) EQU 
m_wordStream EXPR(4=0x4) EQU 
 LSP_MusicInit .skipRel LAB (0xa36) sec=CODE 
 LSP_MusicInit .seqRel LAB (0xa2c) sec=CODE 
m_currentSeq EXPR(42=0x2a) EQU 
m_seqTable EXPR(38=0x26) EQU 
 LSP_MusicInit .noSeq LAB (0xa3c) sec=CODE 
m_seqCount EXPR(36=0x24) EQU 
m_codeTableAddr EXPR(12=0xc) EQU 
 LSP_MusicInit .relocated LAB (0x9fa) sec=CODE 
 LSP_MusicInit .relocLoop LAB (0x9f0) sec=CODE 
m_lspInstruments EXPR(20=0x14) EQU 
m_escCodeGetPos EXPR(44=0x2c) EQU 
m_escCodeSetBpm EXPR(18=0x12) EQU 
m_escCodeRewind EXPR(16=0x10) EQU 
m_currentBpm EXPR(26=0x1a) EQU 
m_dmaconPatch EXPR(8=0x8) EQU 
LSP_State LAB (0xb94) sec=CODE 
 LSP_MusicInit .dataError LAB (0xa68) sec=CODE 
LSP_MusicDriver_CIA_Stop LAB (0x980) UNUSED sec=CODE 
 LSP_MusicDriver_CIA_Start .skipb LAB (0x974) sec=CODE 
 LSP_MusicDriver_CIA_Start .LSP_DmaconIrq LAB (0x954) sec=CODE 
 LSP_MusicDriver_CIA_Start .noChg LAB (0x932) sec=CODE 
LSP_MusicPlayTick LAB (0xa6a) sec=CODE 
 LSP_MusicDriver_CIA_Start .skipa LAB (0x948) sec=CODE 
 LSP_MusicDriver_CIA_Start .palClocks LAB (0x8ec) sec=CODE 
 LSP_MusicDriver_CIA_Start .LSP_MainIrq LAB (0x8f4) sec=CODE 
 LSP_MusicDriver_CIA_Start .ciaClock LAB (0x876) sec=CODE 
 LSP_MusicDriver_CIA_Start .LSP_IrqInstall LAB (0x880) sec=CODE 
 LSP_MusicDriver_CIA_Start .curBpm LAB (0x87a) sec=CODE 
 LSP_MusicDriver_CIA_Start .pMusicBPM LAB (0x87c) sec=CODE 
LSP_MusicInit LAB (0x9a2) sec=CODE 
 LSP_MusicDriver_CIA_Start .LSPDmaCon LAB (0x870) sec=CODE 
 LSP_MusicDriver_CIA_Start .irqVector LAB (0x872) sec=CODE 
lspend LAB (0xbc2) sec=CODE 
LSP_MusicDriver_CIA_Start LAB (0x846) sec=CODE 
LSP_CIAStart LAB (0x824) sec=CODE 
cs_palntsc LAB (0x822) REF sec=CODE 
cs_vbr LAB (0x820) REF sec=CODE 
cs_bank LAB (0x81c) REF sec=CODE 
cs_music LAB (0x818) REF sec=CODE 
block33 LAB (0x824) sec=CODE 
ctb28 LAB (0x7fe) UNUSED sec=CODE 
edblock30 LAB (0x814) sec=CODE 
ctb22 LAB (0x7be) UNUSED sec=CODE 
edblock24 LAB (0x7f4) sec=CODE 
ctb16 LAB (0x75e) UNUSED sec=CODE 
edblock18 LAB (0x7b4) sec=CODE 
ctb10 LAB (0x6de) UNUSED sec=CODE 
edblock12 LAB (0x754) sec=CODE 
copper_bitplane4 LAB (0x108) REF sec=datachip 
copper_bitplane3 LAB (0x100) REF sec=datachip 
copper_bitplane2 LAB (0xf8) REF sec=datachip 
copper_bitplane1 LAB (0xf0) REF sec=datachip 
copper_bitplane0 LAB (0xe8) REF sec=datachip 
ctb4 LAB (0x63e) UNUSED sec=CODE 
edblock6 LAB (0x6d4) sec=CODE 
copper_mod_odd LAB (0x16) REF sec=datachip 
copper_mod_even LAB (0x12) REF sec=datachip 
copper_resolution LAB (0x11a) REF sec=datachip 
Graphics_SetupNonInterlacedScreen LAB (0x5fc) sec=CODE 
block2 LAB (0x5fc) sec=CODE 
frameCounter LAB (0x5f6) REF sec=CODE 
planeoffset LAB (0x5f2) REF sec=CODE 
tmp2 LAB (0x5ee) REF sec=CODE 
tmp LAB (0x5ec) REF sec=CODE 
row LAB (0x5ea) REF sec=CODE 
sine4CopperAdd LAB (0x3ea) sec=CODE 
sine4Copper LAB (0x1ea) sec=CODE 
srcimage LAB (0x1e6) REF sec=CODE 
imagemask LAB (0x1e2) REF sec=CODE 
effectNumber LAB (0x1e0) REF sec=CODE 
musicPosOld LAB (0x1de) REF sec=CODE 
istart LAB (0x1dc) REF sec=CODE 
curbplmod LAB (0x1da) REF sec=CODE 
beerinput LAB (0x1d8) REF sec=CODE 
current LAB (0x1d6) UNUSED sec=CODE 
musicPos LAB (0x1d4) REF sec=CODE 
bltsize LAB (0x1d2) REF sec=CODE 
i LAB (0x1d0) REF sec=CODE 
offscreen LAB (0x1cc) REF sec=CODE 
screen LAB (0x1c8) REF sec=CODE 
image_palette_cycled LAB (0x148) sec=CODE 
image_palette LAB (0xc8) sec=CODE 
yOffset LAB (0xc6) REF sec=CODE 
eff0Counter LAB (0xc4) REF sec=CODE 
foamCounter LAB (0xc2) REF sec=CODE 
screenOffset LAB (0xbe) REF sec=CODE 
lightypos LAB (0xbc) REF sec=CODE 
curcopperpos LAB (0xb8) REF sec=CODE 
colorcycled LAB (0xb6) REF sec=CODE 
isDone LAB (0xb4) REF sec=CODE 
curBuf LAB (0xb2) REF sec=CODE 
Graphics_bytefill3 LAB (0xaa) UNUSED sec=CODE 
Graphics_bytefill2 LAB (0xa0) UNUSED sec=CODE 
Graphics_bytefill1 LAB (0x98) UNUSED sec=CODE 
Graphics_j LAB (0x96) REF sec=CODE 
Graphics_bpl LAB (0x94) REF sec=CODE 
Graphics_pa LAB (0x90) REF sec=CODE 
block1 LAB (0x1a54) sec=CODE 
cop LAB (0x0) REF sec=datachip 
oldcopper LAB (0x1fd4) REF sec=CODE 
oldview LAB (0x1fd0) REF sec=CODE 
gfxbase LAB (0x1fd8) REF sec=CODE 
gfxname LAB (0x1fec) sec=CODE 
oldadkcon LAB (0x1fe6) REF sec=CODE 
oldintreq LAB (0x1fe2) REF sec=CODE 
oldintena LAB (0x1fe4) REF sec=CODE 
olddmareq LAB (0x1fe0) REF sec=CODE 
init LAB (0x0) UNUSED sec=CODE 
INTREQ2 EXPR(156=0x9c) UNUSED EQU 
INTENA2 EXPR(154=0x9a) UNUSED EQU 
ADKCON2 EXPR(158=0x9e) UNUSED EQU 
DMACON2 EXPR(150=0x96) UNUSED EQU 
INTREQ EXPR(14676124=0xdff09c) EQU 
INTENA EXPR(14676122=0xdff09a) EQU 
ADKCON EXPR(14676126=0xdff09e) EQU 
DMACON EXPR(14676118=0xdff096) EQU 
INTREQR2 EXPR(30=0x1e) UNUSED EQU 
INTENAR2 EXPR(28=0x1c) UNUSED EQU 
ADKCONR2 EXPR(16=0x10) UNUSED EQU 
DMACONR2 EXPR(2=0x2) UNUSED EQU 
COP1LCH2 EXPR(128=0x80) UNUSED EQU 
VPOSR2 EXPR(4=0x4) UNUSED EQU 
CIAAPRA2 EXPR(1=0x1) UNUSED EQU 
INTREQR EXPR(14675998=0xdff01e) EQU 
INTENAR EXPR(14675996=0xdff01c) EQU 
ADKCONR EXPR(14675984=0xdff010) EQU 
DMACONR EXPR(14675970=0xdff002) EQU 
COP1LCH EXPR(14676096=0xdff080) EQU 
VPOSR EXPR(14675972=0xdff004) EQU 
CIAAPRA EXPR(12574721=0xbfe001) UNUSED EQU 
BLTBDAT EXPR(114=0x72) UNUSED EQU 
BLTADAT EXPR(116=0x74) UNUSED EQU 
BLTSIZE EXPR(88=0x58) EQU 
BLTDPTH EXPR(84=0x54) EQU 
BLTCPTH EXPR(72=0x48) EQU 
BLTBPTH EXPR(76=0x4c) EQU 
BLTAPTL EXPR(82=0x52) UNUSED EQU 
BLTAPTH EXPR(80=0x50) EQU 
VHPOSR EXPR(6=0x6) UNUSED EQU 
BLTCON1 EXPR(66=0x42) EQU 
BLTCON0 EXPR(64=0x40) EQU 
BLTAFWM EXPR(68=0x44) EQU 
BLTDMOD EXPR(102=0x66) EQU 
BLTCMOD EXPR(96=0x60) EQU 
BLTBMOD EXPR(98=0x62) EQU 
BLTAMOD EXPR(100=0x64) EQU 
BPLCON2 EXPR(260=0x104) UNUSED EQU 
BPLCON1 EXPR(258=0x102) UNUSED EQU 
BPLCON0 EXPR(256=0x100) UNUSED EQU 
__LINE__ EXPR(2535=0x9e7) INTERNAL 
__FO EXPR(0=0x0) INTERNAL 
__RS EXPR(46=0x2e) INTERNAL 
REPTN EXPR(-1=0xffffffff) INTERNAL 
__VASM EXPR(1=0x1) INTERNAL 

There have been no errors.
